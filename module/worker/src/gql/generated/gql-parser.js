// Generated from /home/runner/work/editor/editor/tmp/GQL.g4 by ANTLR 4.13.1
// jshint ignore: start
import antlr4 from 'antlr4';
import GQLListener from './gql-listener.js';
const serializedATN = [4,1,391,4618,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,
7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,
2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,
7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,
34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,
2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,
49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,
63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,
78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,85,
7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,2,92,7,
92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,98,2,99,7,99,
2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,7,104,2,105,7,105,
2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,7,110,2,111,7,111,
2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,7,116,2,117,7,117,
2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,7,122,2,123,7,123,
2,124,7,124,2,125,7,125,2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,
2,130,7,130,2,131,7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,
2,136,7,136,2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,
2,142,7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,2,147,7,147,
2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,2,153,7,153,
2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,2,159,7,159,
2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,7,164,2,165,7,165,
2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,2,170,7,170,2,171,7,171,
2,172,7,172,2,173,7,173,2,174,7,174,2,175,7,175,2,176,7,176,2,177,7,177,
2,178,7,178,2,179,7,179,2,180,7,180,2,181,7,181,2,182,7,182,2,183,7,183,
2,184,7,184,2,185,7,185,2,186,7,186,2,187,7,187,2,188,7,188,2,189,7,189,
2,190,7,190,2,191,7,191,2,192,7,192,2,193,7,193,2,194,7,194,2,195,7,195,
2,196,7,196,2,197,7,197,2,198,7,198,2,199,7,199,2,200,7,200,2,201,7,201,
2,202,7,202,2,203,7,203,2,204,7,204,2,205,7,205,2,206,7,206,2,207,7,207,
2,208,7,208,2,209,7,209,2,210,7,210,2,211,7,211,2,212,7,212,2,213,7,213,
2,214,7,214,2,215,7,215,2,216,7,216,2,217,7,217,2,218,7,218,2,219,7,219,
2,220,7,220,2,221,7,221,2,222,7,222,2,223,7,223,2,224,7,224,2,225,7,225,
2,226,7,226,2,227,7,227,2,228,7,228,2,229,7,229,2,230,7,230,2,231,7,231,
2,232,7,232,2,233,7,233,2,234,7,234,2,235,7,235,2,236,7,236,2,237,7,237,
2,238,7,238,2,239,7,239,2,240,7,240,2,241,7,241,2,242,7,242,2,243,7,243,
2,244,7,244,2,245,7,245,2,246,7,246,2,247,7,247,2,248,7,248,2,249,7,249,
2,250,7,250,2,251,7,251,2,252,7,252,2,253,7,253,2,254,7,254,2,255,7,255,
2,256,7,256,2,257,7,257,2,258,7,258,2,259,7,259,2,260,7,260,2,261,7,261,
2,262,7,262,2,263,7,263,2,264,7,264,2,265,7,265,2,266,7,266,2,267,7,267,
2,268,7,268,2,269,7,269,2,270,7,270,2,271,7,271,2,272,7,272,2,273,7,273,
2,274,7,274,2,275,7,275,2,276,7,276,2,277,7,277,2,278,7,278,2,279,7,279,
2,280,7,280,2,281,7,281,2,282,7,282,2,283,7,283,2,284,7,284,2,285,7,285,
2,286,7,286,2,287,7,287,2,288,7,288,2,289,7,289,2,290,7,290,2,291,7,291,
2,292,7,292,2,293,7,293,2,294,7,294,2,295,7,295,2,296,7,296,2,297,7,297,
2,298,7,298,2,299,7,299,2,300,7,300,2,301,7,301,2,302,7,302,2,303,7,303,
2,304,7,304,2,305,7,305,2,306,7,306,2,307,7,307,2,308,7,308,2,309,7,309,
2,310,7,310,2,311,7,311,2,312,7,312,2,313,7,313,2,314,7,314,2,315,7,315,
2,316,7,316,2,317,7,317,2,318,7,318,2,319,7,319,2,320,7,320,2,321,7,321,
2,322,7,322,2,323,7,323,2,324,7,324,2,325,7,325,2,326,7,326,2,327,7,327,
2,328,7,328,2,329,7,329,2,330,7,330,2,331,7,331,2,332,7,332,2,333,7,333,
2,334,7,334,2,335,7,335,2,336,7,336,2,337,7,337,2,338,7,338,2,339,7,339,
2,340,7,340,2,341,7,341,2,342,7,342,2,343,7,343,2,344,7,344,2,345,7,345,
2,346,7,346,2,347,7,347,2,348,7,348,2,349,7,349,2,350,7,350,2,351,7,351,
2,352,7,352,2,353,7,353,2,354,7,354,2,355,7,355,2,356,7,356,2,357,7,357,
2,358,7,358,2,359,7,359,2,360,7,360,2,361,7,361,2,362,7,362,2,363,7,363,
2,364,7,364,2,365,7,365,2,366,7,366,2,367,7,367,2,368,7,368,2,369,7,369,
2,370,7,370,2,371,7,371,2,372,7,372,2,373,7,373,2,374,7,374,2,375,7,375,
2,376,7,376,2,377,7,377,2,378,7,378,2,379,7,379,2,380,7,380,2,381,7,381,
2,382,7,382,2,383,7,383,2,384,7,384,2,385,7,385,2,386,7,386,2,387,7,387,
2,388,7,388,2,389,7,389,2,390,7,390,2,391,7,391,2,392,7,392,2,393,7,393,
2,394,7,394,2,395,7,395,2,396,7,396,2,397,7,397,2,398,7,398,2,399,7,399,
2,400,7,400,2,401,7,401,2,402,7,402,2,403,7,403,2,404,7,404,2,405,7,405,
2,406,7,406,2,407,7,407,2,408,7,408,2,409,7,409,2,410,7,410,2,411,7,411,
2,412,7,412,2,413,7,413,2,414,7,414,2,415,7,415,2,416,7,416,2,417,7,417,
2,418,7,418,2,419,7,419,2,420,7,420,2,421,7,421,2,422,7,422,2,423,7,423,
2,424,7,424,2,425,7,425,2,426,7,426,2,427,7,427,2,428,7,428,2,429,7,429,
2,430,7,430,2,431,7,431,2,432,7,432,2,433,7,433,2,434,7,434,2,435,7,435,
2,436,7,436,2,437,7,437,2,438,7,438,2,439,7,439,2,440,7,440,2,441,7,441,
2,442,7,442,2,443,7,443,2,444,7,444,2,445,7,445,2,446,7,446,2,447,7,447,
2,448,7,448,2,449,7,449,2,450,7,450,2,451,7,451,2,452,7,452,2,453,7,453,
2,454,7,454,2,455,7,455,2,456,7,456,2,457,7,457,2,458,7,458,2,459,7,459,
2,460,7,460,2,461,7,461,2,462,7,462,2,463,7,463,2,464,7,464,2,465,7,465,
2,466,7,466,2,467,7,467,2,468,7,468,2,469,7,469,2,470,7,470,2,471,7,471,
2,472,7,472,2,473,7,473,2,474,7,474,2,475,7,475,2,476,7,476,2,477,7,477,
2,478,7,478,2,479,7,479,2,480,7,480,2,481,7,481,2,482,7,482,2,483,7,483,
2,484,7,484,2,485,7,485,2,486,7,486,2,487,7,487,2,488,7,488,2,489,7,489,
2,490,7,490,2,491,7,491,2,492,7,492,2,493,7,493,2,494,7,494,2,495,7,495,
2,496,7,496,2,497,7,497,2,498,7,498,2,499,7,499,2,500,7,500,2,501,7,501,
2,502,7,502,2,503,7,503,2,504,7,504,2,505,7,505,2,506,7,506,2,507,7,507,
2,508,7,508,2,509,7,509,2,510,7,510,2,511,7,511,2,512,7,512,2,513,7,513,
2,514,7,514,2,515,7,515,2,516,7,516,2,517,7,517,2,518,7,518,2,519,7,519,
2,520,7,520,2,521,7,521,2,522,7,522,2,523,7,523,2,524,7,524,2,525,7,525,
2,526,7,526,2,527,7,527,2,528,7,528,2,529,7,529,2,530,7,530,2,531,7,531,
2,532,7,532,2,533,7,533,2,534,7,534,2,535,7,535,2,536,7,536,2,537,7,537,
2,538,7,538,2,539,7,539,2,540,7,540,2,541,7,541,2,542,7,542,2,543,7,543,
2,544,7,544,2,545,7,545,2,546,7,546,2,547,7,547,2,548,7,548,2,549,7,549,
2,550,7,550,2,551,7,551,2,552,7,552,2,553,7,553,2,554,7,554,2,555,7,555,
2,556,7,556,2,557,7,557,2,558,7,558,2,559,7,559,2,560,7,560,2,561,7,561,
2,562,7,562,2,563,7,563,2,564,7,564,2,565,7,565,2,566,7,566,2,567,7,567,
2,568,7,568,2,569,7,569,2,570,7,570,2,571,7,571,2,572,7,572,2,573,7,573,
2,574,7,574,1,0,1,0,3,0,1153,8,0,1,0,1,0,1,0,1,0,1,0,3,0,1160,8,0,1,1,1,
1,3,1,1164,8,1,1,2,4,2,1167,8,2,11,2,12,2,1168,1,2,4,2,1172,8,2,11,2,12,
2,1173,1,2,5,2,1177,8,2,10,2,12,2,1180,9,2,3,2,1182,8,2,1,3,1,3,1,3,3,3,
1187,8,3,3,3,1189,8,3,1,3,1,3,3,3,1193,8,3,1,3,3,3,1196,8,3,1,4,1,4,3,4,
1200,8,4,1,5,1,5,1,5,1,5,1,5,1,5,3,5,1208,8,5,1,6,1,6,1,6,1,7,3,7,1214,8,
7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,9,1,9,1,10,1,10,1,10,3,10,1228,8,10,1,11,
3,11,1231,8,11,1,11,1,11,1,11,1,11,1,12,3,12,1238,8,12,1,12,1,12,1,12,1,
12,1,13,1,13,1,13,1,13,1,14,1,14,1,14,3,14,1251,8,14,1,14,1,14,1,15,1,15,
1,15,3,15,1258,8,15,1,16,3,16,1261,8,16,1,16,1,16,1,16,3,16,1266,8,16,1,
16,1,16,1,16,1,16,3,16,1272,8,16,1,16,3,16,1275,8,16,1,17,1,17,1,17,1,18,
1,18,1,19,1,19,1,19,3,19,1285,8,19,1,20,1,20,1,20,5,20,1290,8,20,10,20,12,
20,1293,9,20,1,21,1,21,1,22,1,22,1,22,1,22,3,22,1301,8,22,1,23,1,23,1,24,
1,24,1,25,1,25,1,25,1,25,1,26,1,26,1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,
28,1,29,3,29,1322,8,29,1,29,3,29,1325,8,29,1,29,1,29,1,30,4,30,1330,8,30,
11,30,12,30,1331,1,31,1,31,1,31,3,31,1337,8,31,1,32,1,32,5,32,1341,8,32,
10,32,12,32,1344,9,32,1,33,1,33,1,33,3,33,1349,8,33,1,34,1,34,3,34,1353,
8,34,1,34,1,34,1,35,3,35,1358,8,35,1,35,1,35,1,35,1,35,1,36,3,36,1365,8,
36,1,36,3,36,1368,8,36,1,36,1,36,1,37,1,37,1,37,1,38,3,38,1376,8,38,1,38,
1,38,1,38,1,38,1,39,3,39,1383,8,39,1,39,3,39,1386,8,39,1,39,1,39,1,40,1,
40,1,40,1,41,1,41,1,41,1,41,1,42,3,42,1398,8,42,1,42,3,42,1401,8,42,1,42,
1,42,1,43,1,43,1,43,1,44,1,44,1,44,1,44,3,44,1412,8,44,1,45,1,45,1,46,1,
46,1,46,1,46,3,46,1420,8,46,1,47,1,47,1,48,1,48,1,48,1,48,3,48,1428,8,48,
1,49,4,49,1431,8,49,11,49,12,49,1432,1,50,1,50,3,50,1437,8,50,1,51,1,51,
1,51,1,51,1,51,1,51,3,51,1445,8,51,1,52,1,52,1,52,1,52,1,52,3,52,1452,8,
52,1,52,1,52,1,53,1,53,1,53,1,53,3,53,1460,8,53,1,53,1,53,1,54,1,54,3,54,
1466,8,54,1,54,1,54,1,54,1,54,3,54,1472,8,54,1,54,1,54,1,54,3,54,1477,8,
54,1,54,3,54,1480,8,54,1,54,1,54,1,54,3,54,1485,8,54,1,54,3,54,1488,8,54,
1,55,3,55,1491,8,55,1,55,1,55,3,55,1495,8,55,1,55,3,55,1498,8,55,1,56,1,
56,3,56,1502,8,56,1,56,1,56,3,56,1506,8,56,1,56,3,56,1509,8,56,1,56,3,56,
1512,8,56,1,56,3,56,1515,8,56,1,57,1,57,1,57,1,58,1,58,1,58,1,58,1,58,1,
59,1,59,3,59,1527,8,59,1,59,1,59,1,59,3,59,1532,8,59,1,59,1,59,1,60,1,60,
3,60,1538,8,60,1,60,1,60,1,60,1,60,1,60,3,60,1545,8,60,1,60,1,60,1,60,3,
60,1550,8,60,1,60,1,60,3,60,1554,8,60,1,60,1,60,1,60,1,61,3,61,1560,8,61,
1,61,1,61,1,61,3,61,1565,8,61,1,61,3,61,1568,8,61,1,62,1,62,1,62,1,62,1,
63,1,63,3,63,1576,8,63,1,63,1,63,1,63,1,63,3,63,1582,8,63,1,63,1,63,1,64,
1,64,1,65,1,65,3,65,1590,8,65,1,66,1,66,3,66,1594,8,66,1,67,1,67,1,67,3,
67,1599,8,67,1,68,1,68,1,68,1,69,1,69,3,69,1606,8,69,1,70,1,70,3,70,1610,
8,70,1,71,4,71,1613,8,71,11,71,12,71,1614,1,72,1,72,3,72,1619,8,72,1,73,
1,73,3,73,1623,8,73,1,74,1,74,1,74,1,74,3,74,1629,8,74,1,75,1,75,1,75,1,
76,1,76,1,76,1,77,1,77,1,77,5,77,1640,8,77,10,77,12,77,1643,9,77,1,78,1,
78,1,78,3,78,1648,8,78,1,79,1,79,1,79,1,79,1,79,1,79,1,80,1,80,1,80,1,80,
3,80,1660,8,80,1,80,1,80,1,81,1,81,1,81,1,81,1,82,1,82,1,82,1,83,1,83,1,
83,5,83,1674,8,83,10,83,12,83,1677,9,83,1,84,1,84,3,84,1681,8,84,1,85,1,
85,1,85,1,85,1,86,1,86,1,86,1,86,1,87,3,87,1692,8,87,1,87,1,87,1,87,1,88,
1,88,1,88,5,88,1700,8,88,10,88,12,88,1703,9,88,1,89,1,89,1,90,1,90,1,91,
1,91,1,92,1,92,1,92,1,92,1,92,1,92,1,92,5,92,1718,8,92,10,92,12,92,1721,
9,92,1,93,1,93,3,93,1725,8,93,1,94,1,94,3,94,1729,8,94,1,94,1,94,3,94,1733,
8,94,1,94,1,94,3,94,1737,8,94,3,94,1739,8,94,1,95,1,95,1,96,1,96,3,96,1745,
8,96,1,97,5,97,1748,8,97,10,97,12,97,1751,9,97,1,97,1,97,1,97,1,97,3,97,
1757,8,97,1,98,1,98,1,98,1,99,1,99,1,99,1,99,1,100,1,100,1,100,1,101,1,101,
1,101,1,102,3,102,1773,8,102,1,102,1,102,3,102,1777,8,102,1,103,4,103,1780,
8,103,11,103,12,103,1781,1,104,1,104,3,104,1786,8,104,1,105,1,105,1,105,
1,105,1,105,3,105,1793,8,105,1,106,1,106,3,106,1797,8,106,1,107,1,107,1,
107,1,108,1,108,1,108,1,109,1,109,1,109,1,109,1,109,1,109,1,109,1,109,1,
109,3,109,1814,8,109,1,110,4,110,1817,8,110,11,110,12,110,1818,1,111,1,111,
1,112,1,112,1,112,3,112,1826,8,112,1,113,1,113,1,113,1,114,1,114,1,114,5,
114,1834,8,114,10,114,12,114,1837,9,114,1,115,1,115,1,115,1,115,1,115,3,
115,1844,8,115,1,116,1,116,1,116,3,116,1849,8,116,1,117,1,117,1,117,1,118,
1,118,1,118,1,119,1,119,1,120,1,120,1,120,1,120,1,121,1,121,3,121,1865,8,
121,1,121,3,121,1868,8,121,1,121,1,121,3,121,1872,8,121,1,121,3,121,1875,
8,121,1,122,1,122,3,122,1879,8,122,1,122,3,122,1882,8,122,1,123,1,123,1,
123,1,124,3,124,1888,8,124,1,124,1,124,3,124,1892,8,124,1,124,3,124,1895,
8,124,1,124,1,124,3,124,1899,8,124,1,125,1,125,1,125,5,125,1904,8,125,10,
125,12,125,1907,9,125,1,126,1,126,3,126,1911,8,126,1,127,1,127,1,127,1,128,
1,128,3,128,1918,8,128,1,128,1,128,3,128,1922,8,128,1,128,1,128,3,128,1926,
8,128,1,128,3,128,1929,8,128,1,128,3,128,1932,8,128,1,128,3,128,1935,8,128,
1,128,3,128,1938,8,128,1,128,3,128,1941,8,128,3,128,1943,8,128,1,129,1,129,
1,129,5,129,1948,8,129,10,129,12,129,1951,9,129,1,130,1,130,3,130,1955,8,
130,1,131,1,131,1,131,1,132,1,132,1,132,1,133,1,133,1,133,3,133,1966,8,133,
1,134,1,134,1,134,5,134,1971,8,134,10,134,12,134,1974,9,134,1,135,1,135,
1,135,1,136,1,136,1,136,1,136,3,136,1983,8,136,1,137,3,137,1986,8,137,1,
137,1,137,1,137,1,138,1,138,3,138,1993,8,138,1,139,3,139,1996,8,139,1,139,
1,139,1,140,1,140,3,140,2002,8,140,1,140,1,140,1,141,1,141,1,141,5,141,2009,
8,141,10,141,12,141,2012,9,141,1,142,1,142,1,142,3,142,2017,8,142,1,142,
1,142,3,142,2021,8,142,1,143,1,143,1,143,5,143,2026,8,143,10,143,12,143,
2029,9,143,1,144,1,144,1,145,1,145,1,145,1,146,1,146,1,146,1,147,1,147,3,
147,2041,8,147,1,148,1,148,1,148,1,149,1,149,1,149,5,149,2049,8,149,10,149,
12,149,2052,9,149,1,149,1,149,3,149,2056,8,149,1,150,1,150,1,151,3,151,2061,
8,151,1,151,1,151,3,151,2065,8,151,1,151,3,151,2068,8,151,1,152,1,152,3,
152,2072,8,152,1,153,1,153,1,153,1,154,1,154,1,154,1,155,1,155,3,155,2082,
8,155,1,155,3,155,2085,8,155,1,156,1,156,3,156,2089,8,156,1,156,3,156,2092,
8,156,1,157,1,157,1,157,5,157,2097,8,157,10,157,12,157,2100,9,157,1,158,
3,158,2103,8,158,1,158,3,158,2106,8,158,1,158,1,158,1,159,1,159,1,159,1,
160,1,160,1,160,1,161,1,161,1,161,1,162,1,162,1,163,1,163,1,163,5,163,2124,
8,163,10,163,12,163,2127,9,163,1,164,1,164,1,164,1,164,5,164,2133,8,164,
10,164,12,164,2136,9,164,1,165,1,165,3,165,2140,8,165,1,165,1,165,1,166,
1,166,1,166,3,166,2147,8,166,1,167,1,167,3,167,2151,8,167,1,167,1,167,1,
168,1,168,3,168,2157,8,168,1,168,1,168,1,169,1,169,3,169,2163,8,169,1,169,
1,169,1,170,1,170,3,170,2169,8,170,1,170,3,170,2172,8,170,1,170,3,170,2175,
8,170,1,171,1,171,1,171,3,171,2180,8,171,1,171,1,171,1,171,3,171,2185,8,
171,1,171,3,171,2188,8,171,1,172,1,172,3,172,2192,8,172,1,173,1,173,3,173,
2196,8,173,1,174,1,174,1,175,1,175,1,175,3,175,2203,8,175,1,176,1,176,3,
176,2207,8,176,1,176,3,176,2210,8,176,1,177,1,177,1,178,1,178,3,178,2216,
8,178,1,178,3,178,2219,8,178,1,178,3,178,2222,8,178,1,179,1,179,1,180,1,
180,1,180,1,180,3,180,2230,8,180,1,181,1,181,1,181,3,181,2235,8,181,1,181,
3,181,2238,8,181,1,182,1,182,1,182,3,182,2243,8,182,1,182,3,182,2246,8,182,
1,183,1,183,1,183,3,183,2251,8,183,1,183,3,183,2254,8,183,1,184,1,184,3,
184,2258,8,184,1,184,3,184,2261,8,184,1,184,3,184,2264,8,184,1,184,1,184,
1,185,1,185,1,186,1,186,1,186,1,186,4,186,2274,8,186,11,186,12,186,2275,
1,186,1,186,1,186,4,186,2281,8,186,11,186,12,186,2282,3,186,2285,8,186,1,
187,4,187,2288,8,187,11,187,12,187,2289,1,188,1,188,1,188,1,188,1,188,1,
188,1,188,3,188,2299,8,188,1,189,1,189,1,189,3,189,2304,8,189,1,190,1,190,
3,190,2308,8,190,1,191,1,191,1,191,1,191,1,192,3,192,2315,8,192,1,192,3,
192,2318,8,192,1,192,3,192,2321,8,192,1,193,3,193,2324,8,193,1,193,1,193,
1,194,1,194,1,194,1,195,1,195,1,196,1,196,3,196,2335,8,196,1,197,1,197,1,
197,1,198,1,198,1,198,1,198,1,199,1,199,1,199,5,199,2347,8,199,10,199,12,
199,2350,9,199,1,200,1,200,1,200,1,200,1,201,1,201,3,201,2358,8,201,1,202,
1,202,1,202,1,202,1,202,1,202,1,202,3,202,2367,8,202,1,203,1,203,1,203,1,
203,1,204,1,204,1,204,1,204,1,205,1,205,1,205,1,205,1,206,1,206,1,206,1,
206,1,207,1,207,1,207,1,207,1,208,1,208,1,208,1,208,1,209,1,209,1,209,1,
209,1,210,1,210,1,211,1,211,3,211,2401,8,211,1,211,3,211,2404,8,211,1,211,
1,211,3,211,2408,8,211,1,211,1,211,1,212,1,212,1,212,1,213,1,213,1,213,1,
214,1,214,1,214,1,214,1,214,1,214,1,214,1,214,1,214,3,214,2427,8,214,1,214,
1,214,1,214,1,214,1,214,1,214,5,214,2435,8,214,10,214,12,214,2438,9,214,
1,215,1,215,1,216,1,216,1,217,1,217,1,217,1,217,3,217,2448,8,217,1,218,1,
218,1,218,1,218,1,219,1,219,3,219,2456,8,219,1,219,1,219,3,219,2460,8,219,
1,219,1,219,1,220,1,220,1,221,1,221,1,222,1,222,1,222,1,222,1,222,1,222,
1,222,3,222,2475,8,222,1,223,1,223,1,223,1,223,1,224,1,224,1,224,1,224,1,
225,1,225,1,225,1,225,1,226,1,226,1,226,1,226,1,227,1,227,1,227,1,227,1,
228,1,228,1,228,1,228,1,229,1,229,1,229,1,229,1,230,1,230,1,230,3,230,2508,
8,230,1,231,1,231,1,231,1,231,1,231,5,231,2515,8,231,10,231,12,231,2518,
9,231,1,232,1,232,1,232,1,232,1,232,5,232,2525,8,232,10,232,12,232,2528,
9,232,1,233,1,233,1,233,1,233,1,233,5,233,2535,8,233,10,233,12,233,2538,
9,233,1,234,1,234,1,234,1,234,1,234,1,234,5,234,2546,8,234,10,234,12,234,
2549,9,234,1,235,1,235,1,235,3,235,2554,8,235,1,236,1,236,1,236,1,237,1,
237,1,237,1,238,1,238,3,238,2564,8,238,1,239,1,239,1,239,1,239,1,239,1,239,
1,239,3,239,2573,8,239,1,240,1,240,1,240,1,241,1,241,1,241,1,242,1,242,1,
242,1,243,1,243,1,243,1,244,1,244,1,244,1,244,1,245,1,245,1,245,1,245,1,
246,1,246,1,246,1,247,1,247,3,247,2600,8,247,1,248,1,248,1,248,1,249,1,249,
1,249,1,249,1,249,3,249,2610,8,249,1,250,1,250,1,250,1,251,1,251,1,251,1,
252,1,252,1,252,5,252,2621,8,252,10,252,12,252,2624,9,252,1,253,1,253,3,
253,2628,8,253,1,254,1,254,1,255,1,255,1,255,1,256,1,256,1,256,1,256,1,257,
1,257,1,257,5,257,2642,8,257,10,257,12,257,2645,9,257,1,257,3,257,2648,8,
257,1,258,1,258,1,259,1,259,1,259,1,260,1,260,1,260,1,260,1,261,1,261,1,
261,5,261,2662,8,261,10,261,12,261,2665,9,261,1,262,1,262,3,262,2669,8,262,
1,262,3,262,2672,8,262,1,263,1,263,1,264,1,264,1,265,1,265,1,265,1,265,3,
265,2682,8,265,1,266,1,266,1,266,1,267,1,267,1,267,1,268,1,268,1,269,1,269,
1,269,3,269,2695,8,269,1,270,1,270,1,270,1,270,3,270,2701,8,270,1,271,1,
271,1,271,1,272,1,272,1,272,1,272,3,272,2710,8,272,1,273,1,273,1,274,1,274,
3,274,2716,8,274,1,275,1,275,1,275,5,275,2721,8,275,10,275,12,275,2724,9,
275,1,275,1,275,3,275,2728,8,275,1,276,1,276,1,276,4,276,2733,8,276,11,276,
12,276,2734,1,277,1,277,1,277,1,277,1,277,1,277,3,277,2743,8,277,1,278,3,
278,2746,8,278,1,278,1,278,1,279,1,279,1,280,1,280,3,280,2754,8,280,1,281,
3,281,2757,8,281,1,281,1,281,1,282,1,282,1,282,1,282,1,282,3,282,2766,8,
282,1,283,1,283,3,283,2770,8,283,1,284,3,284,2773,8,284,1,284,1,284,1,285,
1,285,3,285,2779,8,285,1,285,1,285,1,285,5,285,2784,8,285,10,285,12,285,
2787,9,285,1,285,1,285,1,285,4,285,2792,8,285,11,285,12,285,2793,3,285,2796,
8,285,1,286,1,286,1,287,1,287,1,287,1,287,1,288,1,288,1,289,1,289,1,289,
5,289,2809,8,289,10,289,12,289,2812,9,289,1,290,1,290,3,290,2816,8,290,1,
291,1,291,3,291,2820,8,291,1,292,1,292,3,292,2824,8,292,1,292,1,292,3,292,
2828,8,292,1,292,1,292,3,292,2832,8,292,1,292,3,292,2835,8,292,1,292,1,292,
1,293,1,293,3,293,2841,8,293,1,293,1,293,1,293,3,293,2846,8,293,1,294,1,
294,3,294,2850,8,294,1,294,3,294,2853,8,294,1,295,1,295,3,295,2857,8,295,
1,295,3,295,2860,8,295,1,296,1,296,1,297,1,297,1,297,1,297,1,297,3,297,2869,
8,297,1,298,3,298,2872,8,298,1,298,1,298,1,299,1,299,1,300,1,300,1,301,1,
301,3,301,2882,8,301,1,302,3,302,2885,8,302,1,302,1,302,3,302,2889,8,302,
1,302,1,302,3,302,2893,8,302,1,302,1,302,3,302,2897,8,302,1,303,1,303,1,
303,3,303,2902,8,303,1,303,1,303,1,303,1,304,1,304,3,304,2909,8,304,1,304,
3,304,2912,8,304,1,305,1,305,3,305,2916,8,305,1,305,3,305,2919,8,305,1,306,
1,306,1,306,1,306,1,306,3,306,2926,8,306,1,307,3,307,2929,8,307,1,307,1,
307,1,308,1,308,1,309,1,309,1,310,1,310,3,310,2939,8,310,1,311,1,311,1,311,
1,311,1,312,1,312,1,312,1,312,1,313,1,313,1,313,1,313,1,314,1,314,1,314,
1,314,1,315,1,315,1,315,1,315,1,316,1,316,1,316,1,316,1,317,1,317,1,317,
1,317,1,317,1,317,3,317,2971,8,317,1,317,3,317,2974,8,317,1,318,1,318,1,
318,1,318,1,318,1,318,3,318,2982,8,318,1,318,3,318,2985,8,318,1,319,1,319,
1,320,1,320,1,320,1,321,1,321,3,321,2994,8,321,1,322,1,322,3,322,2998,8,
322,1,323,1,323,1,323,1,323,1,323,1,323,1,324,1,324,1,324,1,324,1,324,1,
324,1,325,1,325,1,325,1,325,1,325,1,325,1,326,1,326,1,327,1,327,1,328,1,
328,1,329,1,329,1,330,1,330,1,330,1,330,1,330,1,330,1,330,3,330,3033,8,330,
1,331,1,331,1,331,5,331,3038,8,331,10,331,12,331,3041,9,331,1,332,1,332,
3,332,3045,8,332,1,332,1,332,1,333,1,333,1,333,5,333,3052,8,333,10,333,12,
333,3055,9,333,1,334,1,334,3,334,3059,8,334,1,334,1,334,1,335,1,335,1,336,
3,336,3066,8,336,1,336,1,336,1,336,1,337,1,337,1,337,1,337,1,337,1,337,1,
337,1,337,1,337,1,337,1,337,3,337,3082,8,337,1,337,3,337,3085,8,337,1,337,
1,337,1,337,1,337,1,337,3,337,3092,8,337,1,337,3,337,3095,8,337,1,337,1,
337,1,337,3,337,3100,8,337,1,337,3,337,3103,8,337,1,337,3,337,3106,8,337,
1,337,1,337,1,337,3,337,3111,8,337,1,337,1,337,3,337,3115,8,337,1,337,1,
337,1,337,1,337,5,337,3121,8,337,10,337,12,337,3124,9,337,1,337,1,337,3,
337,3128,8,337,1,337,1,337,1,337,1,337,1,337,1,337,1,337,1,337,1,337,3,337,
3139,8,337,1,337,3,337,3142,8,337,5,337,3144,8,337,10,337,12,337,3147,9,
337,1,338,1,338,1,339,1,339,1,339,1,339,1,339,1,339,1,339,3,339,3158,8,339,
1,340,1,340,3,340,3162,8,340,1,341,1,341,1,341,1,341,1,341,3,341,3169,8,
341,1,341,1,341,1,341,3,341,3174,8,341,1,341,3,341,3177,8,341,1,341,1,341,
1,341,1,341,1,341,3,341,3184,8,341,1,341,3,341,3187,8,341,1,341,1,341,1,
341,1,341,1,341,3,341,3194,8,341,1,341,3,341,3197,8,341,3,341,3199,8,341,
1,342,1,342,1,342,1,342,1,342,3,342,3206,8,342,1,342,1,342,1,342,3,342,3211,
8,342,1,342,3,342,3214,8,342,1,342,1,342,1,342,1,342,1,342,3,342,3221,8,
342,1,342,3,342,3224,8,342,1,342,1,342,1,342,1,342,1,342,3,342,3231,8,342,
1,342,3,342,3234,8,342,3,342,3236,8,342,1,343,1,343,1,344,1,344,1,345,1,
345,1,346,1,346,3,346,3246,8,346,1,347,1,347,3,347,3250,8,347,1,348,1,348,
3,348,3254,8,348,1,349,1,349,3,349,3258,8,349,1,349,1,349,3,349,3262,8,349,
1,349,1,349,3,349,3266,8,349,1,349,1,349,3,349,3270,8,349,1,349,1,349,3,
349,3274,8,349,1,349,1,349,3,349,3278,8,349,1,349,1,349,3,349,3282,8,349,
1,349,1,349,1,349,1,349,1,349,3,349,3289,8,349,1,349,3,349,3292,8,349,1,
349,1,349,3,349,3296,8,349,1,349,3,349,3299,8,349,1,349,3,349,3302,8,349,
1,350,1,350,3,350,3306,8,350,1,350,1,350,3,350,3310,8,350,1,350,1,350,3,
350,3314,8,350,1,350,1,350,3,350,3318,8,350,1,350,1,350,3,350,3322,8,350,
1,350,1,350,3,350,3326,8,350,1,350,1,350,3,350,3330,8,350,1,350,1,350,1,
350,1,350,1,350,3,350,3337,8,350,1,350,3,350,3340,8,350,1,350,1,350,3,350,
3344,8,350,1,350,1,350,3,350,3348,8,350,1,351,1,351,3,351,3352,8,351,1,351,
1,351,3,351,3356,8,351,1,351,1,351,3,351,3360,8,351,1,351,1,351,3,351,3364,
8,351,1,351,1,351,3,351,3368,8,351,1,351,1,351,3,351,3372,8,351,1,351,1,
351,1,351,3,351,3377,8,351,1,351,1,351,1,351,1,351,1,351,3,351,3384,8,351,
1,351,3,351,3387,8,351,1,351,1,351,1,351,3,351,3392,8,351,3,351,3394,8,351,
1,352,1,352,1,352,1,352,1,352,3,352,3401,8,352,1,352,1,352,3,352,3405,8,
352,3,352,3407,8,352,1,353,1,353,1,354,1,354,1,355,1,355,3,355,3415,8,355,
1,355,1,355,3,355,3419,8,355,1,355,1,355,3,355,3423,8,355,1,355,1,355,3,
355,3427,8,355,1,355,1,355,3,355,3431,8,355,1,355,1,355,1,355,1,355,1,355,
3,355,3438,8,355,1,355,1,355,3,355,3442,8,355,1,355,3,355,3445,8,355,1,355,
1,355,3,355,3449,8,355,1,355,1,355,3,355,3453,8,355,1,355,3,355,3456,8,355,
3,355,3458,8,355,1,356,1,356,3,356,3462,8,356,1,357,1,357,1,357,1,357,1,
357,3,357,3469,8,357,1,358,1,358,1,358,3,358,3474,8,358,1,358,1,358,1,358,
1,358,1,358,3,358,3481,8,358,3,358,3483,8,358,1,359,1,359,1,359,3,359,3488,
8,359,1,359,1,359,1,359,1,359,3,359,3494,8,359,1,359,3,359,3497,8,359,3,
359,3499,8,359,1,360,1,360,3,360,3503,8,360,1,361,1,361,1,361,3,361,3508,
8,361,1,361,1,361,1,361,1,361,1,361,3,361,3515,8,361,3,361,3517,8,361,1,
362,1,362,1,362,3,362,3522,8,362,1,362,1,362,1,362,1,362,1,362,3,362,3529,
8,362,3,362,3531,8,362,1,363,1,363,1,363,1,363,1,363,3,363,3538,8,363,1,
364,1,364,1,364,1,364,1,364,1,364,3,364,3546,8,364,1,365,1,365,1,365,1,365,
3,365,3552,8,365,1,366,1,366,3,366,3556,8,366,1,367,1,367,1,368,1,368,1,
368,3,368,3563,8,368,1,369,1,369,3,369,3567,8,369,1,370,3,370,3570,8,370,
1,370,1,370,1,370,3,370,3575,8,370,1,371,1,371,3,371,3579,8,371,1,371,1,
371,3,371,3583,8,371,1,372,1,372,3,372,3587,8,372,1,373,1,373,3,373,3591,
8,373,1,374,1,374,3,374,3595,8,374,1,375,3,375,3598,8,375,1,375,1,375,3,
375,3602,8,375,1,376,1,376,3,376,3606,8,376,1,377,1,377,3,377,3610,8,377,
1,378,3,378,3613,8,378,1,378,1,378,3,378,3617,8,378,1,379,1,379,3,379,3621,
8,379,1,380,3,380,3624,8,380,1,380,1,380,1,381,1,381,1,382,3,382,3631,8,
382,1,382,1,382,3,382,3635,8,382,1,382,3,382,3638,8,382,1,382,1,382,3,382,
3642,8,382,3,382,3644,8,382,1,383,1,383,3,383,3648,8,383,1,383,1,383,1,384,
1,384,1,384,5,384,3655,8,384,10,384,12,384,3658,9,384,1,385,1,385,1,385,
1,386,1,386,3,386,3665,8,386,1,386,1,386,1,387,1,387,1,388,1,388,1,388,1,
388,1,388,1,388,1,388,1,388,1,388,3,388,3680,8,388,1,389,1,389,1,389,1,390,
1,390,1,391,1,391,1,391,1,391,1,391,1,391,1,391,1,391,1,391,1,391,1,391,
1,391,1,391,1,391,1,391,1,391,1,391,1,391,3,391,3705,8,391,1,392,1,392,1,
392,1,393,1,393,3,393,3712,8,393,1,393,1,393,1,394,1,394,1,394,1,395,1,395,
3,395,3721,8,395,1,395,1,395,1,395,1,396,1,396,3,396,3728,8,396,1,396,3,
396,3731,8,396,1,396,1,396,1,397,1,397,1,397,1,398,1,398,3,398,3740,8,398,
1,398,1,398,1,399,1,399,1,399,1,400,1,400,1,400,1,401,1,401,3,401,3752,8,
401,1,401,1,401,3,401,3756,8,401,1,402,1,402,1,402,1,402,1,402,1,402,3,402,
3764,8,402,1,403,1,403,1,404,1,404,3,404,3770,8,404,1,404,1,404,1,404,1,
404,1,405,1,405,3,405,3778,8,405,1,405,1,405,1,405,1,405,1,406,1,406,1,407,
1,407,1,407,1,407,1,407,1,407,1,407,5,407,3793,8,407,10,407,12,407,3796,
9,407,1,407,1,407,1,408,1,408,1,408,1,408,1,408,1,408,1,408,5,408,3807,8,
408,10,408,12,408,3810,9,408,1,408,1,408,1,409,1,409,1,409,1,409,1,409,1,
409,1,409,1,410,1,410,1,410,1,410,1,410,1,410,1,410,3,410,3828,8,410,1,410,
1,410,1,410,3,410,3833,8,410,1,410,1,410,1,410,1,410,3,410,3839,8,410,1,
410,1,410,1,410,1,410,1,410,1,410,1,410,1,410,1,410,1,410,1,410,1,410,1,
410,1,410,1,410,1,410,1,410,1,410,3,410,3859,8,410,1,410,1,410,1,410,1,410,
1,410,5,410,3866,8,410,10,410,12,410,3869,9,410,1,411,1,411,1,411,1,411,
1,411,1,411,3,411,3877,8,411,1,412,1,412,1,413,1,413,1,413,1,413,1,413,3,
413,3886,8,413,1,414,1,414,1,414,1,414,1,414,1,414,1,414,1,415,1,415,1,415,
1,415,1,415,1,416,1,416,1,416,1,416,1,416,1,417,1,417,1,417,1,417,1,417,
3,417,3910,8,417,1,417,1,417,1,418,1,418,1,418,1,418,1,418,3,418,3919,8,
418,1,418,1,418,1,419,1,419,1,420,1,420,1,421,1,421,1,422,1,422,1,422,1,
422,1,422,1,422,1,422,1,422,1,422,1,422,1,422,3,422,3940,8,422,1,422,1,422,
1,422,5,422,3945,8,422,10,422,12,422,3948,9,422,1,423,1,423,1,423,1,423,
1,424,1,424,3,424,3956,8,424,1,425,1,425,1,425,1,425,1,425,1,425,1,425,1,
425,1,425,1,425,1,425,1,425,3,425,3970,8,425,1,426,1,426,3,426,3974,8,426,
1,427,1,427,3,427,3978,8,427,1,428,1,428,3,428,3982,8,428,1,429,1,429,1,
430,1,430,1,430,1,430,1,430,1,430,1,431,1,431,1,431,1,432,1,432,3,432,3997,
8,432,1,433,1,433,1,433,1,433,1,433,1,433,1,433,1,433,1,433,1,433,1,433,
1,433,4,433,4011,8,433,11,433,12,433,4012,1,433,1,433,3,433,4017,8,433,1,
434,1,434,3,434,4021,8,434,1,435,1,435,1,435,4,435,4026,8,435,11,435,12,
435,4027,1,435,3,435,4031,8,435,1,435,1,435,1,436,1,436,4,436,4037,8,436,
11,436,12,436,4038,1,436,3,436,4042,8,436,1,436,1,436,1,437,1,437,1,437,
1,437,1,437,1,438,1,438,1,438,1,438,1,438,1,439,1,439,1,439,1,440,1,440,
3,440,4061,8,440,1,441,1,441,1,441,5,441,4066,8,441,10,441,12,441,4069,9,
441,1,442,1,442,1,442,1,442,1,442,1,442,1,442,1,442,1,442,3,442,4080,8,442,
1,443,1,443,3,443,4084,8,443,1,444,1,444,1,445,1,445,1,445,1,445,1,445,1,
445,1,445,1,446,1,446,3,446,4097,8,446,1,447,1,447,1,448,1,448,1,448,1,448,
1,448,1,448,3,448,4107,8,448,1,449,1,449,1,449,3,449,4112,8,449,1,449,1,
449,1,449,1,450,1,450,1,450,1,450,1,450,1,450,1,450,1,451,1,451,1,452,1,
452,1,453,1,453,1,454,3,454,4131,8,454,1,454,1,454,1,455,1,455,1,456,1,456,
1,456,1,456,1,456,1,457,1,457,1,458,1,458,1,459,1,459,1,460,1,460,1,460,
1,460,1,460,1,461,1,461,5,461,4155,8,461,10,461,12,461,4158,9,461,1,462,
1,462,1,463,1,463,1,463,1,463,1,463,1,464,1,464,1,465,1,465,3,465,4171,8,
465,1,466,1,466,1,466,1,466,1,466,1,466,1,466,1,467,1,467,1,467,1,467,1,
467,1,468,1,468,1,469,3,469,4188,8,469,1,469,1,469,3,469,4192,8,469,1,469,
1,469,1,470,1,470,1,470,5,470,4199,8,470,10,470,12,470,4202,9,470,1,471,
1,471,1,472,3,472,4207,8,472,1,472,1,472,1,473,1,473,3,473,4213,8,473,1,
473,1,473,1,474,1,474,1,474,5,474,4220,8,474,10,474,12,474,4223,9,474,1,
475,1,475,1,475,1,475,1,476,1,476,1,477,1,477,1,477,1,477,1,477,3,477,4236,
8,477,1,477,1,477,1,477,1,477,1,477,1,477,5,477,4244,8,477,10,477,12,477,
4247,9,477,1,478,1,478,1,478,1,478,1,478,1,478,1,478,1,478,1,478,1,478,1,
478,1,478,1,478,3,478,4262,8,478,1,479,1,479,1,479,3,479,4267,8,479,1,480,
1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,3,480,4279,8,480,1,
481,1,481,1,482,1,482,1,482,1,482,1,482,1,483,1,483,1,483,1,483,1,483,1,
484,1,484,1,484,1,484,1,484,1,485,1,485,1,485,1,485,1,485,1,486,1,486,1,
486,1,486,1,486,1,486,1,486,1,487,1,487,1,488,1,488,1,489,1,489,1,489,1,
489,1,489,1,490,1,490,1,491,1,491,1,491,1,491,1,491,1,491,1,491,1,492,1,
492,1,493,1,493,1,494,1,494,1,494,1,494,1,494,1,495,1,495,1,495,1,495,1,
495,1,496,1,496,1,496,1,496,1,496,1,497,1,497,1,497,1,497,1,497,1,497,1,
497,1,498,1,498,1,499,1,499,1,500,1,500,1,500,1,500,1,500,1,501,1,501,1,
501,1,501,1,501,1,502,1,502,1,502,1,502,1,502,1,503,1,503,1,504,1,504,1,
505,3,505,4378,8,505,1,505,3,505,4381,8,505,1,505,3,505,4384,8,505,1,505,
1,505,1,506,1,506,1,507,1,507,1,508,1,508,1,509,1,509,1,510,1,510,1,511,
1,511,1,512,1,512,1,512,1,512,1,512,3,512,4405,8,512,1,513,1,513,1,513,1,
513,3,513,4411,8,513,1,513,3,513,4414,8,513,1,514,1,514,1,514,1,514,3,514,
4420,8,514,1,514,3,514,4423,8,514,1,515,1,515,1,515,3,515,4428,8,515,1,515,
3,515,4431,8,515,1,516,1,516,1,516,1,516,3,516,4437,8,516,1,516,3,516,4440,
8,516,1,517,1,517,1,517,1,517,3,517,4446,8,517,1,517,3,517,4449,8,517,1,
518,1,518,3,518,4453,8,518,1,519,1,519,3,519,4457,8,519,1,520,1,520,3,520,
4461,8,520,1,521,1,521,1,522,1,522,1,522,1,522,1,522,3,522,4470,8,522,1,
523,1,523,1,523,1,523,1,524,1,524,1,525,1,525,1,526,1,526,3,526,4482,8,526,
1,527,1,527,1,527,1,527,1,527,1,528,1,528,3,528,4491,8,528,1,529,1,529,1,
530,1,530,1,531,1,531,1,532,1,532,1,533,1,533,3,533,4503,8,533,1,534,1,534,
1,535,1,535,1,536,1,536,1,537,1,537,1,538,1,538,3,538,4515,8,538,1,539,1,
539,1,540,1,540,1,541,1,541,1,542,1,542,1,543,1,543,1,544,1,544,1,545,1,
545,1,546,1,546,1,547,1,547,1,548,1,548,3,548,4537,8,548,1,549,1,549,1,549,
1,549,1,549,1,549,1,549,1,549,3,549,4547,8,549,1,550,1,550,1,550,3,550,4552,
8,550,1,551,1,551,1,551,1,552,1,552,1,552,1,553,1,553,1,553,1,554,1,554,
1,555,1,555,1,556,1,556,1,556,3,556,4570,8,556,1,557,1,557,3,557,4574,8,
557,1,558,1,558,1,559,1,559,1,560,1,560,3,560,4582,8,560,1,561,1,561,1,561,
1,561,1,561,3,561,4589,8,561,1,562,1,562,1,563,1,563,1,564,1,564,1,565,1,
565,1,566,1,566,1,567,1,567,1,568,1,568,1,569,1,569,1,569,1,570,1,570,1,
571,1,571,1,572,1,572,1,573,1,573,1,574,1,574,1,574,0,8,184,428,466,468,
674,820,844,954,575,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,
38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,
86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,
126,128,130,132,134,136,138,140,142,144,146,148,150,152,154,156,158,160,
162,164,166,168,170,172,174,176,178,180,182,184,186,188,190,192,194,196,
198,200,202,204,206,208,210,212,214,216,218,220,222,224,226,228,230,232,
234,236,238,240,242,244,246,248,250,252,254,256,258,260,262,264,266,268,
270,272,274,276,278,280,282,284,286,288,290,292,294,296,298,300,302,304,
306,308,310,312,314,316,318,320,322,324,326,328,330,332,334,336,338,340,
342,344,346,348,350,352,354,356,358,360,362,364,366,368,370,372,374,376,
378,380,382,384,386,388,390,392,394,396,398,400,402,404,406,408,410,412,
414,416,418,420,422,424,426,428,430,432,434,436,438,440,442,444,446,448,
450,452,454,456,458,460,462,464,466,468,470,472,474,476,478,480,482,484,
486,488,490,492,494,496,498,500,502,504,506,508,510,512,514,516,518,520,
522,524,526,528,530,532,534,536,538,540,542,544,546,548,550,552,554,556,
558,560,562,564,566,568,570,572,574,576,578,580,582,584,586,588,590,592,
594,596,598,600,602,604,606,608,610,612,614,616,618,620,622,624,626,628,
630,632,634,636,638,640,642,644,646,648,650,652,654,656,658,660,662,664,
666,668,670,672,674,676,678,680,682,684,686,688,690,692,694,696,698,700,
702,704,706,708,710,712,714,716,718,720,722,724,726,728,730,732,734,736,
738,740,742,744,746,748,750,752,754,756,758,760,762,764,766,768,770,772,
774,776,778,780,782,784,786,788,790,792,794,796,798,800,802,804,806,808,
810,812,814,816,818,820,822,824,826,828,830,832,834,836,838,840,842,844,
846,848,850,852,854,856,858,860,862,864,866,868,870,872,874,876,878,880,
882,884,886,888,890,892,894,896,898,900,902,904,906,908,910,912,914,916,
918,920,922,924,926,928,930,932,934,936,938,940,942,944,946,948,950,952,
954,956,958,960,962,964,966,968,970,972,974,976,978,980,982,984,986,988,
990,992,994,996,998,1000,1002,1004,1006,1008,1010,1012,1014,1016,1018,1020,
1022,1024,1026,1028,1030,1032,1034,1036,1038,1040,1042,1044,1046,1048,1050,
1052,1054,1056,1058,1060,1062,1064,1066,1068,1070,1072,1074,1076,1078,1080,
1082,1084,1086,1088,1090,1092,1094,1096,1098,1100,1102,1104,1106,1108,1110,
1112,1114,1116,1118,1120,1122,1124,1126,1128,1130,1132,1134,1136,1138,1140,
1142,1144,1146,1148,0,45,2,0,53,53,165,165,1,0,65,66,2,0,79,79,150,150,2,
0,159,159,304,304,4,0,277,277,311,311,316,316,321,321,2,0,166,166,168,168,
2,0,102,102,290,290,2,0,127,127,360,360,6,0,336,337,340,340,347,347,356,
356,373,373,384,384,2,0,28,29,77,78,2,0,159,159,195,195,3,0,67,67,106,106,
375,375,1,0,104,105,2,0,283,283,319,319,2,0,315,315,347,347,2,0,315,315,
384,384,2,0,211,211,332,332,1,0,37,38,1,0,73,74,2,0,26,26,133,133,6,0,335,
335,343,343,346,346,365,365,367,367,372,372,2,0,373,373,376,376,2,0,359,
359,383,383,2,0,161,161,232,232,2,0,129,129,181,181,2,0,141,141,222,222,
3,0,40,40,142,142,183,183,6,0,33,33,56,56,62,62,144,145,200,201,203,203,
2,0,22,22,80,80,1,0,169,170,1,0,51,52,2,0,42,42,157,157,8,0,21,21,30,30,
32,32,59,61,75,75,174,174,192,193,204,205,1,0,48,49,3,0,39,39,128,128,209,
209,1,0,296,299,1,0,4,5,2,0,71,71,208,208,1,0,3,4,3,0,9,10,13,13,15,15,1,
0,16,19,2,0,301,301,320,320,2,0,285,285,308,308,2,0,284,284,307,307,1,0,
277,324,4744,0,1159,1,0,0,0,2,1163,1,0,0,0,4,1181,1,0,0,0,6,1195,1,0,0,0,
8,1199,1,0,0,0,10,1201,1,0,0,0,12,1209,1,0,0,0,14,1213,1,0,0,0,16,1218,1,
0,0,0,18,1222,1,0,0,0,20,1227,1,0,0,0,22,1230,1,0,0,0,24,1237,1,0,0,0,26,
1243,1,0,0,0,28,1250,1,0,0,0,30,1254,1,0,0,0,32,1274,1,0,0,0,34,1276,1,0,
0,0,36,1279,1,0,0,0,38,1281,1,0,0,0,40,1286,1,0,0,0,42,1294,1,0,0,0,44,1300,
1,0,0,0,46,1302,1,0,0,0,48,1304,1,0,0,0,50,1306,1,0,0,0,52,1310,1,0,0,0,
54,1312,1,0,0,0,56,1316,1,0,0,0,58,1321,1,0,0,0,60,1329,1,0,0,0,62,1336,
1,0,0,0,64,1338,1,0,0,0,66,1348,1,0,0,0,68,1350,1,0,0,0,70,1357,1,0,0,0,
72,1367,1,0,0,0,74,1371,1,0,0,0,76,1375,1,0,0,0,78,1385,1,0,0,0,80,1389,
1,0,0,0,82,1392,1,0,0,0,84,1400,1,0,0,0,86,1404,1,0,0,0,88,1411,1,0,0,0,
90,1413,1,0,0,0,92,1419,1,0,0,0,94,1421,1,0,0,0,96,1427,1,0,0,0,98,1430,
1,0,0,0,100,1436,1,0,0,0,102,1444,1,0,0,0,104,1446,1,0,0,0,106,1455,1,0,
0,0,108,1463,1,0,0,0,110,1490,1,0,0,0,112,1514,1,0,0,0,114,1516,1,0,0,0,
116,1519,1,0,0,0,118,1524,1,0,0,0,120,1535,1,0,0,0,122,1567,1,0,0,0,124,
1569,1,0,0,0,126,1573,1,0,0,0,128,1585,1,0,0,0,130,1589,1,0,0,0,132,1593,
1,0,0,0,134,1595,1,0,0,0,136,1600,1,0,0,0,138,1605,1,0,0,0,140,1607,1,0,
0,0,142,1612,1,0,0,0,144,1618,1,0,0,0,146,1622,1,0,0,0,148,1628,1,0,0,0,
150,1630,1,0,0,0,152,1633,1,0,0,0,154,1636,1,0,0,0,156,1647,1,0,0,0,158,
1649,1,0,0,0,160,1655,1,0,0,0,162,1663,1,0,0,0,164,1667,1,0,0,0,166,1670,
1,0,0,0,168,1680,1,0,0,0,170,1682,1,0,0,0,172,1686,1,0,0,0,174,1691,1,0,
0,0,176,1696,1,0,0,0,178,1704,1,0,0,0,180,1706,1,0,0,0,182,1708,1,0,0,0,
184,1710,1,0,0,0,186,1724,1,0,0,0,188,1738,1,0,0,0,190,1740,1,0,0,0,192,
1744,1,0,0,0,194,1756,1,0,0,0,196,1758,1,0,0,0,198,1761,1,0,0,0,200,1765,
1,0,0,0,202,1768,1,0,0,0,204,1776,1,0,0,0,206,1779,1,0,0,0,208,1785,1,0,
0,0,210,1792,1,0,0,0,212,1796,1,0,0,0,214,1798,1,0,0,0,216,1801,1,0,0,0,
218,1813,1,0,0,0,220,1816,1,0,0,0,222,1820,1,0,0,0,224,1822,1,0,0,0,226,
1827,1,0,0,0,228,1830,1,0,0,0,230,1843,1,0,0,0,232,1845,1,0,0,0,234,1850,
1,0,0,0,236,1853,1,0,0,0,238,1856,1,0,0,0,240,1858,1,0,0,0,242,1874,1,0,
0,0,244,1881,1,0,0,0,246,1883,1,0,0,0,248,1898,1,0,0,0,250,1900,1,0,0,0,
252,1908,1,0,0,0,254,1912,1,0,0,0,256,1915,1,0,0,0,258,1944,1,0,0,0,260,
1952,1,0,0,0,262,1956,1,0,0,0,264,1959,1,0,0,0,266,1962,1,0,0,0,268,1967,
1,0,0,0,270,1975,1,0,0,0,272,1982,1,0,0,0,274,1985,1,0,0,0,276,1992,1,0,
0,0,278,1995,1,0,0,0,280,1999,1,0,0,0,282,2005,1,0,0,0,284,2013,1,0,0,0,
286,2022,1,0,0,0,288,2030,1,0,0,0,290,2032,1,0,0,0,292,2035,1,0,0,0,294,
2038,1,0,0,0,296,2042,1,0,0,0,298,2055,1,0,0,0,300,2057,1,0,0,0,302,2060,
1,0,0,0,304,2071,1,0,0,0,306,2073,1,0,0,0,308,2076,1,0,0,0,310,2084,1,0,
0,0,312,2091,1,0,0,0,314,2093,1,0,0,0,316,2102,1,0,0,0,318,2109,1,0,0,0,
320,2112,1,0,0,0,322,2115,1,0,0,0,324,2118,1,0,0,0,326,2120,1,0,0,0,328,
2128,1,0,0,0,330,2137,1,0,0,0,332,2146,1,0,0,0,334,2148,1,0,0,0,336,2154,
1,0,0,0,338,2160,1,0,0,0,340,2174,1,0,0,0,342,2187,1,0,0,0,344,2191,1,0,
0,0,346,2193,1,0,0,0,348,2197,1,0,0,0,350,2202,1,0,0,0,352,2204,1,0,0,0,
354,2211,1,0,0,0,356,2213,1,0,0,0,358,2223,1,0,0,0,360,2229,1,0,0,0,362,
2231,1,0,0,0,364,2239,1,0,0,0,366,2247,1,0,0,0,368,2255,1,0,0,0,370,2267,
1,0,0,0,372,2284,1,0,0,0,374,2287,1,0,0,0,376,2298,1,0,0,0,378,2303,1,0,
0,0,380,2307,1,0,0,0,382,2309,1,0,0,0,384,2314,1,0,0,0,386,2323,1,0,0,0,
388,2327,1,0,0,0,390,2330,1,0,0,0,392,2334,1,0,0,0,394,2336,1,0,0,0,396,
2339,1,0,0,0,398,2343,1,0,0,0,400,2351,1,0,0,0,402,2357,1,0,0,0,404,2366,
1,0,0,0,406,2368,1,0,0,0,408,2372,1,0,0,0,410,2376,1,0,0,0,412,2380,1,0,
0,0,414,2384,1,0,0,0,416,2388,1,0,0,0,418,2392,1,0,0,0,420,2396,1,0,0,0,
422,2398,1,0,0,0,424,2411,1,0,0,0,426,2414,1,0,0,0,428,2426,1,0,0,0,430,
2439,1,0,0,0,432,2441,1,0,0,0,434,2447,1,0,0,0,436,2449,1,0,0,0,438,2453,
1,0,0,0,440,2463,1,0,0,0,442,2465,1,0,0,0,444,2474,1,0,0,0,446,2476,1,0,
0,0,448,2480,1,0,0,0,450,2484,1,0,0,0,452,2488,1,0,0,0,454,2492,1,0,0,0,
456,2496,1,0,0,0,458,2500,1,0,0,0,460,2507,1,0,0,0,462,2509,1,0,0,0,464,
2519,1,0,0,0,466,2529,1,0,0,0,468,2539,1,0,0,0,470,2553,1,0,0,0,472,2555,
1,0,0,0,474,2558,1,0,0,0,476,2563,1,0,0,0,478,2572,1,0,0,0,480,2574,1,0,
0,0,482,2577,1,0,0,0,484,2580,1,0,0,0,486,2583,1,0,0,0,488,2586,1,0,0,0,
490,2590,1,0,0,0,492,2594,1,0,0,0,494,2599,1,0,0,0,496,2601,1,0,0,0,498,
2609,1,0,0,0,500,2611,1,0,0,0,502,2614,1,0,0,0,504,2617,1,0,0,0,506,2625,
1,0,0,0,508,2629,1,0,0,0,510,2631,1,0,0,0,512,2634,1,0,0,0,514,2647,1,0,
0,0,516,2649,1,0,0,0,518,2651,1,0,0,0,520,2654,1,0,0,0,522,2658,1,0,0,0,
524,2666,1,0,0,0,526,2673,1,0,0,0,528,2675,1,0,0,0,530,2681,1,0,0,0,532,
2683,1,0,0,0,534,2686,1,0,0,0,536,2689,1,0,0,0,538,2694,1,0,0,0,540,2700,
1,0,0,0,542,2702,1,0,0,0,544,2709,1,0,0,0,546,2711,1,0,0,0,548,2713,1,0,
0,0,550,2717,1,0,0,0,552,2732,1,0,0,0,554,2742,1,0,0,0,556,2745,1,0,0,0,
558,2749,1,0,0,0,560,2753,1,0,0,0,562,2756,1,0,0,0,564,2765,1,0,0,0,566,
2769,1,0,0,0,568,2772,1,0,0,0,570,2795,1,0,0,0,572,2797,1,0,0,0,574,2799,
1,0,0,0,576,2803,1,0,0,0,578,2805,1,0,0,0,580,2815,1,0,0,0,582,2819,1,0,
0,0,584,2827,1,0,0,0,586,2838,1,0,0,0,588,2852,1,0,0,0,590,2859,1,0,0,0,
592,2861,1,0,0,0,594,2868,1,0,0,0,596,2871,1,0,0,0,598,2875,1,0,0,0,600,
2877,1,0,0,0,602,2881,1,0,0,0,604,2892,1,0,0,0,606,2898,1,0,0,0,608,2911,
1,0,0,0,610,2918,1,0,0,0,612,2925,1,0,0,0,614,2928,1,0,0,0,616,2932,1,0,
0,0,618,2934,1,0,0,0,620,2938,1,0,0,0,622,2940,1,0,0,0,624,2944,1,0,0,0,
626,2948,1,0,0,0,628,2952,1,0,0,0,630,2956,1,0,0,0,632,2960,1,0,0,0,634,
2973,1,0,0,0,636,2984,1,0,0,0,638,2986,1,0,0,0,640,2988,1,0,0,0,642,2993,
1,0,0,0,644,2997,1,0,0,0,646,2999,1,0,0,0,648,3005,1,0,0,0,650,3011,1,0,
0,0,652,3017,1,0,0,0,654,3019,1,0,0,0,656,3021,1,0,0,0,658,3023,1,0,0,0,
660,3032,1,0,0,0,662,3034,1,0,0,0,664,3042,1,0,0,0,666,3048,1,0,0,0,668,
3056,1,0,0,0,670,3062,1,0,0,0,672,3065,1,0,0,0,674,3127,1,0,0,0,676,3148,
1,0,0,0,678,3157,1,0,0,0,680,3159,1,0,0,0,682,3198,1,0,0,0,684,3235,1,0,
0,0,686,3237,1,0,0,0,688,3239,1,0,0,0,690,3241,1,0,0,0,692,3245,1,0,0,0,
694,3249,1,0,0,0,696,3253,1,0,0,0,698,3301,1,0,0,0,700,3347,1,0,0,0,702,
3393,1,0,0,0,704,3395,1,0,0,0,706,3408,1,0,0,0,708,3410,1,0,0,0,710,3457,
1,0,0,0,712,3461,1,0,0,0,714,3468,1,0,0,0,716,3482,1,0,0,0,718,3498,1,0,
0,0,720,3500,1,0,0,0,722,3516,1,0,0,0,724,3530,1,0,0,0,726,3532,1,0,0,0,
728,3545,1,0,0,0,730,3551,1,0,0,0,732,3555,1,0,0,0,734,3557,1,0,0,0,736,
3562,1,0,0,0,738,3566,1,0,0,0,740,3569,1,0,0,0,742,3576,1,0,0,0,744,3584,
1,0,0,0,746,3590,1,0,0,0,748,3592,1,0,0,0,750,3597,1,0,0,0,752,3605,1,0,
0,0,754,3607,1,0,0,0,756,3612,1,0,0,0,758,3618,1,0,0,0,760,3623,1,0,0,0,
762,3627,1,0,0,0,764,3643,1,0,0,0,766,3645,1,0,0,0,768,3651,1,0,0,0,770,
3659,1,0,0,0,772,3662,1,0,0,0,774,3668,1,0,0,0,776,3679,1,0,0,0,778,3681,
1,0,0,0,780,3684,1,0,0,0,782,3686,1,0,0,0,784,3706,1,0,0,0,786,3709,1,0,
0,0,788,3715,1,0,0,0,790,3718,1,0,0,0,792,3725,1,0,0,0,794,3734,1,0,0,0,
796,3737,1,0,0,0,798,3743,1,0,0,0,800,3746,1,0,0,0,802,3755,1,0,0,0,804,
3763,1,0,0,0,806,3765,1,0,0,0,808,3767,1,0,0,0,810,3775,1,0,0,0,812,3783,
1,0,0,0,814,3785,1,0,0,0,816,3799,1,0,0,0,818,3813,1,0,0,0,820,3838,1,0,
0,0,822,3876,1,0,0,0,824,3878,1,0,0,0,826,3885,1,0,0,0,828,3887,1,0,0,0,
830,3894,1,0,0,0,832,3899,1,0,0,0,834,3904,1,0,0,0,836,3913,1,0,0,0,838,
3922,1,0,0,0,840,3924,1,0,0,0,842,3926,1,0,0,0,844,3939,1,0,0,0,846,3949,
1,0,0,0,848,3955,1,0,0,0,850,3969,1,0,0,0,852,3973,1,0,0,0,854,3977,1,0,
0,0,856,3981,1,0,0,0,858,3983,1,0,0,0,860,3985,1,0,0,0,862,3991,1,0,0,0,
864,3996,1,0,0,0,866,4016,1,0,0,0,868,4020,1,0,0,0,870,4022,1,0,0,0,872,
4034,1,0,0,0,874,4045,1,0,0,0,876,4050,1,0,0,0,878,4055,1,0,0,0,880,4060,
1,0,0,0,882,4062,1,0,0,0,884,4079,1,0,0,0,886,4083,1,0,0,0,888,4085,1,0,
0,0,890,4087,1,0,0,0,892,4096,1,0,0,0,894,4098,1,0,0,0,896,4106,1,0,0,0,
898,4108,1,0,0,0,900,4116,1,0,0,0,902,4123,1,0,0,0,904,4125,1,0,0,0,906,
4127,1,0,0,0,908,4130,1,0,0,0,910,4134,1,0,0,0,912,4136,1,0,0,0,914,4141,
1,0,0,0,916,4143,1,0,0,0,918,4145,1,0,0,0,920,4147,1,0,0,0,922,4152,1,0,
0,0,924,4159,1,0,0,0,926,4161,1,0,0,0,928,4166,1,0,0,0,930,4170,1,0,0,0,
932,4172,1,0,0,0,934,4179,1,0,0,0,936,4184,1,0,0,0,938,4187,1,0,0,0,940,
4195,1,0,0,0,942,4203,1,0,0,0,944,4206,1,0,0,0,946,4210,1,0,0,0,948,4216,
1,0,0,0,950,4224,1,0,0,0,952,4228,1,0,0,0,954,4235,1,0,0,0,956,4261,1,0,
0,0,958,4266,1,0,0,0,960,4278,1,0,0,0,962,4280,1,0,0,0,964,4282,1,0,0,0,
966,4287,1,0,0,0,968,4292,1,0,0,0,970,4297,1,0,0,0,972,4302,1,0,0,0,974,
4309,1,0,0,0,976,4311,1,0,0,0,978,4313,1,0,0,0,980,4318,1,0,0,0,982,4320,
1,0,0,0,984,4327,1,0,0,0,986,4329,1,0,0,0,988,4331,1,0,0,0,990,4336,1,0,
0,0,992,4341,1,0,0,0,994,4346,1,0,0,0,996,4353,1,0,0,0,998,4355,1,0,0,0,
1000,4357,1,0,0,0,1002,4362,1,0,0,0,1004,4367,1,0,0,0,1006,4372,1,0,0,0,
1008,4374,1,0,0,0,1010,4383,1,0,0,0,1012,4387,1,0,0,0,1014,4389,1,0,0,0,
1016,4391,1,0,0,0,1018,4393,1,0,0,0,1020,4395,1,0,0,0,1022,4397,1,0,0,0,
1024,4404,1,0,0,0,1026,4413,1,0,0,0,1028,4422,1,0,0,0,1030,4424,1,0,0,0,
1032,4439,1,0,0,0,1034,4448,1,0,0,0,1036,4452,1,0,0,0,1038,4456,1,0,0,0,
1040,4460,1,0,0,0,1042,4462,1,0,0,0,1044,4464,1,0,0,0,1046,4471,1,0,0,0,
1048,4475,1,0,0,0,1050,4477,1,0,0,0,1052,4481,1,0,0,0,1054,4483,1,0,0,0,
1056,4490,1,0,0,0,1058,4492,1,0,0,0,1060,4494,1,0,0,0,1062,4496,1,0,0,0,
1064,4498,1,0,0,0,1066,4502,1,0,0,0,1068,4504,1,0,0,0,1070,4506,1,0,0,0,
1072,4508,1,0,0,0,1074,4510,1,0,0,0,1076,4514,1,0,0,0,1078,4516,1,0,0,0,
1080,4518,1,0,0,0,1082,4520,1,0,0,0,1084,4522,1,0,0,0,1086,4524,1,0,0,0,
1088,4526,1,0,0,0,1090,4528,1,0,0,0,1092,4530,1,0,0,0,1094,4532,1,0,0,0,
1096,4536,1,0,0,0,1098,4546,1,0,0,0,1100,4551,1,0,0,0,1102,4553,1,0,0,0,
1104,4556,1,0,0,0,1106,4559,1,0,0,0,1108,4562,1,0,0,0,1110,4564,1,0,0,0,
1112,4569,1,0,0,0,1114,4573,1,0,0,0,1116,4575,1,0,0,0,1118,4577,1,0,0,0,
1120,4581,1,0,0,0,1122,4588,1,0,0,0,1124,4590,1,0,0,0,1126,4592,1,0,0,0,
1128,4594,1,0,0,0,1130,4596,1,0,0,0,1132,4598,1,0,0,0,1134,4600,1,0,0,0,
1136,4602,1,0,0,0,1138,4604,1,0,0,0,1140,4607,1,0,0,0,1142,4609,1,0,0,0,
1144,4611,1,0,0,0,1146,4613,1,0,0,0,1148,4615,1,0,0,0,1150,1152,3,2,1,0,
1151,1153,3,34,17,0,1152,1151,1,0,0,0,1152,1153,1,0,0,0,1153,1154,1,0,0,
0,1154,1155,5,0,0,1,1155,1160,1,0,0,0,1156,1157,3,34,17,0,1157,1158,5,0,
0,1,1158,1160,1,0,0,0,1159,1150,1,0,0,0,1159,1156,1,0,0,0,1160,1,1,0,0,0,
1161,1164,3,4,2,0,1162,1164,3,6,3,0,1163,1161,1,0,0,0,1163,1162,1,0,0,0,
1164,3,1,0,0,0,1165,1167,3,30,15,0,1166,1165,1,0,0,0,1167,1168,1,0,0,0,1168,
1166,1,0,0,0,1168,1169,1,0,0,0,1169,1182,1,0,0,0,1170,1172,3,10,5,0,1171,
1170,1,0,0,0,1172,1173,1,0,0,0,1173,1171,1,0,0,0,1173,1174,1,0,0,0,1174,
1178,1,0,0,0,1175,1177,3,30,15,0,1176,1175,1,0,0,0,1177,1180,1,0,0,0,1178,
1176,1,0,0,0,1178,1179,1,0,0,0,1179,1182,1,0,0,0,1180,1178,1,0,0,0,1181,
1166,1,0,0,0,1181,1171,1,0,0,0,1182,5,1,0,0,0,1183,1188,3,38,19,0,1184,1186,
3,52,26,0,1185,1187,3,8,4,0,1186,1185,1,0,0,0,1186,1187,1,0,0,0,1187,1189,
1,0,0,0,1188,1184,1,0,0,0,1188,1189,1,0,0,0,1189,1196,1,0,0,0,1190,1192,
3,52,26,0,1191,1193,3,8,4,0,1192,1191,1,0,0,0,1192,1193,1,0,0,0,1193,1196,
1,0,0,0,1194,1196,3,8,4,0,1195,1183,1,0,0,0,1195,1190,1,0,0,0,1195,1194,
1,0,0,0,1196,7,1,0,0,0,1197,1200,3,46,23,0,1198,1200,3,48,24,0,1199,1197,
1,0,0,0,1199,1198,1,0,0,0,1200,9,1,0,0,0,1201,1202,5,188,0,0,1202,1207,5,
190,0,0,1203,1208,3,12,6,0,1204,1208,3,14,7,0,1205,1208,3,16,8,0,1206,1208,
3,20,10,0,1207,1203,1,0,0,0,1207,1204,1,0,0,0,1207,1205,1,0,0,0,1207,1206,
1,0,0,0,1208,11,1,0,0,0,1209,1210,5,185,0,0,1210,1211,3,538,269,0,1211,13,
1,0,0,0,1212,1214,5,305,0,0,1213,1212,1,0,0,0,1213,1214,1,0,0,0,1214,1215,
1,0,0,0,1215,1216,5,289,0,0,1216,1217,3,88,44,0,1217,15,1,0,0,0,1218,1219,
5,207,0,0,1219,1220,5,324,0,0,1220,1221,3,18,9,0,1221,17,1,0,0,0,1222,1223,
3,1116,558,0,1223,19,1,0,0,0,1224,1228,3,22,11,0,1225,1228,3,24,12,0,1226,
1228,3,26,13,0,1227,1224,1,0,0,0,1227,1225,1,0,0,0,1227,1226,1,0,0,0,1228,
21,1,0,0,0,1229,1231,5,305,0,0,1230,1229,1,0,0,0,1230,1231,1,0,0,0,1231,
1232,1,0,0,0,1232,1233,5,289,0,0,1233,1234,3,28,14,0,1234,1235,3,72,36,0,
1235,23,1,0,0,0,1236,1238,5,278,0,0,1237,1236,1,0,0,0,1237,1238,1,0,0,0,
1238,1239,1,0,0,0,1239,1240,5,313,0,0,1240,1241,3,28,14,0,1241,1242,3,78,
39,0,1242,25,1,0,0,0,1243,1244,5,225,0,0,1244,1245,3,28,14,0,1245,1246,3,
84,42,0,1246,27,1,0,0,0,1247,1248,5,108,0,0,1248,1249,5,152,0,0,1249,1251,
5,89,0,0,1250,1247,1,0,0,0,1250,1251,1,0,0,0,1251,1252,1,0,0,0,1252,1253,
3,36,18,0,1253,29,1,0,0,0,1254,1255,5,188,0,0,1255,1257,5,179,0,0,1256,1258,
3,32,16,0,1257,1256,1,0,0,0,1257,1258,1,0,0,0,1258,31,1,0,0,0,1259,1261,
5,22,0,0,1260,1259,1,0,0,0,1260,1261,1,0,0,0,1261,1262,1,0,0,0,1262,1275,
7,0,0,0,1263,1275,5,185,0,0,1264,1266,5,305,0,0,1265,1264,1,0,0,0,1265,1266,
1,0,0,0,1266,1267,1,0,0,0,1267,1275,5,289,0,0,1268,1269,5,207,0,0,1269,1275,
5,324,0,0,1270,1272,5,164,0,0,1271,1270,1,0,0,0,1271,1272,1,0,0,0,1272,1273,
1,0,0,0,1273,1275,3,36,18,0,1274,1260,1,0,0,0,1274,1263,1,0,0,0,1274,1265,
1,0,0,0,1274,1268,1,0,0,0,1274,1271,1,0,0,0,1275,33,1,0,0,0,1276,1277,5,
188,0,0,1277,1278,5,54,0,0,1278,35,1,0,0,0,1279,1280,5,327,0,0,1280,37,1,
0,0,0,1281,1282,5,199,0,0,1282,1284,5,317,0,0,1283,1285,3,40,20,0,1284,1283,
1,0,0,0,1284,1285,1,0,0,0,1285,39,1,0,0,0,1286,1291,3,42,21,0,1287,1288,
5,361,0,0,1288,1290,3,42,21,0,1289,1287,1,0,0,0,1290,1293,1,0,0,0,1291,1289,
1,0,0,0,1291,1292,1,0,0,0,1292,41,1,0,0,0,1293,1291,1,0,0,0,1294,1295,3,
44,22,0,1295,43,1,0,0,0,1296,1297,5,306,0,0,1297,1301,5,303,0,0,1298,1299,
5,306,0,0,1299,1301,5,323,0,0,1300,1296,1,0,0,0,1300,1298,1,0,0,0,1301,45,
1,0,0,0,1302,1303,5,182,0,0,1303,47,1,0,0,0,1304,1305,5,57,0,0,1305,49,1,
0,0,0,1306,1307,5,369,0,0,1307,1308,3,52,26,0,1308,1309,5,380,0,0,1309,51,
1,0,0,0,1310,1311,3,58,29,0,1311,53,1,0,0,0,1312,1313,5,369,0,0,1313,1314,
3,58,29,0,1314,1315,5,380,0,0,1315,55,1,0,0,0,1316,1317,5,369,0,0,1317,1318,
3,58,29,0,1318,1319,5,380,0,0,1319,57,1,0,0,0,1320,1322,3,290,145,0,1321,
1320,1,0,0,0,1321,1322,1,0,0,0,1322,1324,1,0,0,0,1323,1325,3,60,30,0,1324,
1323,1,0,0,0,1324,1325,1,0,0,0,1325,1326,1,0,0,0,1326,1327,3,64,32,0,1327,
59,1,0,0,0,1328,1330,3,62,31,0,1329,1328,1,0,0,0,1330,1331,1,0,0,0,1331,
1329,1,0,0,0,1331,1332,1,0,0,0,1332,61,1,0,0,0,1333,1337,3,70,35,0,1334,
1337,3,76,38,0,1335,1337,3,82,41,0,1336,1333,1,0,0,0,1336,1334,1,0,0,0,1336,
1335,1,0,0,0,1337,63,1,0,0,0,1338,1342,3,66,33,0,1339,1341,3,68,34,0,1340,
1339,1,0,0,0,1341,1344,1,0,0,0,1342,1340,1,0,0,0,1342,1343,1,0,0,0,1343,
65,1,0,0,0,1344,1342,1,0,0,0,1345,1349,3,98,49,0,1346,1349,3,130,65,0,1347,
1349,3,182,91,0,1348,1345,1,0,0,0,1348,1346,1,0,0,0,1348,1347,1,0,0,0,1349,
67,1,0,0,0,1350,1352,5,149,0,0,1351,1353,3,502,251,0,1352,1351,1,0,0,0,1352,
1353,1,0,0,0,1353,1354,1,0,0,0,1354,1355,3,66,33,0,1355,69,1,0,0,0,1356,
1358,5,305,0,0,1357,1356,1,0,0,0,1357,1358,1,0,0,0,1358,1359,1,0,0,0,1359,
1360,5,289,0,0,1360,1361,3,1094,547,0,1361,1362,3,72,36,0,1362,71,1,0,0,
0,1363,1365,3,676,338,0,1364,1363,1,0,0,0,1364,1365,1,0,0,0,1365,1366,1,
0,0,0,1366,1368,3,738,369,0,1367,1364,1,0,0,0,1367,1368,1,0,0,0,1368,1369,
1,0,0,0,1369,1370,3,74,37,0,1370,73,1,0,0,0,1371,1372,5,365,0,0,1372,1373,
3,88,44,0,1373,75,1,0,0,0,1374,1376,5,278,0,0,1375,1374,1,0,0,0,1375,1376,
1,0,0,0,1376,1377,1,0,0,0,1377,1378,5,313,0,0,1378,1379,3,1094,547,0,1379,
1380,3,78,39,0,1380,77,1,0,0,0,1381,1383,3,676,338,0,1382,1381,1,0,0,0,1382,
1383,1,0,0,0,1383,1384,1,0,0,0,1384,1386,3,744,372,0,1385,1382,1,0,0,0,1385,
1386,1,0,0,0,1386,1387,1,0,0,0,1387,1388,3,80,40,0,1388,79,1,0,0,0,1389,
1390,5,365,0,0,1390,1391,3,92,46,0,1391,81,1,0,0,0,1392,1393,5,225,0,0,1393,
1394,3,1094,547,0,1394,1395,3,84,42,0,1395,83,1,0,0,0,1396,1398,3,676,338,
0,1397,1396,1,0,0,0,1397,1398,1,0,0,0,1398,1399,1,0,0,0,1399,1401,3,674,
337,0,1400,1397,1,0,0,0,1400,1401,1,0,0,0,1401,1402,1,0,0,0,1402,1403,3,
86,43,0,1403,85,1,0,0,0,1404,1405,5,365,0,0,1405,1406,3,820,410,0,1406,87,
1,0,0,0,1407,1412,3,96,48,0,1408,1412,3,554,277,0,1409,1412,3,1060,530,0,
1410,1412,3,90,45,0,1411,1407,1,0,0,0,1411,1408,1,0,0,0,1411,1409,1,0,0,
0,1411,1410,1,0,0,0,1412,89,1,0,0,0,1413,1414,7,1,0,0,1414,91,1,0,0,0,1415,
1420,3,94,47,0,1416,1420,3,96,48,0,1417,1420,3,564,282,0,1418,1420,3,1060,
530,0,1419,1415,1,0,0,0,1419,1416,1,0,0,0,1419,1417,1,0,0,0,1419,1418,1,
0,0,0,1420,93,1,0,0,0,1421,1422,3,56,28,0,1422,95,1,0,0,0,1423,1424,5,228,
0,0,1424,1428,3,844,422,0,1425,1428,3,846,423,0,1426,1428,3,850,425,0,1427,
1423,1,0,0,0,1427,1425,1,0,0,0,1427,1426,1,0,0,0,1428,97,1,0,0,0,1429,1431,
3,100,50,0,1430,1429,1,0,0,0,1431,1432,1,0,0,0,1432,1430,1,0,0,0,1432,1433,
1,0,0,0,1433,99,1,0,0,0,1434,1437,3,102,51,0,1435,1437,3,128,64,0,1436,1434,
1,0,0,0,1436,1435,1,0,0,0,1437,101,1,0,0,0,1438,1445,3,104,52,0,1439,1445,
3,106,53,0,1440,1445,3,108,54,0,1441,1445,3,118,59,0,1442,1445,3,120,60,
0,1443,1445,3,126,63,0,1444,1438,1,0,0,0,1444,1439,1,0,0,0,1444,1440,1,0,
0,0,1444,1441,1,0,0,0,1444,1442,1,0,0,0,1444,1443,1,0,0,0,1445,103,1,0,0,
0,1446,1447,5,63,0,0,1447,1451,5,185,0,0,1448,1449,5,108,0,0,1449,1450,5,
152,0,0,1450,1452,5,89,0,0,1451,1448,1,0,0,0,1451,1452,1,0,0,0,1452,1453,
1,0,0,0,1453,1454,3,542,271,0,1454,105,1,0,0,0,1455,1456,5,82,0,0,1456,1459,
5,185,0,0,1457,1458,5,108,0,0,1458,1460,5,89,0,0,1459,1457,1,0,0,0,1459,
1460,1,0,0,0,1460,1461,1,0,0,0,1461,1462,3,542,271,0,1462,107,1,0,0,0,1463,
1479,5,63,0,0,1464,1466,5,305,0,0,1465,1464,1,0,0,0,1465,1466,1,0,0,0,1466,
1467,1,0,0,0,1467,1471,5,289,0,0,1468,1469,5,108,0,0,1469,1470,5,152,0,0,
1470,1472,5,89,0,0,1471,1468,1,0,0,0,1471,1472,1,0,0,0,1472,1480,1,0,0,0,
1473,1474,5,161,0,0,1474,1476,5,178,0,0,1475,1477,5,305,0,0,1476,1475,1,
0,0,0,1476,1477,1,0,0,0,1477,1478,1,0,0,0,1478,1480,5,289,0,0,1479,1465,
1,0,0,0,1479,1473,1,0,0,0,1480,1481,1,0,0,0,1481,1484,3,556,278,0,1482,1485,
3,110,55,0,1483,1485,3,112,56,0,1484,1482,1,0,0,0,1484,1483,1,0,0,0,1485,
1487,1,0,0,0,1486,1488,3,116,58,0,1487,1486,1,0,0,0,1487,1488,1,0,0,0,1488,
109,1,0,0,0,1489,1491,3,676,338,0,1490,1489,1,0,0,0,1490,1491,1,0,0,0,1491,
1492,1,0,0,0,1492,1497,5,25,0,0,1493,1495,5,305,0,0,1494,1493,1,0,0,0,1494,
1495,1,0,0,0,1495,1496,1,0,0,0,1496,1498,5,289,0,0,1497,1494,1,0,0,0,1497,
1498,1,0,0,0,1498,111,1,0,0,0,1499,1515,3,114,57,0,1500,1502,3,676,338,0,
1501,1500,1,0,0,0,1501,1502,1,0,0,0,1502,1503,1,0,0,0,1503,1515,3,560,280,
0,1504,1506,3,676,338,0,1505,1504,1,0,0,0,1505,1506,1,0,0,0,1506,1511,1,
0,0,0,1507,1509,5,305,0,0,1508,1507,1,0,0,0,1508,1509,1,0,0,0,1509,1510,
1,0,0,0,1510,1512,5,289,0,0,1511,1508,1,0,0,0,1511,1512,1,0,0,0,1512,1513,
1,0,0,0,1513,1515,3,574,287,0,1514,1499,1,0,0,0,1514,1501,1,0,0,0,1514,1505,
1,0,0,0,1515,113,1,0,0,0,1516,1517,5,131,0,0,1517,1518,3,88,44,0,1518,115,
1,0,0,0,1519,1520,5,27,0,0,1520,1521,5,58,0,0,1521,1522,5,158,0,0,1522,1523,
3,88,44,0,1523,117,1,0,0,0,1524,1526,5,82,0,0,1525,1527,5,305,0,0,1526,1525,
1,0,0,0,1526,1527,1,0,0,0,1527,1528,1,0,0,0,1528,1531,5,289,0,0,1529,1530,
5,108,0,0,1530,1532,5,89,0,0,1531,1529,1,0,0,0,1531,1532,1,0,0,0,1532,1533,
1,0,0,0,1533,1534,3,556,278,0,1534,119,1,0,0,0,1535,1553,5,63,0,0,1536,1538,
5,305,0,0,1537,1536,1,0,0,0,1537,1538,1,0,0,0,1538,1539,1,0,0,0,1539,1540,
5,289,0,0,1540,1544,5,318,0,0,1541,1542,5,108,0,0,1542,1543,5,152,0,0,1543,
1545,5,89,0,0,1544,1541,1,0,0,0,1544,1545,1,0,0,0,1545,1554,1,0,0,0,1546,
1547,5,161,0,0,1547,1549,5,178,0,0,1548,1550,5,305,0,0,1549,1548,1,0,0,0,
1549,1550,1,0,0,0,1550,1551,1,0,0,0,1551,1552,5,289,0,0,1552,1554,5,318,
0,0,1553,1537,1,0,0,0,1553,1546,1,0,0,0,1554,1555,1,0,0,0,1555,1556,3,562,
281,0,1556,1557,3,122,61,0,1557,121,1,0,0,0,1558,1560,5,27,0,0,1559,1558,
1,0,0,0,1559,1560,1,0,0,0,1560,1561,1,0,0,0,1561,1568,3,124,62,0,1562,1568,
3,114,57,0,1563,1565,5,27,0,0,1564,1563,1,0,0,0,1564,1565,1,0,0,0,1565,1566,
1,0,0,0,1566,1568,3,574,287,0,1567,1559,1,0,0,0,1567,1562,1,0,0,0,1567,1564,
1,0,0,0,1568,123,1,0,0,0,1569,1570,5,58,0,0,1570,1571,5,158,0,0,1571,1572,
3,560,280,0,1572,125,1,0,0,0,1573,1575,5,82,0,0,1574,1576,5,305,0,0,1575,
1574,1,0,0,0,1575,1576,1,0,0,0,1576,1577,1,0,0,0,1577,1578,5,289,0,0,1578,
1581,5,318,0,0,1579,1580,5,108,0,0,1580,1582,5,89,0,0,1581,1579,1,0,0,0,
1581,1582,1,0,0,0,1582,1583,1,0,0,0,1583,1584,3,562,281,0,1584,127,1,0,0,
0,1585,1586,3,274,137,0,1586,129,1,0,0,0,1587,1590,3,132,66,0,1588,1590,
3,138,69,0,1589,1587,1,0,0,0,1589,1588,1,0,0,0,1590,131,1,0,0,0,1591,1594,
3,134,67,0,1592,1594,3,136,68,0,1593,1591,1,0,0,0,1593,1592,1,0,0,0,1594,
133,1,0,0,0,1595,1596,3,292,146,0,1596,1598,3,142,71,0,1597,1599,3,244,122,
0,1598,1597,1,0,0,0,1598,1599,1,0,0,0,1599,135,1,0,0,0,1600,1601,3,292,146,
0,1601,1602,3,54,27,0,1602,137,1,0,0,0,1603,1606,3,140,70,0,1604,1606,3,
54,27,0,1605,1603,1,0,0,0,1605,1604,1,0,0,0,1606,139,1,0,0,0,1607,1609,3,
142,71,0,1608,1610,3,244,122,0,1609,1608,1,0,0,0,1609,1610,1,0,0,0,1610,
141,1,0,0,0,1611,1613,3,144,72,0,1612,1611,1,0,0,0,1613,1614,1,0,0,0,1614,
1612,1,0,0,0,1614,1615,1,0,0,0,1615,143,1,0,0,0,1616,1619,3,208,104,0,1617,
1619,3,146,73,0,1618,1616,1,0,0,0,1618,1617,1,0,0,0,1619,145,1,0,0,0,1620,
1623,3,148,74,0,1621,1623,3,180,90,0,1622,1620,1,0,0,0,1622,1621,1,0,0,0,
1623,147,1,0,0,0,1624,1629,3,150,75,0,1625,1629,3,152,76,0,1626,1629,3,164,
82,0,1627,1629,3,174,87,0,1628,1624,1,0,0,0,1628,1625,1,0,0,0,1628,1626,
1,0,0,0,1628,1627,1,0,0,0,1629,149,1,0,0,0,1630,1631,5,110,0,0,1631,1632,
3,324,162,0,1632,151,1,0,0,0,1633,1634,5,190,0,0,1634,1635,3,154,77,0,1635,
153,1,0,0,0,1636,1641,3,156,78,0,1637,1638,5,361,0,0,1638,1640,3,156,78,
0,1639,1637,1,0,0,0,1640,1643,1,0,0,0,1641,1639,1,0,0,0,1641,1642,1,0,0,
0,1642,155,1,0,0,0,1643,1641,1,0,0,0,1644,1648,3,158,79,0,1645,1648,3,160,
80,0,1646,1648,3,162,81,0,1647,1644,1,0,0,0,1647,1645,1,0,0,0,1647,1646,
1,0,0,0,1648,157,1,0,0,0,1649,1650,3,914,457,0,1650,1651,5,375,0,0,1651,
1652,3,1084,542,0,1652,1653,5,365,0,0,1653,1654,3,820,410,0,1654,159,1,0,
0,0,1655,1656,3,914,457,0,1656,1657,5,365,0,0,1657,1659,5,369,0,0,1658,1660,
3,398,199,0,1659,1658,1,0,0,0,1659,1660,1,0,0,0,1660,1661,1,0,0,0,1661,1662,
5,380,0,0,1662,161,1,0,0,0,1663,1664,3,914,457,0,1664,1665,3,390,195,0,1665,
1666,3,1082,541,0,1666,163,1,0,0,0,1667,1668,5,177,0,0,1668,1669,3,166,83,
0,1669,165,1,0,0,0,1670,1675,3,168,84,0,1671,1672,5,361,0,0,1672,1674,3,
168,84,0,1673,1671,1,0,0,0,1674,1677,1,0,0,0,1675,1673,1,0,0,0,1675,1676,
1,0,0,0,1676,167,1,0,0,0,1677,1675,1,0,0,0,1678,1681,3,170,85,0,1679,1681,
3,172,86,0,1680,1678,1,0,0,0,1680,1679,1,0,0,0,1681,169,1,0,0,0,1682,1683,
3,914,457,0,1683,1684,5,375,0,0,1684,1685,3,1084,542,0,1685,171,1,0,0,0,
1686,1687,3,914,457,0,1687,1688,3,390,195,0,1688,1689,3,1082,541,0,1689,
173,1,0,0,0,1690,1692,7,2,0,0,1691,1690,1,0,0,0,1691,1692,1,0,0,0,1692,1693,
1,0,0,0,1693,1694,5,76,0,0,1694,1695,3,176,88,0,1695,175,1,0,0,0,1696,1701,
3,178,89,0,1697,1698,5,361,0,0,1698,1700,3,178,89,0,1699,1697,1,0,0,0,1700,
1703,1,0,0,0,1701,1699,1,0,0,0,1701,1702,1,0,0,0,1702,177,1,0,0,0,1703,1701,
1,0,0,0,1704,1705,3,820,410,0,1705,179,1,0,0,0,1706,1707,3,274,137,0,1707,
181,1,0,0,0,1708,1709,3,184,92,0,1709,183,1,0,0,0,1710,1711,6,92,-1,0,1711,
1712,3,190,95,0,1712,1719,1,0,0,0,1713,1714,10,2,0,0,1714,1715,3,186,93,
0,1715,1716,3,190,95,0,1716,1718,1,0,0,0,1717,1713,1,0,0,0,1718,1721,1,0,
0,0,1719,1717,1,0,0,0,1719,1720,1,0,0,0,1720,185,1,0,0,0,1721,1719,1,0,0,
0,1722,1725,3,188,94,0,1723,1725,5,163,0,0,1724,1722,1,0,0,0,1724,1723,1,
0,0,0,1725,187,1,0,0,0,1726,1728,5,220,0,0,1727,1729,3,904,452,0,1728,1727,
1,0,0,0,1728,1729,1,0,0,0,1729,1739,1,0,0,0,1730,1732,5,88,0,0,1731,1733,
3,904,452,0,1732,1731,1,0,0,0,1732,1733,1,0,0,0,1733,1739,1,0,0,0,1734,1736,
5,125,0,0,1735,1737,3,904,452,0,1736,1735,1,0,0,0,1736,1737,1,0,0,0,1737,
1739,1,0,0,0,1738,1726,1,0,0,0,1738,1730,1,0,0,0,1738,1734,1,0,0,0,1739,
189,1,0,0,0,1740,1741,3,192,96,0,1741,191,1,0,0,0,1742,1745,3,194,97,0,1743,
1745,3,204,102,0,1744,1742,1,0,0,0,1744,1743,1,0,0,0,1745,193,1,0,0,0,1746,
1748,3,196,98,0,1747,1746,1,0,0,0,1748,1751,1,0,0,0,1749,1747,1,0,0,0,1749,
1750,1,0,0,0,1750,1752,1,0,0,0,1751,1749,1,0,0,0,1752,1757,3,198,99,0,1753,
1757,3,200,100,0,1754,1757,3,202,101,0,1755,1757,3,256,128,0,1756,1749,1,
0,0,0,1756,1753,1,0,0,0,1756,1754,1,0,0,0,1756,1755,1,0,0,0,1757,195,1,0,
0,0,1758,1759,3,292,146,0,1759,1760,3,206,103,0,1760,197,1,0,0,0,1761,1762,
3,292,146,0,1762,1763,3,206,103,0,1763,1764,3,244,122,0,1764,199,1,0,0,0,
1765,1766,3,292,146,0,1766,1767,3,244,122,0,1767,201,1,0,0,0,1768,1769,3,
292,146,0,1769,1770,3,56,28,0,1770,203,1,0,0,0,1771,1773,3,206,103,0,1772,
1771,1,0,0,0,1772,1773,1,0,0,0,1773,1774,1,0,0,0,1774,1777,3,244,122,0,1775,
1777,3,56,28,0,1776,1772,1,0,0,0,1776,1775,1,0,0,0,1777,205,1,0,0,0,1778,
1780,3,208,104,0,1779,1778,1,0,0,0,1780,1781,1,0,0,0,1781,1779,1,0,0,0,1781,
1782,1,0,0,0,1782,207,1,0,0,0,1783,1786,3,210,105,0,1784,1786,3,222,111,
0,1785,1783,1,0,0,0,1785,1784,1,0,0,0,1786,209,1,0,0,0,1787,1793,3,212,106,
0,1788,1793,3,226,113,0,1789,1793,3,232,116,0,1790,1793,3,224,112,0,1791,
1793,3,242,121,0,1792,1787,1,0,0,0,1792,1788,1,0,0,0,1792,1789,1,0,0,0,1792,
1790,1,0,0,0,1792,1791,1,0,0,0,1793,211,1,0,0,0,1794,1797,3,214,107,0,1795,
1797,3,216,108,0,1796,1794,1,0,0,0,1796,1795,1,0,0,0,1797,213,1,0,0,0,1798,
1799,5,143,0,0,1799,1800,3,294,147,0,1800,215,1,0,0,0,1801,1802,5,160,0,
0,1802,1803,3,218,109,0,1803,217,1,0,0,0,1804,1814,3,214,107,0,1805,1806,
5,369,0,0,1806,1807,3,220,110,0,1807,1808,5,380,0,0,1808,1814,1,0,0,0,1809,
1810,5,371,0,0,1810,1811,3,220,110,0,1811,1812,5,382,0,0,1812,1814,1,0,0,
0,1813,1804,1,0,0,0,1813,1805,1,0,0,0,1813,1809,1,0,0,0,1814,219,1,0,0,0,
1815,1817,3,212,106,0,1816,1815,1,0,0,0,1817,1818,1,0,0,0,1818,1816,1,0,
0,0,1818,1819,1,0,0,0,1819,221,1,0,0,0,1820,1821,3,274,137,0,1821,223,1,
0,0,0,1822,1825,5,91,0,0,1823,1826,3,500,250,0,1824,1826,3,774,387,0,1825,
1823,1,0,0,0,1825,1824,1,0,0,0,1826,225,1,0,0,0,1827,1828,5,130,0,0,1828,
1829,3,228,114,0,1829,227,1,0,0,0,1830,1835,3,230,115,0,1831,1832,5,361,
0,0,1832,1834,3,230,115,0,1833,1831,1,0,0,0,1834,1837,1,0,0,0,1835,1833,
1,0,0,0,1835,1836,1,0,0,0,1836,229,1,0,0,0,1837,1835,1,0,0,0,1838,1844,3,
82,41,0,1839,1840,3,1094,547,0,1840,1841,5,365,0,0,1841,1842,3,820,410,0,
1842,1844,1,0,0,0,1843,1838,1,0,0,0,1843,1839,1,0,0,0,1844,231,1,0,0,0,1845,
1846,5,100,0,0,1846,1848,3,234,117,0,1847,1849,3,240,120,0,1848,1847,1,0,
0,0,1848,1849,1,0,0,0,1849,233,1,0,0,0,1850,1851,3,236,118,0,1851,1852,3,
238,119,0,1852,235,1,0,0,0,1853,1854,3,1094,547,0,1854,1855,5,109,0,0,1855,
237,1,0,0,0,1856,1857,3,820,410,0,1857,239,1,0,0,0,1858,1859,5,231,0,0,1859,
1860,7,3,0,0,1860,1861,3,1094,547,0,1861,241,1,0,0,0,1862,1864,3,520,260,
0,1863,1865,3,534,267,0,1864,1863,1,0,0,0,1864,1865,1,0,0,0,1865,1867,1,
0,0,0,1866,1868,3,532,266,0,1867,1866,1,0,0,0,1867,1868,1,0,0,0,1868,1875,
1,0,0,0,1869,1871,3,534,267,0,1870,1872,3,532,266,0,1871,1870,1,0,0,0,1871,
1872,1,0,0,0,1872,1875,1,0,0,0,1873,1875,3,532,266,0,1874,1862,1,0,0,0,1874,
1869,1,0,0,0,1874,1873,1,0,0,0,1875,243,1,0,0,0,1876,1878,3,246,123,0,1877,
1879,3,242,121,0,1878,1877,1,0,0,0,1878,1879,1,0,0,0,1879,1882,1,0,0,0,1880,
1882,5,92,0,0,1881,1876,1,0,0,0,1881,1880,1,0,0,0,1882,245,1,0,0,0,1883,
1884,5,180,0,0,1884,1885,3,248,124,0,1885,247,1,0,0,0,1886,1888,3,904,452,
0,1887,1886,1,0,0,0,1887,1888,1,0,0,0,1888,1891,1,0,0,0,1889,1892,5,359,
0,0,1890,1892,3,250,125,0,1891,1889,1,0,0,0,1891,1890,1,0,0,0,1892,1894,
1,0,0,0,1893,1895,3,512,256,0,1894,1893,1,0,0,0,1894,1895,1,0,0,0,1895,1899,
1,0,0,0,1896,1897,5,300,0,0,1897,1899,5,279,0,0,1898,1887,1,0,0,0,1898,1896,
1,0,0,0,1899,249,1,0,0,0,1900,1905,3,252,126,0,1901,1902,5,361,0,0,1902,
1904,3,252,126,0,1903,1901,1,0,0,0,1904,1907,1,0,0,0,1905,1903,1,0,0,0,1905,
1906,1,0,0,0,1906,251,1,0,0,0,1907,1905,1,0,0,0,1908,1910,3,842,421,0,1909,
1911,3,254,127,0,1910,1909,1,0,0,0,1910,1911,1,0,0,0,1911,253,1,0,0,0,1912,
1913,5,27,0,0,1913,1914,3,1112,556,0,1914,255,1,0,0,0,1915,1917,5,187,0,
0,1916,1918,3,904,452,0,1917,1916,1,0,0,0,1917,1918,1,0,0,0,1918,1921,1,
0,0,0,1919,1922,5,359,0,0,1920,1922,3,258,129,0,1921,1919,1,0,0,0,1921,1920,
1,0,0,0,1922,1942,1,0,0,0,1923,1925,3,266,133,0,1924,1926,3,500,250,0,1925,
1924,1,0,0,0,1925,1926,1,0,0,0,1926,1928,1,0,0,0,1927,1929,3,512,256,0,1928,
1927,1,0,0,0,1928,1929,1,0,0,0,1929,1931,1,0,0,0,1930,1932,3,264,132,0,1931,
1930,1,0,0,0,1931,1932,1,0,0,0,1932,1934,1,0,0,0,1933,1935,3,520,260,0,1934,
1933,1,0,0,0,1934,1935,1,0,0,0,1935,1937,1,0,0,0,1936,1938,3,534,267,0,1937,
1936,1,0,0,0,1937,1938,1,0,0,0,1938,1940,1,0,0,0,1939,1941,3,532,266,0,1940,
1939,1,0,0,0,1940,1941,1,0,0,0,1941,1943,1,0,0,0,1942,1923,1,0,0,0,1942,
1943,1,0,0,0,1943,257,1,0,0,0,1944,1949,3,260,130,0,1945,1946,5,361,0,0,
1946,1948,3,260,130,0,1947,1945,1,0,0,0,1948,1951,1,0,0,0,1949,1947,1,0,
0,0,1949,1950,1,0,0,0,1950,259,1,0,0,0,1951,1949,1,0,0,0,1952,1954,3,842,
421,0,1953,1955,3,262,131,0,1954,1953,1,0,0,0,1954,1955,1,0,0,0,1955,261,
1,0,0,0,1956,1957,5,27,0,0,1957,1958,3,1112,556,0,1958,263,1,0,0,0,1959,
1960,5,103,0,0,1960,1961,3,774,387,0,1961,265,1,0,0,0,1962,1965,5,101,0,
0,1963,1966,3,268,134,0,1964,1966,3,272,136,0,1965,1963,1,0,0,0,1965,1964,
1,0,0,0,1966,267,1,0,0,0,1967,1972,3,270,135,0,1968,1969,5,361,0,0,1969,
1971,3,270,135,0,1970,1968,1,0,0,0,1971,1974,1,0,0,0,1972,1970,1,0,0,0,1972,
1973,1,0,0,0,1973,269,1,0,0,0,1974,1972,1,0,0,0,1975,1976,3,88,44,0,1976,
1977,3,212,106,0,1977,271,1,0,0,0,1978,1983,3,56,28,0,1979,1980,3,88,44,
0,1980,1981,3,56,28,0,1981,1983,1,0,0,0,1982,1978,1,0,0,0,1982,1979,1,0,
0,0,1983,273,1,0,0,0,1984,1986,5,160,0,0,1985,1984,1,0,0,0,1985,1986,1,0,
0,0,1986,1987,1,0,0,0,1987,1988,5,44,0,0,1988,1989,3,276,138,0,1989,275,
1,0,0,0,1990,1993,3,278,139,0,1991,1993,3,284,142,0,1992,1990,1,0,0,0,1992,
1991,1,0,0,0,1993,277,1,0,0,0,1994,1996,3,280,140,0,1995,1994,1,0,0,0,1995,
1996,1,0,0,0,1996,1997,1,0,0,0,1997,1998,3,50,25,0,1998,279,1,0,0,0,1999,
2001,5,371,0,0,2000,2002,3,282,141,0,2001,2000,1,0,0,0,2001,2002,1,0,0,0,
2002,2003,1,0,0,0,2003,2004,5,382,0,0,2004,281,1,0,0,0,2005,2010,3,914,457,
0,2006,2007,5,361,0,0,2007,2009,3,914,457,0,2008,2006,1,0,0,0,2009,2012,
1,0,0,0,2010,2008,1,0,0,0,2010,2011,1,0,0,0,2011,283,1,0,0,0,2012,2010,1,
0,0,0,2013,2014,3,566,283,0,2014,2016,5,371,0,0,2015,2017,3,286,143,0,2016,
2015,1,0,0,0,2016,2017,1,0,0,0,2017,2018,1,0,0,0,2018,2020,5,382,0,0,2019,
2021,3,502,251,0,2020,2019,1,0,0,0,2020,2021,1,0,0,0,2021,285,1,0,0,0,2022,
2027,3,288,144,0,2023,2024,5,361,0,0,2024,2026,3,288,144,0,2025,2023,1,0,
0,0,2026,2029,1,0,0,0,2027,2025,1,0,0,0,2027,2028,1,0,0,0,2028,287,1,0,0,
0,2029,2027,1,0,0,0,2030,2031,3,820,410,0,2031,289,1,0,0,0,2032,2033,5,31,
0,0,2033,2034,3,538,269,0,2034,291,1,0,0,0,2035,2036,5,223,0,0,2036,2037,
3,88,44,0,2037,293,1,0,0,0,2038,2040,3,302,151,0,2039,2041,3,296,148,0,2040,
2039,1,0,0,0,2040,2041,1,0,0,0,2041,295,1,0,0,0,2042,2043,5,234,0,0,2043,
2044,3,298,149,0,2044,297,1,0,0,0,2045,2050,3,300,150,0,2046,2047,5,361,
0,0,2047,2049,3,300,150,0,2048,2046,1,0,0,0,2049,2052,1,0,0,0,2050,2048,
1,0,0,0,2050,2051,1,0,0,0,2051,2056,1,0,0,0,2052,2050,1,0,0,0,2053,2054,
5,300,0,0,2054,2056,5,279,0,0,2055,2045,1,0,0,0,2055,2053,1,0,0,0,2056,299,
1,0,0,0,2057,2058,3,914,457,0,2058,301,1,0,0,0,2059,2061,3,304,152,0,2060,
2059,1,0,0,0,2060,2061,1,0,0,0,2061,2062,1,0,0,0,2062,2064,3,314,157,0,2063,
2065,3,320,160,0,2064,2063,1,0,0,0,2064,2065,1,0,0,0,2065,2067,1,0,0,0,2066,
2068,3,322,161,0,2067,2066,1,0,0,0,2067,2068,1,0,0,0,2068,303,1,0,0,0,2069,
2072,3,306,153,0,2070,2072,3,308,154,0,2071,2069,1,0,0,0,2071,2070,1,0,0,
0,2072,305,1,0,0,0,2073,2074,5,309,0,0,2074,2075,3,310,155,0,2075,307,1,
0,0,0,2076,2077,5,282,0,0,2077,2078,3,312,156,0,2078,309,1,0,0,0,2079,2081,
5,286,0,0,2080,2082,5,279,0,0,2081,2080,1,0,0,0,2081,2082,1,0,0,0,2082,2085,
1,0,0,0,2083,2085,5,287,0,0,2084,2079,1,0,0,0,2084,2083,1,0,0,0,2085,311,
1,0,0,0,2086,2088,3,1146,573,0,2087,2089,5,279,0,0,2088,2087,1,0,0,0,2088,
2089,1,0,0,0,2089,2092,1,0,0,0,2090,2092,3,1144,572,0,2091,2086,1,0,0,0,
2091,2090,1,0,0,0,2092,313,1,0,0,0,2093,2098,3,316,158,0,2094,2095,5,361,
0,0,2095,2097,3,316,158,0,2096,2094,1,0,0,0,2097,2100,1,0,0,0,2098,2096,
1,0,0,0,2098,2099,1,0,0,0,2099,315,1,0,0,0,2100,2098,1,0,0,0,2101,2103,3,
318,159,0,2102,2101,1,0,0,0,2102,2103,1,0,0,0,2103,2105,1,0,0,0,2104,2106,
3,344,172,0,2105,2104,1,0,0,0,2105,2106,1,0,0,0,2106,2107,1,0,0,0,2107,2108,
3,372,186,0,2108,317,1,0,0,0,2109,2110,3,1090,545,0,2110,2111,5,365,0,0,
2111,319,1,0,0,0,2112,2113,5,291,0,0,2113,2114,3,344,172,0,2114,321,1,0,
0,0,2115,2116,5,230,0,0,2116,2117,3,774,387,0,2117,323,1,0,0,0,2118,2119,
3,326,163,0,2119,325,1,0,0,0,2120,2125,3,328,164,0,2121,2122,5,361,0,0,2122,
2124,3,328,164,0,2123,2121,1,0,0,0,2124,2127,1,0,0,0,2125,2123,1,0,0,0,2125,
2126,1,0,0,0,2126,327,1,0,0,0,2127,2125,1,0,0,0,2128,2134,3,330,165,0,2129,
2130,3,332,166,0,2130,2131,3,330,165,0,2131,2133,1,0,0,0,2132,2129,1,0,0,
0,2133,2136,1,0,0,0,2134,2132,1,0,0,0,2134,2135,1,0,0,0,2135,329,1,0,0,0,
2136,2134,1,0,0,0,2137,2139,5,371,0,0,2138,2140,3,340,170,0,2139,2138,1,
0,0,0,2139,2140,1,0,0,0,2140,2141,1,0,0,0,2141,2142,5,382,0,0,2142,331,1,
0,0,0,2143,2147,3,334,167,0,2144,2147,3,336,168,0,2145,2147,3,338,169,0,
2146,2143,1,0,0,0,2146,2144,1,0,0,0,2146,2145,1,0,0,0,2147,333,1,0,0,0,2148,
2150,5,338,0,0,2149,2151,3,340,170,0,2150,2149,1,0,0,0,2150,2151,1,0,0,0,
2151,2152,1,0,0,0,2152,2153,5,348,0,0,2153,335,1,0,0,0,2154,2156,5,344,0,
0,2155,2157,3,340,170,0,2156,2155,1,0,0,0,2156,2157,1,0,0,0,2157,2158,1,
0,0,0,2158,2159,5,329,0,0,2159,337,1,0,0,0,2160,2162,5,355,0,0,2161,2163,
3,340,170,0,2162,2161,1,0,0,0,2162,2163,1,0,0,0,2163,2164,1,0,0,0,2164,2165,
5,349,0,0,2165,339,1,0,0,0,2166,2168,3,386,193,0,2167,2169,3,342,171,0,2168,
2167,1,0,0,0,2168,2169,1,0,0,0,2169,2175,1,0,0,0,2170,2172,3,386,193,0,2171,
2170,1,0,0,0,2171,2172,1,0,0,0,2172,2173,1,0,0,0,2173,2175,3,342,171,0,2174,
2166,1,0,0,0,2174,2171,1,0,0,0,2175,341,1,0,0,0,2176,2177,3,390,195,0,2177,
2179,3,662,331,0,2178,2180,3,396,198,0,2179,2178,1,0,0,0,2179,2180,1,0,0,
0,2180,2188,1,0,0,0,2181,2182,3,390,195,0,2182,2183,3,662,331,0,2183,2185,
1,0,0,0,2184,2181,1,0,0,0,2184,2185,1,0,0,0,2185,2186,1,0,0,0,2186,2188,
3,396,198,0,2187,2176,1,0,0,0,2187,2184,1,0,0,0,2188,343,1,0,0,0,2189,2192,
3,346,173,0,2190,2192,3,350,175,0,2191,2189,1,0,0,0,2191,2190,1,0,0,0,2192,
345,1,0,0,0,2193,2195,3,348,174,0,2194,2196,3,354,177,0,2195,2194,1,0,0,
0,2195,2196,1,0,0,0,2196,347,1,0,0,0,2197,2198,7,4,0,0,2198,349,1,0,0,0,
2199,2203,3,352,176,0,2200,2203,3,356,178,0,2201,2203,3,360,180,0,2202,2199,
1,0,0,0,2202,2200,1,0,0,0,2202,2201,1,0,0,0,2203,351,1,0,0,0,2204,2206,5,
22,0,0,2205,2207,3,348,174,0,2206,2205,1,0,0,0,2206,2207,1,0,0,0,2207,2209,
1,0,0,0,2208,2210,3,354,177,0,2209,2208,1,0,0,0,2209,2210,1,0,0,0,2210,353,
1,0,0,0,2211,2212,7,5,0,0,2212,355,1,0,0,0,2213,2215,5,25,0,0,2214,2216,
3,358,179,0,2215,2214,1,0,0,0,2215,2216,1,0,0,0,2216,2218,1,0,0,0,2217,2219,
3,348,174,0,2218,2217,1,0,0,0,2218,2219,1,0,0,0,2219,2221,1,0,0,0,2220,2222,
3,354,177,0,2221,2220,1,0,0,0,2221,2222,1,0,0,0,2222,357,1,0,0,0,2223,2224,
3,854,427,0,2224,359,1,0,0,0,2225,2230,3,362,181,0,2226,2230,3,364,182,0,
2227,2230,3,366,183,0,2228,2230,3,368,184,0,2229,2225,1,0,0,0,2229,2226,
1,0,0,0,2229,2227,1,0,0,0,2229,2228,1,0,0,0,2230,361,1,0,0,0,2231,2232,5,
22,0,0,2232,2234,5,310,0,0,2233,2235,3,348,174,0,2234,2233,1,0,0,0,2234,
2235,1,0,0,0,2235,2237,1,0,0,0,2236,2238,3,354,177,0,2237,2236,1,0,0,0,2237,
2238,1,0,0,0,2238,363,1,0,0,0,2239,2240,5,25,0,0,2240,2242,5,310,0,0,2241,
2243,3,348,174,0,2242,2241,1,0,0,0,2242,2243,1,0,0,0,2243,2245,1,0,0,0,2244,
2246,3,354,177,0,2245,2244,1,0,0,0,2245,2246,1,0,0,0,2246,365,1,0,0,0,2247,
2248,5,310,0,0,2248,2250,3,358,179,0,2249,2251,3,348,174,0,2250,2249,1,0,
0,0,2250,2251,1,0,0,0,2251,2253,1,0,0,0,2252,2254,3,354,177,0,2253,2252,
1,0,0,0,2253,2254,1,0,0,0,2254,367,1,0,0,0,2255,2257,5,310,0,0,2256,2258,
3,370,185,0,2257,2256,1,0,0,0,2257,2258,1,0,0,0,2258,2260,1,0,0,0,2259,2261,
3,348,174,0,2260,2259,1,0,0,0,2260,2261,1,0,0,0,2261,2263,1,0,0,0,2262,2264,
3,354,177,0,2263,2262,1,0,0,0,2263,2264,1,0,0,0,2264,2265,1,0,0,0,2265,2266,
7,6,0,0,2266,369,1,0,0,0,2267,2268,3,854,427,0,2268,371,1,0,0,0,2269,2285,
3,374,187,0,2270,2273,3,374,187,0,2271,2272,5,328,0,0,2272,2274,3,374,187,
0,2273,2271,1,0,0,0,2274,2275,1,0,0,0,2275,2273,1,0,0,0,2275,2276,1,0,0,
0,2276,2285,1,0,0,0,2277,2280,3,374,187,0,2278,2279,5,386,0,0,2279,2281,
3,374,187,0,2280,2278,1,0,0,0,2281,2282,1,0,0,0,2282,2280,1,0,0,0,2282,2283,
1,0,0,0,2283,2285,1,0,0,0,2284,2269,1,0,0,0,2284,2270,1,0,0,0,2284,2277,
1,0,0,0,2285,373,1,0,0,0,2286,2288,3,376,188,0,2287,2286,1,0,0,0,2288,2289,
1,0,0,0,2289,2287,1,0,0,0,2289,2290,1,0,0,0,2290,375,1,0,0,0,2291,2299,3,
378,189,0,2292,2293,3,378,189,0,2293,2294,3,434,217,0,2294,2299,1,0,0,0,
2295,2296,3,378,189,0,2296,2297,5,377,0,0,2297,2299,1,0,0,0,2298,2291,1,
0,0,0,2298,2292,1,0,0,0,2298,2295,1,0,0,0,2299,377,1,0,0,0,2300,2304,3,380,
190,0,2301,2304,3,422,211,0,2302,2304,3,444,222,0,2303,2300,1,0,0,0,2303,
2301,1,0,0,0,2303,2302,1,0,0,0,2304,379,1,0,0,0,2305,2308,3,382,191,0,2306,
2308,3,402,201,0,2307,2305,1,0,0,0,2307,2306,1,0,0,0,2308,381,1,0,0,0,2309,
2310,5,371,0,0,2310,2311,3,384,192,0,2311,2312,5,382,0,0,2312,383,1,0,0,
0,2313,2315,3,386,193,0,2314,2313,1,0,0,0,2314,2315,1,0,0,0,2315,2317,1,
0,0,0,2316,2318,3,388,194,0,2317,2316,1,0,0,0,2317,2318,1,0,0,0,2318,2320,
1,0,0,0,2319,2321,3,392,196,0,2320,2319,1,0,0,0,2320,2321,1,0,0,0,2321,385,
1,0,0,0,2322,2324,5,314,0,0,2323,2322,1,0,0,0,2323,2324,1,0,0,0,2324,2325,
1,0,0,0,2325,2326,3,1088,544,0,2326,387,1,0,0,0,2327,2328,3,390,195,0,2328,
2329,3,428,214,0,2329,389,1,0,0,0,2330,2331,7,7,0,0,2331,391,1,0,0,0,2332,
2335,3,394,197,0,2333,2335,3,396,198,0,2334,2332,1,0,0,0,2334,2333,1,0,0,
0,2335,393,1,0,0,0,2336,2337,5,230,0,0,2337,2338,3,774,387,0,2338,395,1,
0,0,0,2339,2340,5,369,0,0,2340,2341,3,398,199,0,2341,2342,5,380,0,0,2342,
397,1,0,0,0,2343,2348,3,400,200,0,2344,2345,5,361,0,0,2345,2347,3,400,200,
0,2346,2344,1,0,0,0,2347,2350,1,0,0,0,2348,2346,1,0,0,0,2348,2349,1,0,0,
0,2349,399,1,0,0,0,2350,2348,1,0,0,0,2351,2352,3,1084,542,0,2352,2353,5,
360,0,0,2353,2354,3,820,410,0,2354,401,1,0,0,0,2355,2358,3,404,202,0,2356,
2358,3,420,210,0,2357,2355,1,0,0,0,2357,2356,1,0,0,0,2358,403,1,0,0,0,2359,
2367,3,406,203,0,2360,2367,3,408,204,0,2361,2367,3,410,205,0,2362,2367,3,
412,206,0,2363,2367,3,414,207,0,2364,2367,3,416,208,0,2365,2367,3,418,209,
0,2366,2359,1,0,0,0,2366,2360,1,0,0,0,2366,2361,1,0,0,0,2366,2362,1,0,0,
0,2366,2363,1,0,0,0,2366,2364,1,0,0,0,2366,2365,1,0,0,0,2367,405,1,0,0,0,
2368,2369,5,338,0,0,2369,2370,3,384,192,0,2370,2371,5,348,0,0,2371,407,1,
0,0,0,2372,2373,5,355,0,0,2373,2374,3,384,192,0,2374,2375,5,349,0,0,2375,
409,1,0,0,0,2376,2377,5,344,0,0,2377,2378,3,384,192,0,2378,2379,5,329,0,
0,2379,411,1,0,0,0,2380,2381,5,339,0,0,2381,2382,3,384,192,0,2382,2383,5,
349,0,0,2383,413,1,0,0,0,2384,2385,5,355,0,0,2385,2386,3,384,192,0,2386,
2387,5,330,0,0,2387,415,1,0,0,0,2388,2389,5,338,0,0,2389,2390,3,384,192,
0,2390,2391,5,329,0,0,2391,417,1,0,0,0,2392,2393,5,344,0,0,2393,2394,3,384,
192,0,2394,2395,5,348,0,0,2395,419,1,0,0,0,2396,2397,7,8,0,0,2397,421,1,
0,0,0,2398,2400,5,371,0,0,2399,2401,3,424,212,0,2400,2399,1,0,0,0,2400,2401,
1,0,0,0,2401,2403,1,0,0,0,2402,2404,3,346,173,0,2403,2402,1,0,0,0,2403,2404,
1,0,0,0,2404,2405,1,0,0,0,2405,2407,3,372,186,0,2406,2408,3,426,213,0,2407,
2406,1,0,0,0,2407,2408,1,0,0,0,2408,2409,1,0,0,0,2409,2410,5,382,0,0,2410,
423,1,0,0,0,2411,2412,3,1092,546,0,2412,2413,5,365,0,0,2413,425,1,0,0,0,
2414,2415,5,230,0,0,2415,2416,3,774,387,0,2416,427,1,0,0,0,2417,2418,6,214,
-1,0,2418,2419,5,366,0,0,2419,2427,3,428,214,6,2420,2427,3,1082,541,0,2421,
2427,5,374,0,0,2422,2423,5,371,0,0,2423,2424,3,428,214,0,2424,2425,5,382,
0,0,2425,2427,1,0,0,0,2426,2417,1,0,0,0,2426,2420,1,0,0,0,2426,2421,1,0,
0,0,2426,2422,1,0,0,0,2427,2436,1,0,0,0,2428,2429,10,5,0,0,2429,2430,5,358,
0,0,2430,2435,3,428,214,6,2431,2432,10,4,0,0,2432,2433,5,386,0,0,2433,2435,
3,428,214,5,2434,2428,1,0,0,0,2434,2431,1,0,0,0,2435,2438,1,0,0,0,2436,2434,
1,0,0,0,2436,2437,1,0,0,0,2437,429,1,0,0,0,2438,2436,1,0,0,0,2439,2440,3,
914,457,0,2440,431,1,0,0,0,2441,2442,3,914,457,0,2442,433,1,0,0,0,2443,2448,
5,359,0,0,2444,2448,5,376,0,0,2445,2448,3,436,218,0,2446,2448,3,438,219,
0,2447,2443,1,0,0,0,2447,2444,1,0,0,0,2447,2445,1,0,0,0,2447,2446,1,0,0,
0,2448,435,1,0,0,0,2449,2450,5,369,0,0,2450,2451,3,1126,563,0,2451,2452,
5,380,0,0,2452,437,1,0,0,0,2453,2455,5,369,0,0,2454,2456,3,440,220,0,2455,
2454,1,0,0,0,2455,2456,1,0,0,0,2456,2457,1,0,0,0,2457,2459,5,361,0,0,2458,
2460,3,442,221,0,2459,2458,1,0,0,0,2459,2460,1,0,0,0,2460,2461,1,0,0,0,2461,
2462,5,380,0,0,2462,439,1,0,0,0,2463,2464,3,1126,563,0,2464,441,1,0,0,0,
2465,2466,3,1126,563,0,2466,443,1,0,0,0,2467,2475,3,446,223,0,2468,2475,
3,448,224,0,2469,2475,3,450,225,0,2470,2475,3,452,226,0,2471,2475,3,454,
227,0,2472,2475,3,456,228,0,2473,2475,3,458,229,0,2474,2467,1,0,0,0,2474,
2468,1,0,0,0,2474,2469,1,0,0,0,2474,2470,1,0,0,0,2474,2471,1,0,0,0,2474,
2472,1,0,0,0,2474,2473,1,0,0,0,2475,445,1,0,0,0,2476,2477,5,341,0,0,2477,
2478,3,460,230,0,2478,2479,5,351,0,0,2479,447,1,0,0,0,2480,2481,5,357,0,
0,2481,2482,3,460,230,0,2482,2483,5,353,0,0,2483,449,1,0,0,0,2484,2485,5,
345,0,0,2485,2486,3,460,230,0,2486,2487,5,352,0,0,2487,451,1,0,0,0,2488,
2489,5,342,0,0,2489,2490,3,460,230,0,2490,2491,5,353,0,0,2491,453,1,0,0,
0,2492,2493,5,357,0,0,2493,2494,3,460,230,0,2494,2495,5,354,0,0,2495,455,
1,0,0,0,2496,2497,5,341,0,0,2497,2498,3,460,230,0,2498,2499,5,352,0,0,2499,
457,1,0,0,0,2500,2501,5,345,0,0,2501,2502,3,460,230,0,2502,2503,5,351,0,
0,2503,459,1,0,0,0,2504,2508,3,466,233,0,2505,2508,3,462,231,0,2506,2508,
3,464,232,0,2507,2504,1,0,0,0,2507,2505,1,0,0,0,2507,2506,1,0,0,0,2508,461,
1,0,0,0,2509,2510,3,466,233,0,2510,2511,5,386,0,0,2511,2516,3,466,233,0,
2512,2513,5,386,0,0,2513,2515,3,466,233,0,2514,2512,1,0,0,0,2515,2518,1,
0,0,0,2516,2514,1,0,0,0,2516,2517,1,0,0,0,2517,463,1,0,0,0,2518,2516,1,0,
0,0,2519,2520,3,466,233,0,2520,2521,5,328,0,0,2521,2526,3,466,233,0,2522,
2523,5,328,0,0,2523,2525,3,466,233,0,2524,2522,1,0,0,0,2525,2528,1,0,0,0,
2526,2524,1,0,0,0,2526,2527,1,0,0,0,2527,465,1,0,0,0,2528,2526,1,0,0,0,2529,
2530,6,233,-1,0,2530,2531,3,468,234,0,2531,2536,1,0,0,0,2532,2533,10,1,0,
0,2533,2535,3,468,234,0,2534,2532,1,0,0,0,2535,2538,1,0,0,0,2536,2534,1,
0,0,0,2536,2537,1,0,0,0,2537,467,1,0,0,0,2538,2536,1,0,0,0,2539,2540,6,234,
-1,0,2540,2541,3,470,235,0,2541,2547,1,0,0,0,2542,2543,10,1,0,0,2543,2544,
5,358,0,0,2544,2546,3,470,235,0,2545,2542,1,0,0,0,2546,2549,1,0,0,0,2547,
2545,1,0,0,0,2547,2548,1,0,0,0,2548,469,1,0,0,0,2549,2547,1,0,0,0,2550,2554,
3,476,238,0,2551,2554,3,472,236,0,2552,2554,3,474,237,0,2553,2550,1,0,0,
0,2553,2551,1,0,0,0,2553,2552,1,0,0,0,2554,471,1,0,0,0,2555,2556,3,476,238,
0,2556,2557,3,434,217,0,2557,473,1,0,0,0,2558,2559,3,476,238,0,2559,2560,
5,377,0,0,2560,475,1,0,0,0,2561,2564,3,478,239,0,2562,2564,3,494,247,0,2563,
2561,1,0,0,0,2563,2562,1,0,0,0,2564,477,1,0,0,0,2565,2573,3,480,240,0,2566,
2573,3,482,241,0,2567,2573,3,484,242,0,2568,2573,3,486,243,0,2569,2573,3,
488,244,0,2570,2573,3,490,245,0,2571,2573,3,492,246,0,2572,2565,1,0,0,0,
2572,2566,1,0,0,0,2572,2567,1,0,0,0,2572,2568,1,0,0,0,2572,2569,1,0,0,0,
2572,2570,1,0,0,0,2572,2571,1,0,0,0,2573,479,1,0,0,0,2574,2575,5,372,0,0,
2575,2576,3,494,247,0,2576,481,1,0,0,0,2577,2578,5,384,0,0,2578,2579,3,494,
247,0,2579,483,1,0,0,0,2580,2581,3,494,247,0,2581,2582,5,367,0,0,2582,485,
1,0,0,0,2583,2584,5,337,0,0,2584,2585,3,494,247,0,2585,487,1,0,0,0,2586,
2587,5,384,0,0,2587,2588,3,494,247,0,2588,2589,5,367,0,0,2589,489,1,0,0,
0,2590,2591,5,372,0,0,2591,2592,3,494,247,0,2592,2593,5,367,0,0,2593,491,
1,0,0,0,2594,2595,5,373,0,0,2595,2596,3,494,247,0,2596,493,1,0,0,0,2597,
2600,3,498,249,0,2598,2600,3,496,248,0,2599,2597,1,0,0,0,2599,2598,1,0,0,
0,2600,495,1,0,0,0,2601,2602,5,366,0,0,2602,2603,3,498,249,0,2603,497,1,
0,0,0,2604,2610,3,1082,541,0,2605,2606,5,371,0,0,2606,2607,3,460,230,0,2607,
2608,5,382,0,0,2608,2610,1,0,0,0,2609,2604,1,0,0,0,2609,2605,1,0,0,0,2610,
499,1,0,0,0,2611,2612,5,230,0,0,2612,2613,3,774,387,0,2613,501,1,0,0,0,2614,
2615,5,234,0,0,2615,2616,3,504,252,0,2616,503,1,0,0,0,2617,2622,3,506,253,
0,2618,2619,5,361,0,0,2619,2621,3,506,253,0,2620,2618,1,0,0,0,2621,2624,
1,0,0,0,2622,2620,1,0,0,0,2622,2623,1,0,0,0,2623,505,1,0,0,0,2624,2622,1,
0,0,0,2625,2627,3,508,254,0,2626,2628,3,510,255,0,2627,2626,1,0,0,0,2627,
2628,1,0,0,0,2628,507,1,0,0,0,2629,2630,3,1086,543,0,2630,509,1,0,0,0,2631,
2632,5,27,0,0,2632,2633,3,1094,547,0,2633,511,1,0,0,0,2634,2635,5,102,0,
0,2635,2636,5,41,0,0,2636,2637,3,514,257,0,2637,513,1,0,0,0,2638,2643,3,
516,258,0,2639,2640,5,361,0,0,2640,2642,3,516,258,0,2641,2639,1,0,0,0,2642,
2645,1,0,0,0,2643,2641,1,0,0,0,2643,2644,1,0,0,0,2644,2648,1,0,0,0,2645,
2643,1,0,0,0,2646,2648,3,518,259,0,2647,2638,1,0,0,0,2647,2646,1,0,0,0,2648,
515,1,0,0,0,2649,2650,3,914,457,0,2650,517,1,0,0,0,2651,2652,5,371,0,0,2652,
2653,5,382,0,0,2653,519,1,0,0,0,2654,2655,5,162,0,0,2655,2656,5,41,0,0,2656,
2657,3,522,261,0,2657,521,1,0,0,0,2658,2663,3,524,262,0,2659,2660,5,361,
0,0,2660,2662,3,524,262,0,2661,2659,1,0,0,0,2662,2665,1,0,0,0,2663,2661,
1,0,0,0,2663,2664,1,0,0,0,2664,523,1,0,0,0,2665,2663,1,0,0,0,2666,2668,3,
526,263,0,2667,2669,3,528,264,0,2668,2667,1,0,0,0,2668,2669,1,0,0,0,2669,
2671,1,0,0,0,2670,2672,3,530,265,0,2671,2670,1,0,0,0,2671,2672,1,0,0,0,2672,
525,1,0,0,0,2673,2674,3,842,421,0,2674,527,1,0,0,0,2675,2676,7,9,0,0,2676,
529,1,0,0,0,2677,2678,5,155,0,0,2678,2682,5,288,0,0,2679,2680,5,155,0,0,
2680,2682,5,295,0,0,2681,2677,1,0,0,0,2681,2679,1,0,0,0,2682,531,1,0,0,0,
2683,2684,5,132,0,0,2684,2685,3,854,427,0,2685,533,1,0,0,0,2686,2687,3,536,
268,0,2687,2688,3,854,427,0,2688,535,1,0,0,0,2689,2690,7,10,0,0,2690,537,
1,0,0,0,2691,2695,3,540,270,0,2692,2695,3,544,272,0,2693,2695,3,572,286,
0,2694,2691,1,0,0,0,2694,2692,1,0,0,0,2694,2693,1,0,0,0,2695,539,1,0,0,0,
2696,2701,5,383,0,0,2697,2698,3,548,274,0,2698,2699,3,1064,532,0,2699,2701,
1,0,0,0,2700,2696,1,0,0,0,2700,2697,1,0,0,0,2701,541,1,0,0,0,2702,2703,3,
548,274,0,2703,2704,3,1064,532,0,2704,543,1,0,0,0,2705,2710,3,546,273,0,
2706,2707,3,550,275,0,2707,2708,3,1064,532,0,2708,2710,1,0,0,0,2709,2705,
1,0,0,0,2709,2706,1,0,0,0,2710,545,1,0,0,0,2711,2712,7,11,0,0,2712,547,1,
0,0,0,2713,2715,5,383,0,0,2714,2716,3,552,276,0,2715,2714,1,0,0,0,2715,2716,
1,0,0,0,2716,549,1,0,0,0,2717,2722,5,334,0,0,2718,2719,5,383,0,0,2719,2721,
5,334,0,0,2720,2718,1,0,0,0,2721,2724,1,0,0,0,2722,2720,1,0,0,0,2722,2723,
1,0,0,0,2723,2725,1,0,0,0,2724,2722,1,0,0,0,2725,2727,5,383,0,0,2726,2728,
3,552,276,0,2727,2726,1,0,0,0,2727,2728,1,0,0,0,2728,551,1,0,0,0,2729,2730,
3,1062,531,0,2730,2731,5,383,0,0,2731,2733,1,0,0,0,2732,2729,1,0,0,0,2733,
2734,1,0,0,0,2734,2732,1,0,0,0,2734,2735,1,0,0,0,2735,553,1,0,0,0,2736,2737,
3,570,285,0,2737,2738,3,1066,533,0,2738,2743,1,0,0,0,2739,2743,3,1068,534,
0,2740,2743,3,558,279,0,2741,2743,3,572,286,0,2742,2736,1,0,0,0,2742,2739,
1,0,0,0,2742,2740,1,0,0,0,2742,2741,1,0,0,0,2743,555,1,0,0,0,2744,2746,3,
570,285,0,2745,2744,1,0,0,0,2745,2746,1,0,0,0,2746,2747,1,0,0,0,2747,2748,
3,1066,533,0,2748,557,1,0,0,0,2749,2750,7,12,0,0,2750,559,1,0,0,0,2751,2754,
3,562,281,0,2752,2754,3,572,286,0,2753,2751,1,0,0,0,2753,2752,1,0,0,0,2754,
561,1,0,0,0,2755,2757,3,570,285,0,2756,2755,1,0,0,0,2756,2757,1,0,0,0,2757,
2758,1,0,0,0,2758,2759,3,1070,535,0,2759,563,1,0,0,0,2760,2761,3,570,285,
0,2761,2762,3,1076,538,0,2762,2766,1,0,0,0,2763,2766,3,1078,539,0,2764,2766,
3,572,286,0,2765,2760,1,0,0,0,2765,2763,1,0,0,0,2765,2764,1,0,0,0,2766,565,
1,0,0,0,2767,2770,3,568,284,0,2768,2770,3,572,286,0,2769,2767,1,0,0,0,2769,
2768,1,0,0,0,2770,567,1,0,0,0,2771,2773,3,570,285,0,2772,2771,1,0,0,0,2772,
2773,1,0,0,0,2773,2774,1,0,0,0,2774,2775,3,1080,540,0,2775,569,1,0,0,0,2776,
2778,3,538,269,0,2777,2779,5,383,0,0,2778,2777,1,0,0,0,2778,2779,1,0,0,0,
2779,2785,1,0,0,0,2780,2781,3,1058,529,0,2781,2782,5,375,0,0,2782,2784,1,
0,0,0,2783,2780,1,0,0,0,2784,2787,1,0,0,0,2785,2783,1,0,0,0,2785,2786,1,
0,0,0,2786,2796,1,0,0,0,2787,2785,1,0,0,0,2788,2789,3,1058,529,0,2789,2790,
5,375,0,0,2790,2792,1,0,0,0,2791,2788,1,0,0,0,2792,2793,1,0,0,0,2793,2791,
1,0,0,0,2793,2794,1,0,0,0,2794,2796,1,0,0,0,2795,2776,1,0,0,0,2795,2791,
1,0,0,0,2796,571,1,0,0,0,2797,2798,5,326,0,0,2798,573,1,0,0,0,2799,2800,
5,369,0,0,2800,2801,3,576,288,0,2801,2802,5,380,0,0,2802,575,1,0,0,0,2803,
2804,3,578,289,0,2804,577,1,0,0,0,2805,2810,3,580,290,0,2806,2807,5,361,
0,0,2807,2809,3,580,290,0,2808,2806,1,0,0,0,2809,2812,1,0,0,0,2810,2808,
1,0,0,0,2810,2811,1,0,0,0,2811,579,1,0,0,0,2812,2810,1,0,0,0,2813,2816,3,
582,291,0,2814,2816,3,602,301,0,2815,2813,1,0,0,0,2815,2814,1,0,0,0,2816,
581,1,0,0,0,2817,2820,3,584,292,0,2818,2820,3,586,293,0,2819,2817,1,0,0,
0,2819,2818,1,0,0,0,2820,583,1,0,0,0,2821,2823,3,1142,571,0,2822,2824,5,
318,0,0,2823,2822,1,0,0,0,2823,2824,1,0,0,0,2824,2825,1,0,0,0,2825,2826,
3,1072,536,0,2826,2828,1,0,0,0,2827,2821,1,0,0,0,2827,2828,1,0,0,0,2828,
2829,1,0,0,0,2829,2831,5,371,0,0,2830,2832,3,592,296,0,2831,2830,1,0,0,0,
2831,2832,1,0,0,0,2832,2834,1,0,0,0,2833,2835,3,590,295,0,2834,2833,1,0,
0,0,2834,2835,1,0,0,0,2835,2836,1,0,0,0,2836,2837,5,382,0,0,2837,585,1,0,
0,0,2838,2840,3,1142,571,0,2839,2841,5,318,0,0,2840,2839,1,0,0,0,2840,2841,
1,0,0,0,2841,2842,1,0,0,0,2842,2845,3,588,294,0,2843,2844,5,27,0,0,2844,
2846,3,592,296,0,2845,2843,1,0,0,0,2845,2846,1,0,0,0,2846,587,1,0,0,0,2847,
2849,3,1072,536,0,2848,2850,3,590,295,0,2849,2848,1,0,0,0,2849,2850,1,0,
0,0,2850,2853,1,0,0,0,2851,2853,3,590,295,0,2852,2847,1,0,0,0,2852,2851,
1,0,0,0,2853,589,1,0,0,0,2854,2856,3,596,298,0,2855,2857,3,594,297,0,2856,
2855,1,0,0,0,2856,2857,1,0,0,0,2857,2860,1,0,0,0,2858,2860,3,594,297,0,2859,
2854,1,0,0,0,2859,2858,1,0,0,0,2860,591,1,0,0,0,2861,2862,3,1114,557,0,2862,
593,1,0,0,0,2863,2869,3,598,299,0,2864,2869,3,600,300,0,2865,2866,3,598,
299,0,2866,2867,3,600,300,0,2867,2869,1,0,0,0,2868,2863,1,0,0,0,2868,2864,
1,0,0,0,2868,2865,1,0,0,0,2869,595,1,0,0,0,2870,2872,3,660,330,0,2871,2870,
1,0,0,0,2871,2872,1,0,0,0,2872,2873,1,0,0,0,2873,2874,5,1,0,0,2874,597,1,
0,0,0,2875,2876,3,660,330,0,2876,599,1,0,0,0,2877,2878,3,664,332,0,2878,
601,1,0,0,0,2879,2882,3,604,302,0,2880,2882,3,606,303,0,2881,2879,1,0,0,
0,2881,2880,1,0,0,0,2882,603,1,0,0,0,2883,2885,3,638,319,0,2884,2883,1,0,
0,0,2884,2885,1,0,0,0,2885,2886,1,0,0,0,2886,2888,3,1146,573,0,2887,2889,
5,318,0,0,2888,2887,1,0,0,0,2888,2889,1,0,0,0,2889,2890,1,0,0,0,2890,2891,
3,1074,537,0,2891,2893,1,0,0,0,2892,2884,1,0,0,0,2892,2893,1,0,0,0,2893,
2896,1,0,0,0,2894,2897,3,620,310,0,2895,2897,3,626,313,0,2896,2894,1,0,0,
0,2896,2895,1,0,0,0,2897,605,1,0,0,0,2898,2899,3,638,319,0,2899,2901,3,1146,
573,0,2900,2902,5,318,0,0,2901,2900,1,0,0,0,2901,2902,1,0,0,0,2902,2903,
1,0,0,0,2903,2904,3,608,304,0,2904,2905,3,640,320,0,2905,607,1,0,0,0,2906,
2908,3,1074,537,0,2907,2909,3,610,305,0,2908,2907,1,0,0,0,2908,2909,1,0,
0,0,2909,2912,1,0,0,0,2910,2912,3,610,305,0,2911,2906,1,0,0,0,2911,2910,
1,0,0,0,2912,609,1,0,0,0,2913,2915,3,614,307,0,2914,2916,3,612,306,0,2915,
2914,1,0,0,0,2915,2916,1,0,0,0,2916,2919,1,0,0,0,2917,2919,3,612,306,0,2918,
2913,1,0,0,0,2918,2917,1,0,0,0,2919,611,1,0,0,0,2920,2926,3,616,308,0,2921,
2926,3,618,309,0,2922,2923,3,616,308,0,2923,2924,3,618,309,0,2924,2926,1,
0,0,0,2925,2920,1,0,0,0,2925,2921,1,0,0,0,2925,2922,1,0,0,0,2926,613,1,0,
0,0,2927,2929,3,660,330,0,2928,2927,1,0,0,0,2928,2929,1,0,0,0,2929,2930,
1,0,0,0,2930,2931,5,1,0,0,2931,615,1,0,0,0,2932,2933,3,660,330,0,2933,617,
1,0,0,0,2934,2935,3,664,332,0,2935,619,1,0,0,0,2936,2939,3,622,311,0,2937,
2939,3,624,312,0,2938,2936,1,0,0,0,2938,2937,1,0,0,0,2939,621,1,0,0,0,2940,
2941,3,634,317,0,2941,2942,3,628,314,0,2942,2943,3,636,318,0,2943,623,1,
0,0,0,2944,2945,3,636,318,0,2945,2946,3,630,315,0,2946,2947,3,634,317,0,
2947,625,1,0,0,0,2948,2949,3,634,317,0,2949,2950,3,632,316,0,2950,2951,3,
636,318,0,2951,627,1,0,0,0,2952,2953,5,344,0,0,2953,2954,3,610,305,0,2954,
2955,5,329,0,0,2955,629,1,0,0,0,2956,2957,5,338,0,0,2957,2958,3,610,305,
0,2958,2959,5,348,0,0,2959,631,1,0,0,0,2960,2961,5,355,0,0,2961,2962,3,610,
305,0,2962,2963,5,349,0,0,2963,633,1,0,0,0,2964,2965,5,371,0,0,2965,2966,
3,656,328,0,2966,2967,5,382,0,0,2967,2974,1,0,0,0,2968,2970,5,371,0,0,2969,
2971,3,590,295,0,2970,2969,1,0,0,0,2970,2971,1,0,0,0,2971,2972,1,0,0,0,2972,
2974,5,382,0,0,2973,2964,1,0,0,0,2973,2968,1,0,0,0,2974,635,1,0,0,0,2975,
2976,5,371,0,0,2976,2977,3,658,329,0,2977,2978,5,382,0,0,2978,2985,1,0,0,
0,2979,2981,5,371,0,0,2980,2982,3,590,295,0,2981,2980,1,0,0,0,2981,2982,
1,0,0,0,2982,2983,1,0,0,0,2983,2985,5,382,0,0,2984,2975,1,0,0,0,2984,2979,
1,0,0,0,2985,637,1,0,0,0,2986,2987,7,13,0,0,2987,639,1,0,0,0,2988,2989,5,
280,0,0,2989,2990,3,642,321,0,2990,641,1,0,0,0,2991,2994,3,644,322,0,2992,
2994,3,650,325,0,2993,2991,1,0,0,0,2993,2992,1,0,0,0,2994,643,1,0,0,0,2995,
2998,3,646,323,0,2996,2998,3,648,324,0,2997,2995,1,0,0,0,2997,2996,1,0,0,
0,2998,645,1,0,0,0,2999,3000,5,371,0,0,3000,3001,3,656,328,0,3001,3002,3,
652,326,0,3002,3003,3,658,329,0,3003,3004,5,382,0,0,3004,647,1,0,0,0,3005,
3006,5,371,0,0,3006,3007,3,658,329,0,3007,3008,5,336,0,0,3008,3009,3,656,
328,0,3009,3010,5,382,0,0,3010,649,1,0,0,0,3011,3012,5,371,0,0,3012,3013,
3,656,328,0,3013,3014,3,654,327,0,3014,3015,3,658,329,0,3015,3016,5,382,
0,0,3016,651,1,0,0,0,3017,3018,7,14,0,0,3018,653,1,0,0,0,3019,3020,7,15,
0,0,3020,655,1,0,0,0,3021,3022,3,1114,557,0,3022,657,1,0,0,0,3023,3024,3,
1114,557,0,3024,659,1,0,0,0,3025,3026,5,292,0,0,3026,3033,3,1082,541,0,3027,
3028,5,294,0,0,3028,3033,3,662,331,0,3029,3030,3,390,195,0,3030,3031,3,662,
331,0,3031,3033,1,0,0,0,3032,3025,1,0,0,0,3032,3027,1,0,0,0,3032,3029,1,
0,0,0,3033,661,1,0,0,0,3034,3039,3,1082,541,0,3035,3036,5,358,0,0,3036,3038,
3,1082,541,0,3037,3035,1,0,0,0,3038,3041,1,0,0,0,3039,3037,1,0,0,0,3039,
3040,1,0,0,0,3040,663,1,0,0,0,3041,3039,1,0,0,0,3042,3044,5,369,0,0,3043,
3045,3,666,333,0,3044,3043,1,0,0,0,3044,3045,1,0,0,0,3045,3046,1,0,0,0,3046,
3047,5,380,0,0,3047,665,1,0,0,0,3048,3053,3,668,334,0,3049,3050,5,361,0,
0,3050,3052,3,668,334,0,3051,3049,1,0,0,0,3052,3055,1,0,0,0,3053,3051,1,
0,0,0,3053,3054,1,0,0,0,3054,667,1,0,0,0,3055,3053,1,0,0,0,3056,3058,3,1084,
542,0,3057,3059,3,676,338,0,3058,3057,1,0,0,0,3058,3059,1,0,0,0,3059,3060,
1,0,0,0,3060,3061,3,670,335,0,3061,669,1,0,0,0,3062,3063,3,674,337,0,3063,
671,1,0,0,0,3064,3066,5,278,0,0,3065,3064,1,0,0,0,3065,3066,1,0,0,0,3066,
3067,1,0,0,0,3067,3068,5,313,0,0,3068,3069,3,766,383,0,3069,673,1,0,0,0,
3070,3071,6,337,-1,0,3071,3128,3,678,339,0,3072,3128,3,758,379,0,3073,3074,
3,760,380,0,3074,3075,5,372,0,0,3075,3076,3,674,337,0,3076,3081,5,367,0,
0,3077,3078,5,370,0,0,3078,3079,3,688,344,0,3079,3080,5,381,0,0,3080,3082,
1,0,0,0,3081,3077,1,0,0,0,3081,3082,1,0,0,0,3082,3084,1,0,0,0,3083,3085,
3,770,385,0,3084,3083,1,0,0,0,3084,3085,1,0,0,0,3085,3128,1,0,0,0,3086,3091,
3,760,380,0,3087,3088,5,370,0,0,3088,3089,3,688,344,0,3089,3090,5,381,0,
0,3090,3092,1,0,0,0,3091,3087,1,0,0,0,3091,3092,1,0,0,0,3092,3094,1,0,0,
0,3093,3095,3,770,385,0,3094,3093,1,0,0,0,3094,3095,1,0,0,0,3095,3128,1,
0,0,0,3096,3128,3,764,382,0,3097,3099,5,25,0,0,3098,3100,5,225,0,0,3099,
3098,1,0,0,0,3099,3100,1,0,0,0,3100,3102,1,0,0,0,3101,3103,3,770,385,0,3102,
3101,1,0,0,0,3102,3103,1,0,0,0,3103,3128,1,0,0,0,3104,3106,5,25,0,0,3105,
3104,1,0,0,0,3105,3106,1,0,0,0,3106,3107,1,0,0,0,3107,3108,5,305,0,0,3108,
3110,5,225,0,0,3109,3111,3,770,385,0,3110,3109,1,0,0,0,3110,3111,1,0,0,0,
3111,3128,1,0,0,0,3112,3114,5,25,0,0,3113,3115,5,225,0,0,3114,3113,1,0,0,
0,3114,3115,1,0,0,0,3115,3116,1,0,0,0,3116,3117,5,372,0,0,3117,3122,3,674,
337,0,3118,3119,5,386,0,0,3119,3121,3,674,337,0,3120,3118,1,0,0,0,3121,3124,
1,0,0,0,3122,3120,1,0,0,0,3122,3123,1,0,0,0,3123,3125,1,0,0,0,3124,3122,
1,0,0,0,3125,3126,5,367,0,0,3126,3128,1,0,0,0,3127,3070,1,0,0,0,3127,3072,
1,0,0,0,3127,3073,1,0,0,0,3127,3086,1,0,0,0,3127,3096,1,0,0,0,3127,3097,
1,0,0,0,3127,3105,1,0,0,0,3127,3112,1,0,0,0,3128,3145,1,0,0,0,3129,3130,
10,1,0,0,3130,3131,5,386,0,0,3131,3144,3,674,337,2,3132,3133,10,7,0,0,3133,
3138,3,760,380,0,3134,3135,5,370,0,0,3135,3136,3,688,344,0,3136,3137,5,381,
0,0,3137,3139,1,0,0,0,3138,3134,1,0,0,0,3138,3139,1,0,0,0,3139,3141,1,0,
0,0,3140,3142,3,770,385,0,3141,3140,1,0,0,0,3141,3142,1,0,0,0,3142,3144,
1,0,0,0,3143,3129,1,0,0,0,3143,3132,1,0,0,0,3144,3147,1,0,0,0,3145,3143,
1,0,0,0,3145,3146,1,0,0,0,3146,675,1,0,0,0,3147,3145,1,0,0,0,3148,3149,7,
16,0,0,3149,677,1,0,0,0,3150,3158,3,680,340,0,3151,3158,3,682,341,0,3152,
3158,3,684,342,0,3153,3158,3,692,346,0,3154,3158,3,712,356,0,3155,3158,3,
730,365,0,3156,3158,3,732,366,0,3157,3150,1,0,0,0,3157,3151,1,0,0,0,3157,
3152,1,0,0,0,3157,3153,1,0,0,0,3157,3154,1,0,0,0,3157,3155,1,0,0,0,3157,
3156,1,0,0,0,3158,679,1,0,0,0,3159,3161,7,17,0,0,3160,3162,3,770,385,0,3161,
3160,1,0,0,0,3161,3162,1,0,0,0,3162,681,1,0,0,0,3163,3173,5,202,0,0,3164,
3168,5,371,0,0,3165,3166,3,686,343,0,3166,3167,5,361,0,0,3167,3169,1,0,0,
0,3168,3165,1,0,0,0,3168,3169,1,0,0,0,3169,3170,1,0,0,0,3170,3171,3,688,
344,0,3171,3172,5,382,0,0,3172,3174,1,0,0,0,3173,3164,1,0,0,0,3173,3174,
1,0,0,0,3174,3176,1,0,0,0,3175,3177,3,770,385,0,3176,3175,1,0,0,0,3176,3177,
1,0,0,0,3177,3199,1,0,0,0,3178,3183,5,50,0,0,3179,3180,5,371,0,0,3180,3181,
3,690,345,0,3181,3182,5,382,0,0,3182,3184,1,0,0,0,3183,3179,1,0,0,0,3183,
3184,1,0,0,0,3184,3186,1,0,0,0,3185,3187,3,770,385,0,3186,3185,1,0,0,0,3186,
3187,1,0,0,0,3187,3199,1,0,0,0,3188,3193,5,227,0,0,3189,3190,5,371,0,0,3190,
3191,3,688,344,0,3191,3192,5,382,0,0,3192,3194,1,0,0,0,3193,3189,1,0,0,0,
3193,3194,1,0,0,0,3194,3196,1,0,0,0,3195,3197,3,770,385,0,3196,3195,1,0,
0,0,3196,3197,1,0,0,0,3197,3199,1,0,0,0,3198,3163,1,0,0,0,3198,3178,1,0,
0,0,3198,3188,1,0,0,0,3199,683,1,0,0,0,3200,3210,5,43,0,0,3201,3205,5,371,
0,0,3202,3203,3,686,343,0,3203,3204,5,361,0,0,3204,3206,1,0,0,0,3205,3202,
1,0,0,0,3205,3206,1,0,0,0,3206,3207,1,0,0,0,3207,3208,3,688,344,0,3208,3209,
5,382,0,0,3209,3211,1,0,0,0,3210,3201,1,0,0,0,3210,3211,1,0,0,0,3211,3213,
1,0,0,0,3212,3214,3,770,385,0,3213,3212,1,0,0,0,3213,3214,1,0,0,0,3214,3236,
1,0,0,0,3215,3220,5,36,0,0,3216,3217,5,371,0,0,3217,3218,3,690,345,0,3218,
3219,5,382,0,0,3219,3221,1,0,0,0,3220,3216,1,0,0,0,3220,3221,1,0,0,0,3221,
3223,1,0,0,0,3222,3224,3,770,385,0,3223,3222,1,0,0,0,3223,3224,1,0,0,0,3224,
3236,1,0,0,0,3225,3230,5,226,0,0,3226,3227,5,371,0,0,3227,3228,3,688,344,
0,3228,3229,5,382,0,0,3229,3231,1,0,0,0,3230,3226,1,0,0,0,3230,3231,1,0,
0,0,3231,3233,1,0,0,0,3232,3234,3,770,385,0,3233,3232,1,0,0,0,3233,3234,
1,0,0,0,3234,3236,1,0,0,0,3235,3200,1,0,0,0,3235,3215,1,0,0,0,3235,3225,
1,0,0,0,3236,685,1,0,0,0,3237,3238,3,1126,563,0,3238,687,1,0,0,0,3239,3240,
3,1126,563,0,3240,689,1,0,0,0,3241,3242,3,1126,563,0,3242,691,1,0,0,0,3243,
3246,3,694,347,0,3244,3246,3,710,355,0,3245,3243,1,0,0,0,3245,3244,1,0,0,
0,3246,693,1,0,0,0,3247,3250,3,696,348,0,3248,3250,3,704,352,0,3249,3247,
1,0,0,0,3249,3248,1,0,0,0,3250,695,1,0,0,0,3251,3254,3,698,349,0,3252,3254,
3,700,350,0,3253,3251,1,0,0,0,3253,3252,1,0,0,0,3254,697,1,0,0,0,3255,3257,
5,113,0,0,3256,3258,3,770,385,0,3257,3256,1,0,0,0,3257,3258,1,0,0,0,3258,
3302,1,0,0,0,3259,3261,5,115,0,0,3260,3262,3,770,385,0,3261,3260,1,0,0,0,
3261,3262,1,0,0,0,3262,3302,1,0,0,0,3263,3265,5,117,0,0,3264,3266,3,770,
385,0,3265,3264,1,0,0,0,3265,3266,1,0,0,0,3266,3302,1,0,0,0,3267,3269,5,
119,0,0,3268,3270,3,770,385,0,3269,3268,1,0,0,0,3269,3270,1,0,0,0,3270,3302,
1,0,0,0,3271,3273,5,121,0,0,3272,3274,3,770,385,0,3273,3272,1,0,0,0,3273,
3274,1,0,0,0,3274,3302,1,0,0,0,3275,3277,5,123,0,0,3276,3278,3,770,385,0,
3277,3276,1,0,0,0,3277,3278,1,0,0,0,3278,3302,1,0,0,0,3279,3281,5,197,0,
0,3280,3282,3,770,385,0,3281,3280,1,0,0,0,3281,3282,1,0,0,0,3282,3302,1,
0,0,0,3283,3288,5,111,0,0,3284,3285,5,371,0,0,3285,3286,3,706,353,0,3286,
3287,5,382,0,0,3287,3289,1,0,0,0,3288,3284,1,0,0,0,3288,3289,1,0,0,0,3289,
3291,1,0,0,0,3290,3292,3,770,385,0,3291,3290,1,0,0,0,3291,3292,1,0,0,0,3292,
3302,1,0,0,0,3293,3295,5,35,0,0,3294,3296,3,770,385,0,3295,3294,1,0,0,0,
3295,3296,1,0,0,0,3296,3302,1,0,0,0,3297,3299,5,191,0,0,3298,3297,1,0,0,
0,3298,3299,1,0,0,0,3299,3300,1,0,0,0,3300,3302,3,702,351,0,3301,3255,1,
0,0,0,3301,3259,1,0,0,0,3301,3263,1,0,0,0,3301,3267,1,0,0,0,3301,3271,1,
0,0,0,3301,3275,1,0,0,0,3301,3279,1,0,0,0,3301,3283,1,0,0,0,3301,3293,1,
0,0,0,3301,3298,1,0,0,0,3302,699,1,0,0,0,3303,3305,5,214,0,0,3304,3306,3,
770,385,0,3305,3304,1,0,0,0,3305,3306,1,0,0,0,3306,3348,1,0,0,0,3307,3309,
5,215,0,0,3308,3310,3,770,385,0,3309,3308,1,0,0,0,3309,3310,1,0,0,0,3310,
3348,1,0,0,0,3311,3313,5,216,0,0,3312,3314,3,770,385,0,3313,3312,1,0,0,0,
3313,3314,1,0,0,0,3314,3348,1,0,0,0,3315,3317,5,217,0,0,3316,3318,3,770,
385,0,3317,3316,1,0,0,0,3317,3318,1,0,0,0,3318,3348,1,0,0,0,3319,3321,5,
218,0,0,3320,3322,3,770,385,0,3321,3320,1,0,0,0,3321,3322,1,0,0,0,3322,3348,
1,0,0,0,3323,3325,5,219,0,0,3324,3326,3,770,385,0,3325,3324,1,0,0,0,3325,
3326,1,0,0,0,3326,3348,1,0,0,0,3327,3329,5,224,0,0,3328,3330,3,770,385,0,
3329,3328,1,0,0,0,3329,3330,1,0,0,0,3330,3348,1,0,0,0,3331,3336,5,213,0,
0,3332,3333,5,371,0,0,3333,3334,3,706,353,0,3334,3335,5,382,0,0,3335,3337,
1,0,0,0,3336,3332,1,0,0,0,3336,3337,1,0,0,0,3337,3339,1,0,0,0,3338,3340,
3,770,385,0,3339,3338,1,0,0,0,3339,3340,1,0,0,0,3340,3348,1,0,0,0,3341,3343,
5,212,0,0,3342,3344,3,770,385,0,3343,3342,1,0,0,0,3343,3344,1,0,0,0,3344,
3348,1,0,0,0,3345,3346,5,221,0,0,3346,3348,3,702,351,0,3347,3303,1,0,0,0,
3347,3307,1,0,0,0,3347,3311,1,0,0,0,3347,3315,1,0,0,0,3347,3319,1,0,0,0,
3347,3323,1,0,0,0,3347,3327,1,0,0,0,3347,3331,1,0,0,0,3347,3341,1,0,0,0,
3347,3345,1,0,0,0,3348,701,1,0,0,0,3349,3351,5,114,0,0,3350,3352,3,770,385,
0,3351,3350,1,0,0,0,3351,3352,1,0,0,0,3352,3394,1,0,0,0,3353,3355,5,116,
0,0,3354,3356,3,770,385,0,3355,3354,1,0,0,0,3355,3356,1,0,0,0,3356,3394,
1,0,0,0,3357,3359,5,118,0,0,3358,3360,3,770,385,0,3359,3358,1,0,0,0,3359,
3360,1,0,0,0,3360,3394,1,0,0,0,3361,3363,5,120,0,0,3362,3364,3,770,385,0,
3363,3362,1,0,0,0,3363,3364,1,0,0,0,3364,3394,1,0,0,0,3365,3367,5,122,0,
0,3366,3368,3,770,385,0,3367,3366,1,0,0,0,3367,3368,1,0,0,0,3368,3394,1,
0,0,0,3369,3371,5,124,0,0,3370,3372,3,770,385,0,3371,3370,1,0,0,0,3371,3372,
1,0,0,0,3372,3394,1,0,0,0,3373,3374,5,196,0,0,3374,3376,5,112,0,0,3375,3377,
3,770,385,0,3376,3375,1,0,0,0,3376,3377,1,0,0,0,3377,3394,1,0,0,0,3378,3383,
5,112,0,0,3379,3380,5,371,0,0,3380,3381,3,706,353,0,3381,3382,5,382,0,0,
3382,3384,1,0,0,0,3383,3379,1,0,0,0,3383,3384,1,0,0,0,3384,3386,1,0,0,0,
3385,3387,3,770,385,0,3386,3385,1,0,0,0,3386,3387,1,0,0,0,3387,3394,1,0,
0,0,3388,3389,5,34,0,0,3389,3391,5,112,0,0,3390,3392,3,770,385,0,3391,3390,
1,0,0,0,3391,3392,1,0,0,0,3392,3394,1,0,0,0,3393,3349,1,0,0,0,3393,3353,
1,0,0,0,3393,3357,1,0,0,0,3393,3361,1,0,0,0,3393,3365,1,0,0,0,3393,3369,
1,0,0,0,3393,3373,1,0,0,0,3393,3378,1,0,0,0,3393,3388,1,0,0,0,3394,703,1,
0,0,0,3395,3406,7,18,0,0,3396,3397,5,371,0,0,3397,3400,3,706,353,0,3398,
3399,5,361,0,0,3399,3401,3,708,354,0,3400,3398,1,0,0,0,3400,3401,1,0,0,0,
3401,3402,1,0,0,0,3402,3404,5,382,0,0,3403,3405,3,770,385,0,3404,3403,1,
0,0,0,3404,3405,1,0,0,0,3405,3407,1,0,0,0,3406,3396,1,0,0,0,3406,3407,1,
0,0,0,3407,705,1,0,0,0,3408,3409,3,1128,564,0,3409,707,1,0,0,0,3410,3411,
3,1128,564,0,3411,709,1,0,0,0,3412,3414,5,94,0,0,3413,3415,3,770,385,0,3414,
3413,1,0,0,0,3414,3415,1,0,0,0,3415,3458,1,0,0,0,3416,3418,5,95,0,0,3417,
3419,3,770,385,0,3418,3417,1,0,0,0,3418,3419,1,0,0,0,3419,3458,1,0,0,0,3420,
3422,5,96,0,0,3421,3423,3,770,385,0,3422,3421,1,0,0,0,3422,3423,1,0,0,0,
3423,3458,1,0,0,0,3424,3426,5,97,0,0,3425,3427,3,770,385,0,3426,3425,1,0,
0,0,3426,3427,1,0,0,0,3427,3458,1,0,0,0,3428,3430,5,98,0,0,3429,3431,3,770,
385,0,3430,3429,1,0,0,0,3430,3431,1,0,0,0,3431,3458,1,0,0,0,3432,3441,5,
93,0,0,3433,3434,5,371,0,0,3434,3437,3,706,353,0,3435,3436,5,361,0,0,3436,
3438,3,708,354,0,3437,3435,1,0,0,0,3437,3438,1,0,0,0,3438,3439,1,0,0,0,3439,
3440,5,382,0,0,3440,3442,1,0,0,0,3441,3433,1,0,0,0,3441,3442,1,0,0,0,3442,
3444,1,0,0,0,3443,3445,3,770,385,0,3444,3443,1,0,0,0,3444,3445,1,0,0,0,3445,
3458,1,0,0,0,3446,3448,5,175,0,0,3447,3449,3,770,385,0,3448,3447,1,0,0,0,
3448,3449,1,0,0,0,3449,3458,1,0,0,0,3450,3452,5,81,0,0,3451,3453,5,172,0,
0,3452,3451,1,0,0,0,3452,3453,1,0,0,0,3453,3455,1,0,0,0,3454,3456,3,770,
385,0,3455,3454,1,0,0,0,3455,3456,1,0,0,0,3456,3458,1,0,0,0,3457,3412,1,
0,0,0,3457,3416,1,0,0,0,3457,3420,1,0,0,0,3457,3424,1,0,0,0,3457,3428,1,
0,0,0,3457,3432,1,0,0,0,3457,3446,1,0,0,0,3457,3450,1,0,0,0,3458,711,1,0,
0,0,3459,3462,3,714,357,0,3460,3462,3,726,363,0,3461,3459,1,0,0,0,3461,3460,
1,0,0,0,3462,713,1,0,0,0,3463,3469,3,716,358,0,3464,3469,3,718,359,0,3465,
3469,3,720,360,0,3466,3469,3,722,361,0,3467,3469,3,724,362,0,3468,3463,1,
0,0,0,3468,3464,1,0,0,0,3468,3465,1,0,0,0,3468,3466,1,0,0,0,3468,3467,1,
0,0,0,3469,715,1,0,0,0,3470,3471,5,235,0,0,3471,3473,5,71,0,0,3472,3474,
3,770,385,0,3473,3472,1,0,0,0,3473,3474,1,0,0,0,3474,3483,1,0,0,0,3475,3476,
5,208,0,0,3476,3477,5,231,0,0,3477,3478,5,207,0,0,3478,3480,5,324,0,0,3479,
3481,3,770,385,0,3480,3479,1,0,0,0,3480,3481,1,0,0,0,3481,3483,1,0,0,0,3482,
3470,1,0,0,0,3482,3475,1,0,0,0,3483,717,1,0,0,0,3484,3485,5,135,0,0,3485,
3487,5,71,0,0,3486,3488,3,770,385,0,3487,3486,1,0,0,0,3487,3488,1,0,0,0,
3488,3499,1,0,0,0,3489,3493,5,208,0,0,3490,3491,5,322,0,0,3491,3492,5,207,
0,0,3492,3494,5,324,0,0,3493,3490,1,0,0,0,3493,3494,1,0,0,0,3494,3496,1,
0,0,0,3495,3497,3,770,385,0,3496,3495,1,0,0,0,3496,3497,1,0,0,0,3497,3499,
1,0,0,0,3498,3484,1,0,0,0,3498,3489,1,0,0,0,3499,719,1,0,0,0,3500,3502,5,
70,0,0,3501,3503,3,770,385,0,3502,3501,1,0,0,0,3502,3503,1,0,0,0,3503,721,
1,0,0,0,3504,3505,5,235,0,0,3505,3507,5,207,0,0,3506,3508,3,770,385,0,3507,
3506,1,0,0,0,3507,3508,1,0,0,0,3508,3517,1,0,0,0,3509,3510,5,207,0,0,3510,
3511,5,231,0,0,3511,3512,5,207,0,0,3512,3514,5,324,0,0,3513,3515,3,770,385,
0,3514,3513,1,0,0,0,3514,3515,1,0,0,0,3515,3517,1,0,0,0,3516,3504,1,0,0,
0,3516,3509,1,0,0,0,3517,723,1,0,0,0,3518,3519,5,135,0,0,3519,3521,5,207,
0,0,3520,3522,3,770,385,0,3521,3520,1,0,0,0,3521,3522,1,0,0,0,3522,3531,
1,0,0,0,3523,3524,5,207,0,0,3524,3525,5,322,0,0,3525,3526,5,207,0,0,3526,
3528,5,324,0,0,3527,3529,3,770,385,0,3528,3527,1,0,0,0,3528,3529,1,0,0,0,
3529,3531,1,0,0,0,3530,3518,1,0,0,0,3530,3523,1,0,0,0,3531,725,1,0,0,0,3532,
3533,5,83,0,0,3533,3534,5,371,0,0,3534,3535,3,728,364,0,3535,3537,5,382,
0,0,3536,3538,3,770,385,0,3537,3536,1,0,0,0,3537,3538,1,0,0,0,3538,727,1,
0,0,0,3539,3540,5,233,0,0,3540,3541,5,315,0,0,3541,3546,5,148,0,0,3542,3543,
5,72,0,0,3543,3544,5,315,0,0,3544,3546,5,186,0,0,3545,3539,1,0,0,0,3545,
3542,1,0,0,0,3546,729,1,0,0,0,3547,3552,3,738,369,0,3548,3552,3,744,372,
0,3549,3552,3,746,373,0,3550,3552,3,752,376,0,3551,3547,1,0,0,0,3551,3548,
1,0,0,0,3551,3549,1,0,0,0,3551,3550,1,0,0,0,3552,731,1,0,0,0,3553,3556,3,
734,367,0,3554,3556,3,736,368,0,3555,3553,1,0,0,0,3555,3554,1,0,0,0,3556,
733,1,0,0,0,3557,3558,5,154,0,0,3558,735,1,0,0,0,3559,3560,5,154,0,0,3560,
3563,3,770,385,0,3561,3563,5,153,0,0,3562,3559,1,0,0,0,3562,3561,1,0,0,0,
3563,737,1,0,0,0,3564,3567,3,742,371,0,3565,3567,3,740,370,0,3566,3564,1,
0,0,0,3566,3565,1,0,0,0,3567,739,1,0,0,0,3568,3570,5,305,0,0,3569,3568,1,
0,0,0,3569,3570,1,0,0,0,3570,3571,1,0,0,0,3571,3572,5,289,0,0,3572,3574,
3,574,287,0,3573,3575,3,770,385,0,3574,3573,1,0,0,0,3574,3575,1,0,0,0,3575,
741,1,0,0,0,3576,3578,5,25,0,0,3577,3579,5,305,0,0,3578,3577,1,0,0,0,3578,
3579,1,0,0,0,3579,3580,1,0,0,0,3580,3582,5,289,0,0,3581,3583,3,770,385,0,
3582,3581,1,0,0,0,3582,3583,1,0,0,0,3583,743,1,0,0,0,3584,3586,3,672,336,
0,3585,3587,3,770,385,0,3586,3585,1,0,0,0,3586,3587,1,0,0,0,3587,745,1,0,
0,0,3588,3591,3,750,375,0,3589,3591,3,748,374,0,3590,3588,1,0,0,0,3590,3589,
1,0,0,0,3591,747,1,0,0,0,3592,3594,3,582,291,0,3593,3595,3,770,385,0,3594,
3593,1,0,0,0,3594,3595,1,0,0,0,3595,749,1,0,0,0,3596,3598,5,25,0,0,3597,
3596,1,0,0,0,3597,3598,1,0,0,0,3598,3599,1,0,0,0,3599,3601,3,1142,571,0,
3600,3602,3,770,385,0,3601,3600,1,0,0,0,3601,3602,1,0,0,0,3602,751,1,0,0,
0,3603,3606,3,756,378,0,3604,3606,3,754,377,0,3605,3603,1,0,0,0,3605,3604,
1,0,0,0,3606,753,1,0,0,0,3607,3609,3,602,301,0,3608,3610,3,770,385,0,3609,
3608,1,0,0,0,3609,3610,1,0,0,0,3610,755,1,0,0,0,3611,3613,5,25,0,0,3612,
3611,1,0,0,0,3612,3613,1,0,0,0,3613,3614,1,0,0,0,3614,3616,3,1146,573,0,
3615,3617,3,770,385,0,3616,3615,1,0,0,0,3616,3617,1,0,0,0,3617,757,1,0,0,
0,3618,3620,5,166,0,0,3619,3621,3,770,385,0,3620,3619,1,0,0,0,3620,3621,
1,0,0,0,3621,759,1,0,0,0,3622,3624,5,102,0,0,3623,3622,1,0,0,0,3623,3624,
1,0,0,0,3624,3625,1,0,0,0,3625,3626,3,762,381,0,3626,761,1,0,0,0,3627,3628,
7,19,0,0,3628,763,1,0,0,0,3629,3631,5,25,0,0,3630,3629,1,0,0,0,3630,3631,
1,0,0,0,3631,3632,1,0,0,0,3632,3634,5,176,0,0,3633,3635,3,770,385,0,3634,
3633,1,0,0,0,3634,3635,1,0,0,0,3635,3644,1,0,0,0,3636,3638,5,176,0,0,3637,
3636,1,0,0,0,3637,3638,1,0,0,0,3638,3639,1,0,0,0,3639,3641,3,766,383,0,3640,
3642,3,770,385,0,3641,3640,1,0,0,0,3641,3642,1,0,0,0,3642,3644,1,0,0,0,3643,
3630,1,0,0,0,3643,3637,1,0,0,0,3644,765,1,0,0,0,3645,3647,5,369,0,0,3646,
3648,3,768,384,0,3647,3646,1,0,0,0,3647,3648,1,0,0,0,3648,3649,1,0,0,0,3649,
3650,5,380,0,0,3650,767,1,0,0,0,3651,3656,3,772,386,0,3652,3653,5,361,0,
0,3653,3655,3,772,386,0,3654,3652,1,0,0,0,3655,3658,1,0,0,0,3656,3654,1,
0,0,0,3656,3657,1,0,0,0,3657,769,1,0,0,0,3658,3656,1,0,0,0,3659,3660,5,152,
0,0,3660,3661,5,154,0,0,3661,771,1,0,0,0,3662,3664,3,1086,543,0,3663,3665,
3,676,338,0,3664,3663,1,0,0,0,3664,3665,1,0,0,0,3665,3666,1,0,0,0,3666,3667,
3,674,337,0,3667,773,1,0,0,0,3668,3669,3,824,412,0,3669,775,1,0,0,0,3670,
3680,3,782,391,0,3671,3680,3,784,392,0,3672,3680,3,788,394,0,3673,3680,3,
794,397,0,3674,3680,3,798,399,0,3675,3680,3,804,402,0,3676,3680,3,814,407,
0,3677,3680,3,816,408,0,3678,3680,3,818,409,0,3679,3670,1,0,0,0,3679,3671,
1,0,0,0,3679,3672,1,0,0,0,3679,3673,1,0,0,0,3679,3674,1,0,0,0,3679,3675,
1,0,0,0,3679,3676,1,0,0,0,3679,3677,1,0,0,0,3679,3678,1,0,0,0,3680,777,1,
0,0,0,3681,3682,3,780,390,0,3682,3683,3,820,410,0,3683,779,1,0,0,0,3684,
3685,7,20,0,0,3685,781,1,0,0,0,3686,3704,5,89,0,0,3687,3688,5,369,0,0,3688,
3689,3,302,151,0,3689,3690,5,380,0,0,3690,3705,1,0,0,0,3691,3692,5,371,0,
0,3692,3693,3,302,151,0,3693,3694,5,382,0,0,3694,3705,1,0,0,0,3695,3696,
5,369,0,0,3696,3697,3,220,110,0,3697,3698,5,380,0,0,3698,3705,1,0,0,0,3699,
3700,5,371,0,0,3700,3701,3,220,110,0,3701,3702,5,382,0,0,3702,3705,1,0,0,
0,3703,3705,3,56,28,0,3704,3687,1,0,0,0,3704,3691,1,0,0,0,3704,3695,1,0,
0,0,3704,3699,1,0,0,0,3704,3703,1,0,0,0,3705,783,1,0,0,0,3706,3707,3,844,
422,0,3707,3708,3,786,393,0,3708,785,1,0,0,0,3709,3711,5,127,0,0,3710,3712,
5,152,0,0,3711,3710,1,0,0,0,3711,3712,1,0,0,0,3712,3713,1,0,0,0,3713,3714,
5,154,0,0,3714,787,1,0,0,0,3715,3716,3,844,422,0,3716,3717,3,790,395,0,3717,
789,1,0,0,0,3718,3720,5,127,0,0,3719,3721,5,152,0,0,3720,3719,1,0,0,0,3720,
3721,1,0,0,0,3721,3722,1,0,0,0,3722,3723,3,676,338,0,3723,3724,3,674,337,
0,3724,791,1,0,0,0,3725,3727,5,127,0,0,3726,3728,5,152,0,0,3727,3726,1,0,
0,0,3727,3728,1,0,0,0,3728,3730,1,0,0,0,3729,3731,3,1018,509,0,3730,3729,
1,0,0,0,3730,3731,1,0,0,0,3731,3732,1,0,0,0,3732,3733,5,302,0,0,3733,793,
1,0,0,0,3734,3735,3,432,216,0,3735,3736,3,796,398,0,3736,795,1,0,0,0,3737,
3739,5,127,0,0,3738,3740,5,152,0,0,3739,3738,1,0,0,0,3739,3740,1,0,0,0,3740,
3741,1,0,0,0,3741,3742,5,283,0,0,3742,797,1,0,0,0,3743,3744,3,432,216,0,
3744,3745,3,800,400,0,3745,799,1,0,0,0,3746,3747,3,802,401,0,3747,3748,3,
428,214,0,3748,801,1,0,0,0,3749,3751,5,127,0,0,3750,3752,5,152,0,0,3751,
3750,1,0,0,0,3751,3752,1,0,0,0,3752,3753,1,0,0,0,3753,3756,5,293,0,0,3754,
3756,5,360,0,0,3755,3749,1,0,0,0,3755,3754,1,0,0,0,3756,803,1,0,0,0,3757,
3758,3,806,403,0,3758,3759,3,808,404,0,3759,3764,1,0,0,0,3760,3761,3,806,
403,0,3761,3762,3,810,405,0,3762,3764,1,0,0,0,3763,3757,1,0,0,0,3763,3760,
1,0,0,0,3764,805,1,0,0,0,3765,3766,3,432,216,0,3766,807,1,0,0,0,3767,3769,
5,127,0,0,3768,3770,5,152,0,0,3769,3768,1,0,0,0,3769,3770,1,0,0,0,3770,3771,
1,0,0,0,3771,3772,5,312,0,0,3772,3773,5,158,0,0,3773,3774,3,812,406,0,3774,
809,1,0,0,0,3775,3777,5,127,0,0,3776,3778,5,152,0,0,3777,3776,1,0,0,0,3777,
3778,1,0,0,0,3778,3779,1,0,0,0,3779,3780,5,281,0,0,3780,3781,5,158,0,0,3781,
3782,3,812,406,0,3782,811,1,0,0,0,3783,3784,3,432,216,0,3784,813,1,0,0,0,
3785,3786,5,23,0,0,3786,3787,5,371,0,0,3787,3788,3,432,216,0,3788,3789,5,
361,0,0,3789,3794,3,432,216,0,3790,3791,5,361,0,0,3791,3793,3,432,216,0,
3792,3790,1,0,0,0,3793,3796,1,0,0,0,3794,3792,1,0,0,0,3794,3795,1,0,0,0,
3795,3797,1,0,0,0,3796,3794,1,0,0,0,3797,3798,5,382,0,0,3798,815,1,0,0,0,
3799,3800,5,184,0,0,3800,3801,5,371,0,0,3801,3802,3,432,216,0,3802,3803,
5,361,0,0,3803,3808,3,432,216,0,3804,3805,5,361,0,0,3805,3807,3,432,216,
0,3806,3804,1,0,0,0,3807,3810,1,0,0,0,3808,3806,1,0,0,0,3808,3809,1,0,0,
0,3809,3811,1,0,0,0,3810,3808,1,0,0,0,3811,3812,5,382,0,0,3812,817,1,0,0,
0,3813,3814,5,173,0,0,3814,3815,5,371,0,0,3815,3816,3,432,216,0,3816,3817,
5,361,0,0,3817,3818,3,1084,542,0,3818,3819,5,382,0,0,3819,819,1,0,0,0,3820,
3821,6,410,-1,0,3821,3822,7,21,0,0,3822,3839,3,820,410,15,3823,3824,5,152,
0,0,3824,3839,3,820,410,11,3825,3839,3,776,388,0,3826,3828,5,305,0,0,3827,
3826,1,0,0,0,3827,3828,1,0,0,0,3828,3829,1,0,0,0,3829,3830,5,289,0,0,3830,
3839,3,88,44,0,3831,3833,5,278,0,0,3832,3831,1,0,0,0,3832,3833,1,0,0,0,3833,
3834,1,0,0,0,3834,3835,5,313,0,0,3835,3839,3,92,46,0,3836,3839,3,822,411,
0,3837,3839,3,844,422,0,3838,3820,1,0,0,0,3838,3823,1,0,0,0,3838,3825,1,
0,0,0,3838,3827,1,0,0,0,3838,3832,1,0,0,0,3838,3836,1,0,0,0,3838,3837,1,
0,0,0,3839,3867,1,0,0,0,3840,3841,10,14,0,0,3841,3842,7,22,0,0,3842,3866,
3,820,410,15,3843,3844,10,13,0,0,3844,3845,7,21,0,0,3845,3866,3,820,410,
14,3846,3847,10,12,0,0,3847,3848,5,331,0,0,3848,3866,3,820,410,13,3849,3850,
10,9,0,0,3850,3851,5,24,0,0,3851,3866,3,820,410,10,3852,3853,10,8,0,0,3853,
3854,7,23,0,0,3854,3866,3,820,410,9,3855,3856,10,10,0,0,3856,3858,5,127,
0,0,3857,3859,5,152,0,0,3858,3857,1,0,0,0,3858,3859,1,0,0,0,3859,3860,1,
0,0,0,3860,3866,3,952,476,0,3861,3862,10,7,0,0,3862,3866,3,778,389,0,3863,
3864,10,5,0,0,3864,3866,3,792,396,0,3865,3840,1,0,0,0,3865,3843,1,0,0,0,
3865,3846,1,0,0,0,3865,3849,1,0,0,0,3865,3852,1,0,0,0,3865,3855,1,0,0,0,
3865,3861,1,0,0,0,3865,3863,1,0,0,0,3866,3869,1,0,0,0,3867,3865,1,0,0,0,
3867,3868,1,0,0,0,3868,821,1,0,0,0,3869,3867,1,0,0,0,3870,3877,3,956,478,
0,3871,3877,3,1044,522,0,3872,3877,3,1024,512,0,3873,3877,3,1052,526,0,3874,
3877,3,826,413,0,3875,3877,3,930,465,0,3876,3870,1,0,0,0,3876,3871,1,0,0,
0,3876,3872,1,0,0,0,3876,3873,1,0,0,0,3876,3874,1,0,0,0,3876,3875,1,0,0,
0,3877,823,1,0,0,0,3878,3879,3,820,410,0,3879,825,1,0,0,0,3880,3886,3,828,
414,0,3881,3886,3,830,415,0,3882,3886,3,832,416,0,3883,3886,3,834,417,0,
3884,3886,3,836,418,0,3885,3880,1,0,0,0,3885,3881,1,0,0,0,3885,3882,1,0,
0,0,3885,3883,1,0,0,0,3885,3884,1,0,0,0,3886,827,1,0,0,0,3887,3888,7,24,
0,0,3888,3889,5,371,0,0,3889,3890,3,820,410,0,3890,3891,5,361,0,0,3891,3892,
3,1020,510,0,3892,3893,5,382,0,0,3893,829,1,0,0,0,3894,3895,5,210,0,0,3895,
3896,5,371,0,0,3896,3897,3,1010,505,0,3897,3898,5,382,0,0,3898,831,1,0,0,
0,3899,3900,7,25,0,0,3900,3901,5,371,0,0,3901,3902,3,820,410,0,3902,3903,
5,382,0,0,3903,833,1,0,0,0,3904,3905,7,26,0,0,3905,3906,5,371,0,0,3906,3909,
3,820,410,0,3907,3908,5,361,0,0,3908,3910,3,820,410,0,3909,3907,1,0,0,0,
3909,3910,1,0,0,0,3910,3911,1,0,0,0,3911,3912,5,382,0,0,3912,835,1,0,0,0,
3913,3914,5,151,0,0,3914,3915,5,371,0,0,3915,3918,3,820,410,0,3916,3917,
5,361,0,0,3917,3919,3,1018,509,0,3918,3916,1,0,0,0,3918,3919,1,0,0,0,3919,
3920,1,0,0,0,3920,3921,5,382,0,0,3921,837,1,0,0,0,3922,3923,3,844,422,0,
3923,839,1,0,0,0,3924,3925,3,844,422,0,3925,841,1,0,0,0,3926,3927,3,820,
410,0,3927,843,1,0,0,0,3928,3929,6,422,-1,0,3929,3940,3,846,423,0,3930,3940,
3,896,448,0,3931,3940,3,852,426,0,3932,3940,3,918,459,0,3933,3940,3,862,
431,0,3934,3940,3,864,432,0,3935,3940,3,890,445,0,3936,3940,3,912,456,0,
3937,3940,3,860,430,0,3938,3940,3,914,457,0,3939,3928,1,0,0,0,3939,3930,
1,0,0,0,3939,3931,1,0,0,0,3939,3932,1,0,0,0,3939,3933,1,0,0,0,3939,3934,
1,0,0,0,3939,3935,1,0,0,0,3939,3936,1,0,0,0,3939,3937,1,0,0,0,3939,3938,
1,0,0,0,3940,3946,1,0,0,0,3941,3942,10,7,0,0,3942,3943,5,375,0,0,3943,3945,
3,1084,542,0,3944,3941,1,0,0,0,3945,3948,1,0,0,0,3946,3944,1,0,0,0,3946,
3947,1,0,0,0,3947,845,1,0,0,0,3948,3946,1,0,0,0,3949,3950,5,371,0,0,3950,
3951,3,820,410,0,3951,3952,5,382,0,0,3952,847,1,0,0,0,3953,3956,3,850,425,
0,3954,3956,3,914,457,0,3955,3953,1,0,0,0,3955,3954,1,0,0,0,3956,849,1,0,
0,0,3957,3970,3,896,448,0,3958,3970,3,852,426,0,3959,3970,3,918,459,0,3960,
3961,3,844,422,0,3961,3962,5,375,0,0,3962,3963,3,1084,542,0,3963,3970,1,
0,0,0,3964,3970,3,862,431,0,3965,3970,3,864,432,0,3966,3970,3,890,445,0,
3967,3970,3,912,456,0,3968,3970,3,860,430,0,3969,3957,1,0,0,0,3969,3958,
1,0,0,0,3969,3959,1,0,0,0,3969,3960,1,0,0,0,3969,3964,1,0,0,0,3969,3965,
1,0,0,0,3969,3966,1,0,0,0,3969,3967,1,0,0,0,3969,3968,1,0,0,0,3970,851,1,
0,0,0,3971,3974,3,1096,548,0,3972,3974,3,856,428,0,3973,3971,1,0,0,0,3973,
3972,1,0,0,0,3974,853,1,0,0,0,3975,3978,3,1126,563,0,3976,3978,3,858,429,
0,3977,3975,1,0,0,0,3977,3976,1,0,0,0,3978,855,1,0,0,0,3979,3982,3,858,429,
0,3980,3982,5,189,0,0,3981,3979,1,0,0,0,3981,3980,1,0,0,0,3982,857,1,0,0,
0,3983,3984,5,327,0,0,3984,859,1,0,0,0,3985,3986,5,130,0,0,3986,3987,3,228,
114,0,3987,3988,5,109,0,0,3988,3989,3,820,410,0,3989,3990,5,87,0,0,3990,
861,1,0,0,0,3991,3992,5,225,0,0,3992,3993,3,56,28,0,3993,863,1,0,0,0,3994,
3997,3,866,433,0,3995,3997,3,868,434,0,3996,3994,1,0,0,0,3996,3995,1,0,0,
0,3997,865,1,0,0,0,3998,3999,5,156,0,0,3999,4000,5,371,0,0,4000,4001,3,820,
410,0,4001,4002,5,361,0,0,4002,4003,3,820,410,0,4003,4004,5,382,0,0,4004,
4017,1,0,0,0,4005,4006,5,55,0,0,4006,4007,5,371,0,0,4007,4010,3,820,410,
0,4008,4009,5,361,0,0,4009,4011,3,820,410,0,4010,4008,1,0,0,0,4011,4012,
1,0,0,0,4012,4010,1,0,0,0,4012,4013,1,0,0,0,4013,4014,1,0,0,0,4014,4015,
5,382,0,0,4015,4017,1,0,0,0,4016,3998,1,0,0,0,4016,4005,1,0,0,0,4017,867,
1,0,0,0,4018,4021,3,870,435,0,4019,4021,3,872,436,0,4020,4018,1,0,0,0,4020,
4019,1,0,0,0,4021,869,1,0,0,0,4022,4023,5,46,0,0,4023,4025,3,880,440,0,4024,
4026,3,874,437,0,4025,4024,1,0,0,0,4026,4027,1,0,0,0,4027,4025,1,0,0,0,4027,
4028,1,0,0,0,4028,4030,1,0,0,0,4029,4031,3,878,439,0,4030,4029,1,0,0,0,4030,
4031,1,0,0,0,4031,4032,1,0,0,0,4032,4033,5,87,0,0,4033,871,1,0,0,0,4034,
4036,5,46,0,0,4035,4037,3,876,438,0,4036,4035,1,0,0,0,4037,4038,1,0,0,0,
4038,4036,1,0,0,0,4038,4039,1,0,0,0,4039,4041,1,0,0,0,4040,4042,3,878,439,
0,4041,4040,1,0,0,0,4041,4042,1,0,0,0,4042,4043,1,0,0,0,4043,4044,5,87,0,
0,4044,873,1,0,0,0,4045,4046,5,229,0,0,4046,4047,3,882,441,0,4047,4048,5,
206,0,0,4048,4049,3,886,443,0,4049,875,1,0,0,0,4050,4051,5,229,0,0,4051,
4052,3,774,387,0,4052,4053,5,206,0,0,4053,4054,3,886,443,0,4054,877,1,0,
0,0,4055,4056,5,86,0,0,4056,4057,3,886,443,0,4057,879,1,0,0,0,4058,4061,
3,848,424,0,4059,4061,3,432,216,0,4060,4058,1,0,0,0,4060,4059,1,0,0,0,4061,
881,1,0,0,0,4062,4067,3,884,442,0,4063,4064,5,361,0,0,4064,4066,3,884,442,
0,4065,4063,1,0,0,0,4066,4069,1,0,0,0,4067,4065,1,0,0,0,4067,4068,1,0,0,
0,4068,883,1,0,0,0,4069,4067,1,0,0,0,4070,4080,3,848,424,0,4071,4080,3,778,
389,0,4072,4080,3,786,393,0,4073,4080,3,790,395,0,4074,4080,3,792,396,0,
4075,4080,3,796,398,0,4076,4080,3,800,400,0,4077,4080,3,808,404,0,4078,4080,
3,810,405,0,4079,4070,1,0,0,0,4079,4071,1,0,0,0,4079,4072,1,0,0,0,4079,4073,
1,0,0,0,4079,4074,1,0,0,0,4079,4075,1,0,0,0,4079,4076,1,0,0,0,4079,4077,
1,0,0,0,4079,4078,1,0,0,0,4080,885,1,0,0,0,4081,4084,3,888,444,0,4082,4084,
3,1130,565,0,4083,4081,1,0,0,0,4083,4082,1,0,0,0,4084,887,1,0,0,0,4085,4086,
3,820,410,0,4086,889,1,0,0,0,4087,4088,5,47,0,0,4088,4089,5,371,0,0,4089,
4090,3,892,446,0,4090,4091,5,27,0,0,4091,4092,3,894,447,0,4092,4093,5,382,
0,0,4093,891,1,0,0,0,4094,4097,3,820,410,0,4095,4097,3,1130,565,0,4096,4094,
1,0,0,0,4096,4095,1,0,0,0,4097,893,1,0,0,0,4098,4099,3,674,337,0,4099,895,
1,0,0,0,4100,4101,5,62,0,0,4101,4102,5,371,0,0,4102,4103,5,359,0,0,4103,
4107,5,382,0,0,4104,4107,3,898,449,0,4105,4107,3,900,450,0,4106,4100,1,0,
0,0,4106,4104,1,0,0,0,4106,4105,1,0,0,0,4107,897,1,0,0,0,4108,4109,3,902,
451,0,4109,4111,5,371,0,0,4110,4112,3,904,452,0,4111,4110,1,0,0,0,4111,4112,
1,0,0,0,4112,4113,1,0,0,0,4113,4114,3,820,410,0,4114,4115,5,382,0,0,4115,
899,1,0,0,0,4116,4117,3,906,453,0,4117,4118,5,371,0,0,4118,4119,3,908,454,
0,4119,4120,5,361,0,0,4120,4121,3,910,455,0,4121,4122,5,382,0,0,4122,901,
1,0,0,0,4123,4124,7,27,0,0,4124,903,1,0,0,0,4125,4126,7,28,0,0,4126,905,
1,0,0,0,4127,4128,7,29,0,0,4128,907,1,0,0,0,4129,4131,3,904,452,0,4130,4129,
1,0,0,0,4130,4131,1,0,0,0,4131,4132,1,0,0,0,4132,4133,3,954,477,0,4133,909,
1,0,0,0,4134,4135,3,954,477,0,4135,911,1,0,0,0,4136,4137,5,85,0,0,4137,4138,
5,371,0,0,4138,4139,3,432,216,0,4139,4140,5,382,0,0,4140,913,1,0,0,0,4141,
4142,3,1094,547,0,4142,915,1,0,0,0,4143,4144,3,820,410,0,4144,917,1,0,0,
0,4145,4146,3,920,460,0,4146,919,1,0,0,0,4147,4148,5,166,0,0,4148,4149,5,
370,0,0,4149,4150,3,922,461,0,4150,4151,5,381,0,0,4151,921,1,0,0,0,4152,
4156,3,924,462,0,4153,4155,3,926,463,0,4154,4153,1,0,0,0,4155,4158,1,0,0,
0,4156,4154,1,0,0,0,4156,4157,1,0,0,0,4157,923,1,0,0,0,4158,4156,1,0,0,0,
4159,4160,3,838,419,0,4160,925,1,0,0,0,4161,4162,5,361,0,0,4162,4163,3,840,
420,0,4163,4164,5,361,0,0,4164,4165,3,838,419,0,4165,927,1,0,0,0,4166,4167,
3,820,410,0,4167,929,1,0,0,0,4168,4171,3,932,466,0,4169,4171,3,934,467,0,
4170,4168,1,0,0,0,4170,4169,1,0,0,0,4171,931,1,0,0,0,4172,4173,5,210,0,0,
4173,4174,5,371,0,0,4174,4175,3,928,464,0,4175,4176,5,361,0,0,4176,4177,
3,954,477,0,4177,4178,5,382,0,0,4178,933,1,0,0,0,4179,4180,5,287,0,0,4180,
4181,5,371,0,0,4181,4182,3,916,458,0,4182,4183,5,382,0,0,4183,935,1,0,0,
0,4184,4185,3,938,469,0,4185,937,1,0,0,0,4186,4188,3,760,380,0,4187,4186,
1,0,0,0,4187,4188,1,0,0,0,4188,4189,1,0,0,0,4189,4191,5,370,0,0,4190,4192,
3,940,470,0,4191,4190,1,0,0,0,4191,4192,1,0,0,0,4192,4193,1,0,0,0,4193,4194,
5,381,0,0,4194,939,1,0,0,0,4195,4200,3,942,471,0,4196,4197,5,361,0,0,4197,
4199,3,942,471,0,4198,4196,1,0,0,0,4199,4202,1,0,0,0,4200,4198,1,0,0,0,4200,
4201,1,0,0,0,4201,941,1,0,0,0,4202,4200,1,0,0,0,4203,4204,3,820,410,0,4204,
943,1,0,0,0,4205,4207,5,176,0,0,4206,4205,1,0,0,0,4206,4207,1,0,0,0,4207,
4208,1,0,0,0,4208,4209,3,946,473,0,4209,945,1,0,0,0,4210,4212,5,369,0,0,
4211,4213,3,948,474,0,4212,4211,1,0,0,0,4212,4213,1,0,0,0,4213,4214,1,0,
0,0,4214,4215,5,380,0,0,4215,947,1,0,0,0,4216,4221,3,950,475,0,4217,4218,
5,361,0,0,4218,4220,3,950,475,0,4219,4217,1,0,0,0,4220,4223,1,0,0,0,4221,
4219,1,0,0,0,4221,4222,1,0,0,0,4222,949,1,0,0,0,4223,4221,1,0,0,0,4224,4225,
3,1086,543,0,4225,4226,5,360,0,0,4226,4227,3,820,410,0,4227,951,1,0,0,0,
4228,4229,5,2,0,0,4229,953,1,0,0,0,4230,4231,6,477,-1,0,4231,4232,7,21,0,
0,4232,4236,3,954,477,5,4233,4236,3,844,422,0,4234,4236,3,956,478,0,4235,
4230,1,0,0,0,4235,4233,1,0,0,0,4235,4234,1,0,0,0,4236,4245,1,0,0,0,4237,
4238,10,4,0,0,4238,4239,7,22,0,0,4239,4244,3,954,477,5,4240,4241,10,3,0,
0,4241,4242,7,21,0,0,4242,4244,3,954,477,4,4243,4237,1,0,0,0,4243,4240,1,
0,0,0,4244,4247,1,0,0,0,4245,4243,1,0,0,0,4245,4246,1,0,0,0,4246,955,1,0,
0,0,4247,4245,1,0,0,0,4248,4262,3,958,479,0,4249,4262,3,960,480,0,4250,4262,
3,970,485,0,4251,4262,3,972,486,0,4252,4262,3,978,489,0,4253,4262,3,982,
491,0,4254,4262,3,988,494,0,4255,4262,3,990,495,0,4256,4262,3,992,496,0,
4257,4262,3,994,497,0,4258,4262,3,1000,500,0,4259,4262,3,1002,501,0,4260,
4262,3,1004,502,0,4261,4248,1,0,0,0,4261,4249,1,0,0,0,4261,4250,1,0,0,0,
4261,4251,1,0,0,0,4261,4252,1,0,0,0,4261,4253,1,0,0,0,4261,4254,1,0,0,0,
4261,4255,1,0,0,0,4261,4256,1,0,0,0,4261,4257,1,0,0,0,4261,4258,1,0,0,0,
4261,4259,1,0,0,0,4261,4260,1,0,0,0,4262,957,1,0,0,0,4263,4267,3,964,482,
0,4264,4267,3,966,483,0,4265,4267,3,968,484,0,4266,4263,1,0,0,0,4266,4264,
1,0,0,0,4266,4265,1,0,0,0,4267,959,1,0,0,0,4268,4269,5,45,0,0,4269,4270,
5,371,0,0,4270,4271,3,962,481,0,4271,4272,5,382,0,0,4272,4279,1,0,0,0,4273,
4274,5,194,0,0,4274,4275,5,371,0,0,4275,4276,3,928,464,0,4276,4277,5,382,
0,0,4277,4279,1,0,0,0,4278,4268,1,0,0,0,4278,4273,1,0,0,0,4279,961,1,0,0,
0,4280,4281,3,820,410,0,4281,963,1,0,0,0,4282,4283,7,30,0,0,4283,4284,5,
371,0,0,4284,4285,3,1006,503,0,4285,4286,5,382,0,0,4286,965,1,0,0,0,4287,
4288,7,31,0,0,4288,4289,5,371,0,0,4289,4290,3,1008,504,0,4290,4291,5,382,
0,0,4291,967,1,0,0,0,4292,4293,5,167,0,0,4293,4294,5,371,0,0,4294,4295,3,
916,458,0,4295,4296,5,382,0,0,4296,969,1,0,0,0,4297,4298,5,20,0,0,4298,4299,
5,371,0,0,4299,4300,3,820,410,0,4300,4301,5,382,0,0,4301,971,1,0,0,0,4302,
4303,5,147,0,0,4303,4304,5,371,0,0,4304,4305,3,974,487,0,4305,4306,5,361,
0,0,4306,4307,3,976,488,0,4307,4308,5,382,0,0,4308,973,1,0,0,0,4309,4310,
3,954,477,0,4310,975,1,0,0,0,4311,4312,3,954,477,0,4312,977,1,0,0,0,4313,
4314,3,980,490,0,4314,4315,5,371,0,0,4315,4316,3,954,477,0,4316,4317,5,382,
0,0,4317,979,1,0,0,0,4318,4319,7,32,0,0,4319,981,1,0,0,0,4320,4321,5,139,
0,0,4321,4322,5,371,0,0,4322,4323,3,984,492,0,4323,4324,5,361,0,0,4324,4325,
3,986,493,0,4325,4326,5,382,0,0,4326,983,1,0,0,0,4327,4328,3,954,477,0,4328,
985,1,0,0,0,4329,4330,3,954,477,0,4330,987,1,0,0,0,4331,4332,5,140,0,0,4332,
4333,5,371,0,0,4333,4334,3,954,477,0,4334,4335,5,382,0,0,4335,989,1,0,0,
0,4336,4337,5,134,0,0,4337,4338,5,371,0,0,4338,4339,3,954,477,0,4339,4340,
5,382,0,0,4340,991,1,0,0,0,4341,4342,5,90,0,0,4342,4343,5,371,0,0,4343,4344,
3,954,477,0,4344,4345,5,382,0,0,4345,993,1,0,0,0,4346,4347,5,171,0,0,4347,
4348,5,371,0,0,4348,4349,3,996,498,0,4349,4350,5,361,0,0,4350,4351,3,998,
499,0,4351,4352,5,382,0,0,4352,995,1,0,0,0,4353,4354,3,954,477,0,4354,997,
1,0,0,0,4355,4356,3,954,477,0,4356,999,1,0,0,0,4357,4358,5,198,0,0,4358,
4359,5,371,0,0,4359,4360,3,954,477,0,4360,4361,5,382,0,0,4361,1001,1,0,0,
0,4362,4363,5,99,0,0,4363,4364,5,371,0,0,4364,4365,3,954,477,0,4365,4366,
5,382,0,0,4366,1003,1,0,0,0,4367,4368,7,33,0,0,4368,4369,5,371,0,0,4369,
4370,3,954,477,0,4370,4371,5,382,0,0,4371,1005,1,0,0,0,4372,4373,3,820,410,
0,4373,1007,1,0,0,0,4374,4375,3,820,410,0,4375,1009,1,0,0,0,4376,4378,3,
1014,507,0,4377,4376,1,0,0,0,4377,4378,1,0,0,0,4378,4380,1,0,0,0,4379,4381,
3,1016,508,0,4380,4379,1,0,0,0,4380,4381,1,0,0,0,4381,4382,1,0,0,0,4382,
4384,5,101,0,0,4383,4377,1,0,0,0,4383,4384,1,0,0,0,4384,4385,1,0,0,0,4385,
4386,3,1012,506,0,4386,1011,1,0,0,0,4387,4388,3,820,410,0,4388,1013,1,0,
0,0,4389,4390,7,34,0,0,4390,1015,1,0,0,0,4391,4392,3,820,410,0,4392,1017,
1,0,0,0,4393,4394,7,35,0,0,4394,1019,1,0,0,0,4395,4396,3,954,477,0,4396,
1021,1,0,0,0,4397,4398,3,820,410,0,4398,1023,1,0,0,0,4399,4405,3,1026,513,
0,4400,4405,3,1028,514,0,4401,4405,3,1032,516,0,4402,4405,3,1030,515,0,4403,
4405,3,1034,517,0,4404,4399,1,0,0,0,4404,4400,1,0,0,0,4404,4401,1,0,0,0,
4404,4402,1,0,0,0,4404,4403,1,0,0,0,4405,1025,1,0,0,0,4406,4414,5,64,0,0,
4407,4408,5,70,0,0,4408,4410,5,371,0,0,4409,4411,3,1036,518,0,4410,4409,
1,0,0,0,4410,4411,1,0,0,0,4411,4412,1,0,0,0,4412,4414,5,382,0,0,4413,4406,
1,0,0,0,4413,4407,1,0,0,0,4414,1027,1,0,0,0,4415,4423,5,68,0,0,4416,4417,
5,237,0,0,4417,4419,5,371,0,0,4418,4420,3,1038,519,0,4419,4418,1,0,0,0,4419,
4420,1,0,0,0,4420,4421,1,0,0,0,4421,4423,5,382,0,0,4422,4415,1,0,0,0,4422,
4416,1,0,0,0,4423,1029,1,0,0,0,4424,4430,5,137,0,0,4425,4427,5,371,0,0,4426,
4428,3,1038,519,0,4427,4426,1,0,0,0,4427,4428,1,0,0,0,4428,4429,1,0,0,0,
4429,4431,5,382,0,0,4430,4425,1,0,0,0,4430,4431,1,0,0,0,4431,1031,1,0,0,
0,4432,4440,5,69,0,0,4433,4434,5,236,0,0,4434,4436,5,371,0,0,4435,4437,3,
1040,520,0,4436,4435,1,0,0,0,4436,4437,1,0,0,0,4437,4438,1,0,0,0,4438,4440,
5,382,0,0,4439,4432,1,0,0,0,4439,4433,1,0,0,0,4440,1033,1,0,0,0,4441,4449,
5,138,0,0,4442,4443,5,136,0,0,4443,4445,5,371,0,0,4444,4446,3,1040,520,0,
4445,4444,1,0,0,0,4445,4446,1,0,0,0,4446,4447,1,0,0,0,4447,4449,5,382,0,
0,4448,4441,1,0,0,0,4448,4442,1,0,0,0,4449,1035,1,0,0,0,4450,4453,3,1132,
566,0,4451,4453,3,944,472,0,4452,4450,1,0,0,0,4452,4451,1,0,0,0,4453,1037,
1,0,0,0,4454,4457,3,1134,567,0,4455,4457,3,944,472,0,4456,4454,1,0,0,0,4456,
4455,1,0,0,0,4457,1039,1,0,0,0,4458,4461,3,1136,568,0,4459,4461,3,944,472,
0,4460,4458,1,0,0,0,4460,4459,1,0,0,0,4461,1041,1,0,0,0,4462,4463,3,820,
410,0,4463,1043,1,0,0,0,4464,4465,5,84,0,0,4465,4466,5,371,0,0,4466,4467,
3,1046,523,0,4467,4469,5,382,0,0,4468,4470,3,728,364,0,4469,4468,1,0,0,0,
4469,4470,1,0,0,0,4470,1045,1,0,0,0,4471,4472,3,1048,524,0,4472,4473,5,361,
0,0,4473,4474,3,1050,525,0,4474,1047,1,0,0,0,4475,4476,3,1022,511,0,4476,
1049,1,0,0,0,4477,4478,3,1022,511,0,4478,1051,1,0,0,0,4479,4482,3,1054,527,
0,4480,4482,3,970,485,0,4481,4479,1,0,0,0,4481,4480,1,0,0,0,4482,1053,1,
0,0,0,4483,4484,5,83,0,0,4484,4485,5,371,0,0,4485,4486,3,1056,528,0,4486,
4487,5,382,0,0,4487,1055,1,0,0,0,4488,4491,3,1140,570,0,4489,4491,3,944,
472,0,4490,4488,1,0,0,0,4490,4489,1,0,0,0,4491,1057,1,0,0,0,4492,4493,3,
1112,556,0,4493,1059,1,0,0,0,4494,4495,3,1114,557,0,4495,1061,1,0,0,0,4496,
4497,3,1112,556,0,4497,1063,1,0,0,0,4498,4499,3,1112,556,0,4499,1065,1,0,
0,0,4500,4503,3,1114,557,0,4501,4503,3,1068,534,0,4502,4500,1,0,0,0,4502,
4501,1,0,0,0,4503,1067,1,0,0,0,4504,4505,7,36,0,0,4505,1069,1,0,0,0,4506,
4507,3,1112,556,0,4507,1071,1,0,0,0,4508,4509,3,1112,556,0,4509,1073,1,0,
0,0,4510,4511,3,1112,556,0,4511,1075,1,0,0,0,4512,4515,3,1114,557,0,4513,
4515,3,1078,539,0,4514,4512,1,0,0,0,4514,4513,1,0,0,0,4515,1077,1,0,0,0,
4516,4517,7,36,0,0,4517,1079,1,0,0,0,4518,4519,3,1112,556,0,4519,1081,1,
0,0,0,4520,4521,3,1112,556,0,4521,1083,1,0,0,0,4522,4523,3,1112,556,0,4523,
1085,1,0,0,0,4524,4525,3,1112,556,0,4525,1087,1,0,0,0,4526,4527,3,1094,547,
0,4527,1089,1,0,0,0,4528,4529,3,1094,547,0,4529,1091,1,0,0,0,4530,4531,3,
1114,557,0,4531,1093,1,0,0,0,4532,4533,3,1114,557,0,4533,1095,1,0,0,0,4534,
4537,3,1120,560,0,4535,4537,3,1098,549,0,4536,4534,1,0,0,0,4536,4535,1,0,
0,0,4537,1097,1,0,0,0,4538,4547,5,2,0,0,4539,4547,3,1118,559,0,4540,4547,
5,7,0,0,4541,4547,3,1100,550,0,4542,4547,3,1138,569,0,4543,4547,3,1130,565,
0,4544,4547,3,1108,554,0,4545,4547,3,1110,555,0,4546,4538,1,0,0,0,4546,4539,
1,0,0,0,4546,4540,1,0,0,0,4546,4541,1,0,0,0,4546,4542,1,0,0,0,4546,4543,
1,0,0,0,4546,4544,1,0,0,0,4546,4545,1,0,0,0,4547,1099,1,0,0,0,4548,4552,
3,1102,551,0,4549,4552,3,1104,552,0,4550,4552,3,1106,553,0,4551,4548,1,0,
0,0,4551,4549,1,0,0,0,4551,4550,1,0,0,0,4552,1101,1,0,0,0,4553,4554,5,70,
0,0,4554,4555,3,1132,566,0,4555,1103,1,0,0,0,4556,4557,5,207,0,0,4557,4558,
3,1134,567,0,4558,1105,1,0,0,0,4559,4560,7,37,0,0,4560,4561,3,1136,568,0,
4561,1107,1,0,0,0,4562,4563,3,938,469,0,4563,1109,1,0,0,0,4564,4565,3,944,
472,0,4565,1111,1,0,0,0,4566,4570,3,1114,557,0,4567,4570,5,4,0,0,4568,4570,
5,5,0,0,4569,4566,1,0,0,0,4569,4567,1,0,0,0,4569,4568,1,0,0,0,4570,1113,
1,0,0,0,4571,4574,5,325,0,0,4572,4574,3,1148,574,0,4573,4571,1,0,0,0,4573,
4572,1,0,0,0,4574,1115,1,0,0,0,4575,4576,3,1118,559,0,4576,1117,1,0,0,0,
4577,4578,7,38,0,0,4578,1119,1,0,0,0,4579,4582,3,1122,561,0,4580,4582,3,
1124,562,0,4581,4579,1,0,0,0,4581,4580,1,0,0,0,4582,1121,1,0,0,0,4583,4589,
5,8,0,0,4584,4589,5,11,0,0,4585,4589,5,12,0,0,4586,4589,5,14,0,0,4587,4589,
3,1126,563,0,4588,4583,1,0,0,0,4588,4584,1,0,0,0,4588,4585,1,0,0,0,4588,
4586,1,0,0,0,4588,4587,1,0,0,0,4589,1123,1,0,0,0,4590,4591,7,39,0,0,4591,
1125,1,0,0,0,4592,4593,7,40,0,0,4593,1127,1,0,0,0,4594,4595,5,16,0,0,4595,
1129,1,0,0,0,4596,4597,5,154,0,0,4597,1131,1,0,0,0,4598,4599,3,1118,559,
0,4599,1133,1,0,0,0,4600,4601,3,1118,559,0,4601,1135,1,0,0,0,4602,4603,3,
1118,559,0,4603,1137,1,0,0,0,4604,4605,5,83,0,0,4605,4606,3,1140,570,0,4606,
1139,1,0,0,0,4607,4608,3,1118,559,0,4608,1141,1,0,0,0,4609,4610,7,41,0,0,
4610,1143,1,0,0,0,4611,4612,7,42,0,0,4612,1145,1,0,0,0,4613,4614,7,43,0,
0,4614,1147,1,0,0,0,4615,4616,7,44,0,0,4616,1149,1,0,0,0,511,1152,1159,1163,
1168,1173,1178,1181,1186,1188,1192,1195,1199,1207,1213,1227,1230,1237,1250,
1257,1260,1265,1271,1274,1284,1291,1300,1321,1324,1331,1336,1342,1348,1352,
1357,1364,1367,1375,1382,1385,1397,1400,1411,1419,1427,1432,1436,1444,1451,
1459,1465,1471,1476,1479,1484,1487,1490,1494,1497,1501,1505,1508,1511,1514,
1526,1531,1537,1544,1549,1553,1559,1564,1567,1575,1581,1589,1593,1598,1605,
1609,1614,1618,1622,1628,1641,1647,1659,1675,1680,1691,1701,1719,1724,1728,
1732,1736,1738,1744,1749,1756,1772,1776,1781,1785,1792,1796,1813,1818,1825,
1835,1843,1848,1864,1867,1871,1874,1878,1881,1887,1891,1894,1898,1905,1910,
1917,1921,1925,1928,1931,1934,1937,1940,1942,1949,1954,1965,1972,1982,1985,
1992,1995,2001,2010,2016,2020,2027,2040,2050,2055,2060,2064,2067,2071,2081,
2084,2088,2091,2098,2102,2105,2125,2134,2139,2146,2150,2156,2162,2168,2171,
2174,2179,2184,2187,2191,2195,2202,2206,2209,2215,2218,2221,2229,2234,2237,
2242,2245,2250,2253,2257,2260,2263,2275,2282,2284,2289,2298,2303,2307,2314,
2317,2320,2323,2334,2348,2357,2366,2400,2403,2407,2426,2434,2436,2447,2455,
2459,2474,2507,2516,2526,2536,2547,2553,2563,2572,2599,2609,2622,2627,2643,
2647,2663,2668,2671,2681,2694,2700,2709,2715,2722,2727,2734,2742,2745,2753,
2756,2765,2769,2772,2778,2785,2793,2795,2810,2815,2819,2823,2827,2831,2834,
2840,2845,2849,2852,2856,2859,2868,2871,2881,2884,2888,2892,2896,2901,2908,
2911,2915,2918,2925,2928,2938,2970,2973,2981,2984,2993,2997,3032,3039,3044,
3053,3058,3065,3081,3084,3091,3094,3099,3102,3105,3110,3114,3122,3127,3138,
3141,3143,3145,3157,3161,3168,3173,3176,3183,3186,3193,3196,3198,3205,3210,
3213,3220,3223,3230,3233,3235,3245,3249,3253,3257,3261,3265,3269,3273,3277,
3281,3288,3291,3295,3298,3301,3305,3309,3313,3317,3321,3325,3329,3336,3339,
3343,3347,3351,3355,3359,3363,3367,3371,3376,3383,3386,3391,3393,3400,3404,
3406,3414,3418,3422,3426,3430,3437,3441,3444,3448,3452,3455,3457,3461,3468,
3473,3480,3482,3487,3493,3496,3498,3502,3507,3514,3516,3521,3528,3530,3537,
3545,3551,3555,3562,3566,3569,3574,3578,3582,3586,3590,3594,3597,3601,3605,
3609,3612,3616,3620,3623,3630,3634,3637,3641,3643,3647,3656,3664,3679,3704,
3711,3720,3727,3730,3739,3751,3755,3763,3769,3777,3794,3808,3827,3832,3838,
3858,3865,3867,3876,3885,3909,3918,3939,3946,3955,3969,3973,3977,3981,3996,
4012,4016,4020,4027,4030,4038,4041,4060,4067,4079,4083,4096,4106,4111,4130,
4156,4170,4187,4191,4200,4206,4212,4221,4235,4243,4245,4261,4266,4278,4377,
4380,4383,4404,4410,4413,4419,4422,4427,4430,4436,4439,4445,4448,4452,4456,
4460,4469,4481,4490,4502,4514,4536,4546,4551,4569,4573,4581,4588];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

const sharedContextCache = new antlr4.atn.PredictionContextCache();

export default class GQLParser extends antlr4.Parser {

    static grammarFileName = "GQL.g4";
    static literalNames = [ null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, "'ABS'", "'ACOS'", "'ALL'", 
                            "'ALL_DIFFERENT'", "'AND'", "'ANY'", "'ARRAY'", 
                            "'AS'", "'ASC'", "'ASCENDING'", "'ASIN'", "'AT'", 
                            "'ATAN'", "'AVG'", "'BIG'", "'BIGINT'", "'BINARY'", 
                            "'BOOL'", "'BOOLEAN'", "'BOTH'", "'BTRIM'", 
                            "'BY'", "'BYTE_LENGTH'", "'BYTES'", "'CALL'", 
                            "'CARDINALITY'", "'CASE'", "'CAST'", "'CEIL'", 
                            "'CEILING'", "'CHAR'", "'CHAR_LENGTH'", "'CHARACTER_LENGTH'", 
                            "'CHARACTERISTICS'", "'CLOSE'", "'COALESCE'", 
                            "'COLLECT_LIST'", "'COMMIT'", "'COPY'", "'COS'", 
                            "'COSH'", "'COT'", "'COUNT'", "'CREATE'", "'CURRENT_DATE'", 
                            "'CURRENT_GRAPH'", "'CURRENT_PROPERTY_GRAPH'", 
                            "'CURRENT_SCHEMA'", "'CURRENT_TIME'", "'CURRENT_TIMESTAMP'", 
                            "'DATE'", "'DATETIME'", "'DAY'", "'DEC'", "'DECIMAL'", 
                            "'DEGREES'", "'DELETE'", "'DESC'", "'DESCENDING'", 
                            "'DETACH'", "'DISTINCT'", "'DOUBLE'", "'DROP'", 
                            "'DURATION'", "'DURATION_BETWEEN'", "'ELEMENT_ID'", 
                            "'ELSE'", "'END'", "'EXCEPT'", "'EXISTS'", "'EXP'", 
                            "'FILTER'", "'FINISH'", "'FLOAT'", "'FLOAT16'", 
                            "'FLOAT32'", "'FLOAT64'", "'FLOAT128'", "'FLOAT256'", 
                            "'FLOOR'", "'FOR'", "'FROM'", "'GROUP'", "'HAVING'", 
                            "'HOME_GRAPH'", "'HOME_PROPERTY_GRAPH'", "'HOME_SCHEMA'", 
                            "'HOUR'", "'IF'", "'IN'", "'INSERT'", "'INT'", 
                            "'INTEGER'", "'INT8'", "'INTEGER8'", "'INT16'", 
                            "'INTEGER16'", "'INT32'", "'INTEGER32'", "'INT64'", 
                            "'INTEGER64'", "'INT128'", "'INTEGER128'", "'INT256'", 
                            "'INTEGER256'", "'INTERSECT'", "'INTERVAL'", 
                            "'IS'", "'LEADING'", "'LEFT'", "'LET'", "'LIKE'", 
                            "'LIMIT'", "'LIST'", "'LN'", "'LOCAL'", "'LOCAL_DATETIME'", 
                            "'LOCAL_TIME'", "'LOCAL_TIMESTAMP'", "'LOG'", 
                            "'LOG10'", "'LOWER'", "'LTRIM'", "'MATCH'", 
                            "'MAX'", "'MIN'", "'MINUTE'", "'MOD'", "'MONTH'", 
                            "'NEXT'", "'NODETACH'", "'NORMALIZE'", "'NOT'", 
                            "'NOTHING'", "'NULL'", "'NULLS'", "'NULLIF'", 
                            "'OCTET_LENGTH'", "'OF'", "'OFFSET'", "'OPTIONAL'", 
                            "'OR'", "'ORDER'", "'OTHERWISE'", "'PARAMETER'", 
                            "'PARAMETERS'", "'PATH'", "'PATH_LENGTH'", "'PATHS'", 
                            "'PERCENTILE_CONT'", "'PERCENTILE_DISC'", "'POWER'", 
                            "'PRECISION'", "'PROPERTY_EXISTS'", "'RADIANS'", 
                            "'REAL'", "'RECORD'", "'REMOVE'", "'REPLACE'", 
                            "'RESET'", "'RETURN'", "'RIGHT'", "'ROLLBACK'", 
                            "'RTRIM'", "'SAME'", "'SCHEMA'", "'SECOND'", 
                            "'SELECT'", "'SESSION'", "'SESSION_USER'", "'SET'", 
                            "'SIGNED'", "'SIN'", "'SINH'", "'SIZE'", "'SKIP'", 
                            "'SMALL'", "'SMALLINT'", "'SQRT'", "'START'", 
                            "'STDDEV_POP'", "'STDDEV_SAMP'", "'STRING'", 
                            "'SUM'", "'TAN'", "'TANH'", "'THEN'", "'TIME'", 
                            "'TIMESTAMP'", "'TRAILING'", "'TRIM'", "'TYPED'", 
                            "'UBIGINT'", "'UINT'", "'UINT8'", "'UINT16'", 
                            "'UINT32'", "'UINT64'", "'UINT128'", "'UINT256'", 
                            "'UNION'", "'UNSIGNED'", "'UPPER'", "'USE'", 
                            "'USMALLINT'", "'VALUE'", "'VARBINARY'", "'VARCHAR'", 
                            "'VARIABLE'", "'WHEN'", "'WHERE'", "'WITH'", 
                            "'XOR'", "'YEAR'", "'YIELD'", "'ZONED'", "'ZONED_DATETIME'", 
                            "'ZONED_TIME'", "'ABSTRACT'", "'AGGREGATE'", 
                            "'AGGREGATES'", "'ALTER'", "'CATALOG'", "'CLEAR'", 
                            "'CLONE'", "'CONSTRAINT'", "'CURRENT_ROLE'", 
                            "'CURRENT_USER'", "'DATA'", "'DIRECTORY'", "'DRYRUN'", 
                            "'EXACT'", "'EXISTING'", "'FUNCTION'", "'GQLSTATUS'", 
                            "'GRANT'", "'INSTANT'", "'INFINITY'", "'NUMBER'", 
                            "'NUMERIC'", "'ON'", "'OPEN'", "'PARTITION'", 
                            "'PROCEDURE'", "'PRODUCT'", "'PROJECT'", "'QUERY'", 
                            "'RECORDS'", "'REFERENCE'", "'RENAME'", "'REVOKE'", 
                            "'SUBSTRING'", "'SYSTEM_USER'", "'TEMPORAL'", 
                            "'UNIQUE'", "'UNIT'", "'VALUES'", "'ACYCLIC'", 
                            "'BINDING'", "'BINDINGS'", "'CONNECTING'", "'DESTINATION'", 
                            "'DIFFERENT'", "'DIRECTED'", "'EDGE'", "'EDGES'", 
                            "'ELEMENT'", "'ELEMENTS'", "'FIRST'", "'GRAPH'", 
                            "'GROUPS'", "'KEEP'", "'LABEL'", "'LABELED'", 
                            "'LABELS'", "'LAST'", "'NFC'", "'NFD'", "'NFKC'", 
                            "'NFKD'", "'NO'", "'NODE'", "'NORMALIZED'", 
                            "'ONLY'", "'ORDINALITY'", "'PROPERTY'", "'READ'", 
                            "'RELATIONSHIP'", "'RELATIONSHIPS'", "'REPEATABLE'", 
                            "'SHORTEST'", "'SIMPLE'", "'SOURCE'", "'TABLE'", 
                            "'TEMP'", "'TO'", "'TRAIL'", "'TRANSACTION'", 
                            "'TYPE'", "'UNDIRECTED'", "'VERTEX'", "'WALK'", 
                            "'WITHOUT'", "'WRITE'", "'ZONE'", null, null, 
                            null, "'|+|'", "']->'", "']~>'", "'||'", "'::'", 
                            "'$$'", "'..'", "'>='", "'<-'", "'<~'", "'<-['", 
                            "'<~['", "'<->'", "'<-/'", "'<~/'", "'<='", 
                            "'-['", "'-/'", "'<>'", "'->'", "']-'", "']~'", 
                            "'=>'", "'/-'", "'/->'", "'/~'", "'/~>'", "'~['", 
                            "'~>'", "'~/'", "'&'", "'*'", "':'", "','", 
                            "'@'", "'$'", "'\"'", "'='", "'!'", "'>'", "'`'", 
                            "'{'", "'['", "'('", "'<'", "'-'", "'%'", "'.'", 
                            "'+'", "'?'", "'''", "'\\'", "'}'", "']'", "')'", 
                            "'/'", "'~'", "'_'", "'|'" ];
    static symbolicNames = [ null, "IMPLIES", "BOOLEAN_LITERAL", "SINGLE_QUOTED_CHARACTER_SEQUENCE", 
                             "DOUBLE_QUOTED_CHARACTER_SEQUENCE", "ACCENT_QUOTED_CHARACTER_SEQUENCE", 
                             "NO_ESCAPE", "BYTE_STRING_LITERAL", "UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION_WITH_EXACT_NUMBER_SUFFIX", 
                             "UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION_WITHOUT_SUFFIX", 
                             "UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION_WITH_APPROXIMATE_NUMBER_SUFFIX", 
                             "UNSIGNED_DECIMAL_IN_COMMON_NOTATION_WITH_EXACT_NUMBER_SUFFIX", 
                             "UNSIGNED_DECIMAL_IN_COMMON_NOTATION_WITHOUT_SUFFIX", 
                             "UNSIGNED_DECIMAL_IN_COMMON_NOTATION_WITH_APPROXIMATE_NUMBER_SUFFIX", 
                             "UNSIGNED_DECIMAL_INTEGER_WITH_EXACT_NUMBER_SUFFIX", 
                             "UNSIGNED_DECIMAL_INTEGER_WITH_APPROXIMATE_NUMBER_SUFFIX", 
                             "UNSIGNED_DECIMAL_INTEGER", "UNSIGNED_HEXADECIMAL_INTEGER", 
                             "UNSIGNED_OCTAL_INTEGER", "UNSIGNED_BINARY_INTEGER", 
                             "ABS", "ACOS", "ALL", "ALL_DIFFERENT", "AND", 
                             "ANY", "ARRAY", "AS", "ASC", "ASCENDING", "ASIN", 
                             "AT", "ATAN", "AVG", "BIG", "BIGINT", "BINARY", 
                             "BOOL", "BOOLEAN", "BOTH", "BTRIM", "BY", "BYTE_LENGTH", 
                             "BYTES", "CALL", "CARDINALITY", "CASE", "CAST", 
                             "CEIL", "CEILING", "CHAR", "CHAR_LENGTH", "CHARACTER_LENGTH", 
                             "CHARACTERISTICS", "CLOSE", "COALESCE", "COLLECT_LIST", 
                             "COMMIT", "COPY", "COS", "COSH", "COT", "COUNT", 
                             "CREATE", "CURRENT_DATE", "CURRENT_GRAPH", 
                             "CURRENT_PROPERTY_GRAPH", "CURRENT_SCHEMA", 
                             "CURRENT_TIME", "CURRENT_TIMESTAMP", "DATE", 
                             "DATETIME", "DAY", "DEC", "DECIMAL", "DEGREES", 
                             "DELETE", "DESC", "DESCENDING", "DETACH", "DISTINCT", 
                             "DOUBLE", "DROP", "DURATION", "DURATION_BETWEEN", 
                             "ELEMENT_ID", "ELSE", "END", "EXCEPT", "EXISTS", 
                             "EXP", "FILTER", "FINISH", "FLOAT", "FLOAT16", 
                             "FLOAT32", "FLOAT64", "FLOAT128", "FLOAT256", 
                             "FLOOR", "FOR", "FROM", "GROUP", "HAVING", 
                             "HOME_GRAPH", "HOME_PROPERTY_GRAPH", "HOME_SCHEMA", 
                             "HOUR", "IF", "IN", "INSERT", "INT", "INTEGER", 
                             "INT8", "INTEGER8", "INT16", "INTEGER16", "INT32", 
                             "INTEGER32", "INT64", "INTEGER64", "INT128", 
                             "INTEGER128", "INT256", "INTEGER256", "INTERSECT", 
                             "INTERVAL", "IS", "LEADING", "LEFT", "LET", 
                             "LIKE", "LIMIT", "LIST", "LN", "LOCAL", "LOCAL_DATETIME", 
                             "LOCAL_TIME", "LOCAL_TIMESTAMP", "LOG", "LOG10", 
                             "LOWER", "LTRIM", "MATCH", "MAX", "MIN", "MINUTE", 
                             "MOD", "MONTH", "NEXT", "NODETACH", "NORMALIZE", 
                             "NOT", "NOTHING", "NULL", "NULLS", "NULLIF", 
                             "OCTET_LENGTH", "OF", "OFFSET", "OPTIONAL", 
                             "OR", "ORDER", "OTHERWISE", "PARAMETER", "PARAMETERS", 
                             "PATH", "PATH_LENGTH", "PATHS", "PERCENTILE_CONT", 
                             "PERCENTILE_DISC", "POWER", "PRECISION", "PROPERTY_EXISTS", 
                             "RADIANS", "REAL", "RECORD", "REMOVE", "REPLACE", 
                             "RESET", "RETURN", "RIGHT", "ROLLBACK", "RTRIM", 
                             "SAME", "SCHEMA", "SECOND", "SELECT", "SESSION", 
                             "SESSION_USER", "SET", "SIGNED", "SIN", "SINH", 
                             "SIZE", "SKIP_RESERVED_WORD", "SMALL", "SMALLINT", 
                             "SQRT", "START", "STDDEV_POP", "STDDEV_SAMP", 
                             "STRING", "SUM", "TAN", "TANH", "THEN", "TIME", 
                             "TIMESTAMP", "TRAILING", "TRIM", "TYPED", "UBIGINT", 
                             "UINT", "UINT8", "UINT16", "UINT32", "UINT64", 
                             "UINT128", "UINT256", "UNION", "UNSIGNED", 
                             "UPPER", "USE", "USMALLINT", "VALUE", "VARBINARY", 
                             "VARCHAR", "VARIABLE", "WHEN", "WHERE", "WITH", 
                             "XOR", "YEAR", "YIELD", "ZONED", "ZONED_DATETIME", 
                             "ZONED_TIME", "ABSTRACT", "AGGREGATE", "AGGREGATES", 
                             "ALTER", "CATALOG", "CLEAR", "CLONE", "CONSTRAINT", 
                             "CURRENT_ROLE", "CURRENT_USER", "DATA", "DIRECTORY", 
                             "DRYRUN", "EXACT", "EXISTING", "FUNCTION", 
                             "GQLSTATUS", "GRANT", "INSTANT", "INFINITY", 
                             "NUMBER", "NUMERIC", "ON", "OPEN", "PARTITION", 
                             "PROCEDURE", "PRODUCT", "PROJECT", "QUERY", 
                             "RECORDS", "REFERENCE", "RENAME", "REVOKE", 
                             "SUBSTRING", "SYSTEM_USER", "TEMPORAL", "UNIQUE", 
                             "UNIT", "VALUES", "ACYCLIC", "BINDING", "BINDINGS", 
                             "CONNECTING", "DESTINATION", "DIFFERENT", "DIRECTED", 
                             "EDGE", "EDGES", "ELEMENT", "ELEMENTS", "FIRST", 
                             "GRAPH", "GROUPS", "KEEP", "LABEL", "LABELED", 
                             "LABELS", "LAST", "NFC", "NFD", "NFKC", "NFKD", 
                             "NO", "NODE", "NORMALIZED", "ONLY", "ORDINALITY", 
                             "PROPERTY", "READ", "RELATIONSHIP", "RELATIONSHIPS", 
                             "REPEATABLE", "SHORTEST", "SIMPLE", "SOURCE", 
                             "TABLE", "TEMP", "TO", "TRAIL", "TRANSACTION", 
                             "TYPE", "UNDIRECTED", "VERTEX", "WALK", "WITHOUT", 
                             "WRITE", "ZONE", "REGULAR_IDENTIFIER", "SUBSTITUTED_PARAMETER_REFERENCE", 
                             "GENERAL_PARAMETER_REFERENCE", "MULTISET_ALTERNATION_OPERATOR", 
                             "BRACKET_RIGHT_ARROW", "BRACKET_TILDE_RIGHT_ARROW", 
                             "CONCATENATION_OPERATOR", "DOUBLE_COLON", "DOUBLE_DOLLAR_SIGN", 
                             "DOUBLE_PERIOD", "GREATER_THAN_OR_EQUALS_OPERATOR", 
                             "LEFT_ARROW", "LEFT_ARROW_TILDE", "LEFT_ARROW_BRACKET", 
                             "LEFT_ARROW_TILDE_BRACKET", "LEFT_MINUS_RIGHT", 
                             "LEFT_MINUS_SLASH", "LEFT_TILDE_SLASH", "LESS_THAN_OR_EQUALS_OPERATOR", 
                             "MINUS_LEFT_BRACKET", "MINUS_SLASH", "NOT_EQUALS_OPERATOR", 
                             "RIGHT_ARROW", "RIGHT_BRACKET_MINUS", "RIGHT_BRACKET_TILDE", 
                             "RIGHT_DOUBLE_ARROW", "SLASH_MINUS", "SLASH_MINUS_RIGHT", 
                             "SLASH_TILDE", "SLASH_TILDE_RIGHT", "TILDE_LEFT_BRACKET", 
                             "TILDE_RIGHT_ARROW", "TILDE_SLASH", "AMPERSAND", 
                             "ASTERISK", "COLON", "COMMA", "COMMERCIAL_AT", 
                             "DOLLAR_SIGN", "DOUBLE_QUOTE", "EQUALS_OPERATOR", 
                             "EXCLAMATION_MARK", "RIGHT_ANGLE_BRACKET", 
                             "GRAVE_ACCENT", "LEFT_BRACE", "LEFT_BRACKET", 
                             "LEFT_PAREN", "LEFT_ANGLE_BRACKET", "MINUS_SIGN", 
                             "PERCENT", "PERIOD", "PLUS_SIGN", "QUESTION_MARK", 
                             "QUOTE", "REVERSE_SOLIDUS", "RIGHT_BRACE", 
                             "RIGHT_BRACKET", "RIGHT_PAREN", "SOLIDUS", 
                             "TILDE", "UNDERSCORE", "VERTICAL_BAR", "SP", 
                             "WHITESPACE", "BRACKETED_COMMENT", "SIMPLE_COMMENT_SOLIDUS", 
                             "SIMPLE_COMMENT_MINUS" ];
    static ruleNames = [ "gqlProgram", "programActivity", "sessionActivity", 
                         "transactionActivity", "endTransactionCommand", 
                         "sessionSetCommand", "sessionSetSchemaClause", 
                         "sessionSetGraphClause", "sessionSetTimeZoneClause", 
                         "setTimeZoneValue", "sessionSetParameterClause", 
                         "sessionSetGraphParameterClause", "sessionSetBindingTableParameterClause", 
                         "sessionSetValueParameterClause", "sessionSetParameterName", 
                         "sessionResetCommand", "sessionResetArguments", 
                         "sessionCloseCommand", "sessionParameterSpecification", 
                         "startTransactionCommand", "transactionCharacteristics", 
                         "transactionMode", "transactionAccessMode", "rollbackCommand", 
                         "commitCommand", "nestedProcedureSpecification", 
                         "procedureSpecification", "nestedDataModifyingProcedureSpecification", 
                         "nestedQuerySpecification", "procedureBody", "bindingVariableDefinitionBlock", 
                         "bindingVariableDefinition", "statementBlock", 
                         "statement", "nextStatement", "graphVariableDefinition", 
                         "optTypedGraphInitializer", "graphInitializer", 
                         "bindingTableVariableDefinition", "optTypedBindingTableInitializer", 
                         "bindingTableInitializer", "valueVariableDefinition", 
                         "optTypedValueInitializer", "valueInitializer", 
                         "graphExpression", "currentGraph", "bindingTableExpression", 
                         "nestedBindingTableQuerySpecification", "objectExpressionPrimary", 
                         "linearCatalogModifyingStatement", "simpleCatalogModifyingStatement", 
                         "primitiveCatalogModifyingStatement", "createSchemaStatement", 
                         "dropSchemaStatement", "createGraphStatement", 
                         "openGraphType", "ofGraphType", "graphTypeLikeGraph", 
                         "graphSource", "dropGraphStatement", "createGraphTypeStatement", 
                         "graphTypeSource", "copyOfGraphType", "dropGraphTypeStatement", 
                         "callCatalogModifyingProcedureStatement", "linearDataModifyingStatement", 
                         "focusedLinearDataModifyingStatement", "focusedLinearDataModifyingStatementBody", 
                         "focusedNestedDataModifyingProcedureSpecification", 
                         "ambientLinearDataModifyingStatement", "ambientLinearDataModifyingStatementBody", 
                         "simpleLinearDataAccessingStatement", "simpleDataAccessingStatement", 
                         "simpleDataModifyingStatement", "primitiveDataModifyingStatement", 
                         "insertStatement", "setStatement", "setItemList", 
                         "setItem", "setPropertyItem", "setAllPropertiesItem", 
                         "setLabelItem", "removeStatement", "removeItemList", 
                         "removeItem", "removePropertyItem", "removeLabelItem", 
                         "deleteStatement", "deleteItemList", "deleteItem", 
                         "callDataModifyingProcedureStatement", "compositeQueryStatement", 
                         "compositeQueryExpression", "queryConjunction", 
                         "setOperator", "compositeQueryPrimary", "linearQueryStatement", 
                         "focusedLinearQueryStatement", "focusedLinearQueryStatementPart", 
                         "focusedLinearQueryAndPrimitiveResultStatementPart", 
                         "focusedPrimitiveResultStatement", "focusedNestedQuerySpecification", 
                         "ambientLinearQueryStatement", "simpleLinearQueryStatement", 
                         "simpleQueryStatement", "primitiveQueryStatement", 
                         "matchStatement", "simpleMatchStatement", "optionalMatchStatement", 
                         "optionalOperand", "matchStatementBlock", "callQueryStatement", 
                         "filterStatement", "letStatement", "letVariableDefinitionList", 
                         "letVariableDefinition", "forStatement", "forItem", 
                         "forItemAlias", "forItemSource", "forOrdinalityOrOffset", 
                         "orderByAndPageStatement", "primitiveResultStatement", 
                         "returnStatement", "returnStatementBody", "returnItemList", 
                         "returnItem", "returnItemAlias", "selectStatement", 
                         "selectItemList", "selectItem", "selectItemAlias", 
                         "havingClause", "selectStatementBody", "selectGraphMatchList", 
                         "selectGraphMatch", "selectQuerySpecification", 
                         "callProcedureStatement", "procedureCall", "inlineProcedureCall", 
                         "variableScopeClause", "bindingVariableReferenceList", 
                         "namedProcedureCall", "procedureArgumentList", 
                         "procedureArgument", "atSchemaClause", "useGraphClause", 
                         "graphPatternBindingTable", "graphPatternYieldClause", 
                         "graphPatternYieldItemList", "graphPatternYieldItem", 
                         "graphPattern", "matchMode", "repeatableElementsMatchMode", 
                         "differentEdgesMatchMode", "elementBindingsOrElements", 
                         "edgeBindingsOrEdges", "pathPatternList", "pathPattern", 
                         "pathVariableDeclaration", "keepClause", "graphPatternWhereClause", 
                         "insertGraphPattern", "insertPathPatternList", 
                         "insertPathPattern", "insertNodePattern", "insertEdgePattern", 
                         "insertEdgePointingLeft", "insertEdgePointingRight", 
                         "insertEdgeUndirected", "insertElementPatternFiller", 
                         "labelAndPropertySetSpecification", "pathPatternPrefix", 
                         "pathModePrefix", "pathMode", "pathSearchPrefix", 
                         "allPathSearch", "pathOrPaths", "anyPathSearch", 
                         "numberOfPaths", "shortestPathSearch", "allShortestPathSearch", 
                         "anyShortestPathSearch", "countedShortestPathSearch", 
                         "countedShortestGroupSearch", "numberOfGroups", 
                         "pathPatternExpression", "pathTerm", "pathFactor", 
                         "pathPrimary", "elementPattern", "nodePattern", 
                         "elementPatternFiller", "elementVariableDeclaration", 
                         "isLabelExpression", "isOrColon", "elementPatternPredicate", 
                         "elementPatternWhereClause", "elementPropertySpecification", 
                         "propertyKeyValuePairList", "propertyKeyValuePair", 
                         "edgePattern", "fullEdgePattern", "fullEdgePointingLeft", 
                         "fullEdgeUndirected", "fullEdgePointingRight", 
                         "fullEdgeLeftOrUndirected", "fullEdgeUndirectedOrRight", 
                         "fullEdgeLeftOrRight", "fullEdgeAnyDirection", 
                         "abbreviatedEdgePattern", "parenthesizedPathPatternExpression", 
                         "subpathVariableDeclaration", "parenthesizedPathPatternWhereClause", 
                         "labelExpression", "pathVariableReference", "elementVariableReference", 
                         "graphPatternQuantifier", "fixedQuantifier", "generalQuantifier", 
                         "lowerBound", "upperBound", "simplifiedPathPatternExpression", 
                         "simplifiedDefaultingLeft", "simplifiedDefaultingUndirected", 
                         "simplifiedDefaultingRight", "simplifiedDefaultingLeftOrUndirected", 
                         "simplifiedDefaultingUndirectedOrRight", "simplifiedDefaultingLeftOrRight", 
                         "simplifiedDefaultingAnyDirection", "simplifiedContents", 
                         "simplifiedPathUnion", "simplifiedMultisetAlternation", 
                         "simplifiedTerm", "simplifiedFactorLow", "simplifiedFactorHigh", 
                         "simplifiedQuantified", "simplifiedQuestioned", 
                         "simplifiedTertiary", "simplifiedDirectionOverride", 
                         "simplifiedOverrideLeft", "simplifiedOverrideUndirected", 
                         "simplifiedOverrideRight", "simplifiedOverrideLeftOrUndirected", 
                         "simplifiedOverrideUndirectedOrRight", "simplifiedOverrideLeftOrRight", 
                         "simplifiedOverrideAnyDirection", "simplifiedSecondary", 
                         "simplifiedNegation", "simplifiedPrimary", "whereClause", 
                         "yieldClause", "yieldItemList", "yieldItem", "yieldItemName", 
                         "yieldItemAlias", "groupByClause", "groupingElementList", 
                         "groupingElement", "emptyGroupingSet", "orderByClause", 
                         "sortSpecificationList", "sortSpecification", "sortKey", 
                         "orderingSpecification", "nullOrdering", "limitClause", 
                         "offsetClause", "offsetSynonym", "schemaReference", 
                         "absoluteCatalogSchemaReference", "catalogSchemaParentAndName", 
                         "relativeCatalogSchemaReference", "predefinedSchemaReference", 
                         "absoluteDirectoryPath", "relativeDirectoryPath", 
                         "simpleDirectoryPath", "graphReference", "catalogGraphParentAndName", 
                         "homeGraph", "graphTypeReference", "catalogGraphTypeParentAndName", 
                         "bindingTableReference", "procedureReference", 
                         "catalogProcedureParentAndName", "catalogObjectParentReference", 
                         "referenceParameterSpecification", "nestedGraphTypeSpecification", 
                         "graphTypeSpecificationBody", "elementTypeList", 
                         "elementTypeSpecification", "nodeTypeSpecification", 
                         "nodeTypePattern", "nodeTypePhrase", "nodeTypePhraseFiller", 
                         "nodeTypeFiller", "localNodeTypeAlias", "nodeTypeImpliedContent", 
                         "nodeTypeKeyLabelSet", "nodeTypeLabelSet", "nodeTypePropertyTypes", 
                         "edgeTypeSpecification", "edgeTypePattern", "edgeTypePhrase", 
                         "edgeTypePhraseFiller", "edgeTypeFiller", "edgeTypeImpliedContent", 
                         "edgeTypeKeyLabelSet", "edgeTypeLabelSet", "edgeTypePropertyTypes", 
                         "edgeTypePatternDirected", "edgeTypePatternPointingRight", 
                         "edgeTypePatternPointingLeft", "edgeTypePatternUndirected", 
                         "arcTypePointingRight", "arcTypePointingLeft", 
                         "arcTypeUndirected", "sourceNodeTypeReference", 
                         "destinationNodeTypeReference", "edgeKind", "endpointPairPhrase", 
                         "endpointPair", "endpointPairDirected", "endpointPairPointingRight", 
                         "endpointPairPointingLeft", "endpointPairUndirected", 
                         "connectorPointingRight", "connectorUndirected", 
                         "sourceNodeTypeAlias", "destinationNodeTypeAlias", 
                         "labelSetPhrase", "labelSetSpecification", "propertyTypesSpecification", 
                         "propertyTypeList", "propertyType", "propertyValueType", 
                         "bindingTableType", "valueType", "typed", "predefinedType", 
                         "booleanType", "characterStringType", "byteStringType", 
                         "minLength", "maxLength", "fixedLength", "numericType", 
                         "exactNumericType", "binaryExactNumericType", "signedBinaryExactNumericType", 
                         "unsignedBinaryExactNumericType", "verboseBinaryExactNumericType", 
                         "decimalExactNumericType", "precision", "scale", 
                         "approximateNumericType", "temporalType", "temporalInstantType", 
                         "datetimeType", "localdatetimeType", "dateType", 
                         "timeType", "localtimeType", "temporalDurationType", 
                         "temporalDurationQualifier", "referenceValueType", 
                         "immaterialValueType", "nullType", "emptyType", 
                         "graphReferenceValueType", "closedGraphReferenceValueType", 
                         "openGraphReferenceValueType", "bindingTableReferenceValueType", 
                         "nodeReferenceValueType", "closedNodeReferenceValueType", 
                         "openNodeReferenceValueType", "edgeReferenceValueType", 
                         "closedEdgeReferenceValueType", "openEdgeReferenceValueType", 
                         "pathValueType", "listValueTypeName", "listValueTypeNameSynonym", 
                         "recordType", "fieldTypesSpecification", "fieldTypeList", 
                         "notNull", "fieldType", "searchCondition", "predicate", 
                         "comparisonPredicatePart2", "compOp", "existsPredicate", 
                         "nullPredicate", "nullPredicatePart2", "valueTypePredicate", 
                         "valueTypePredicatePart2", "normalizedPredicatePart2", 
                         "directedPredicate", "directedPredicatePart2", 
                         "labeledPredicate", "labeledPredicatePart2", "isLabeledOrColon", 
                         "sourceDestinationPredicate", "nodeReference", 
                         "sourcePredicatePart2", "destinationPredicatePart2", 
                         "edgeReference", "all_differentPredicate", "samePredicate", 
                         "property_existsPredicate", "valueExpression", 
                         "valueFunction", "booleanValueExpression", "characterOrByteStringFunction", 
                         "subCharacterOrByteString", "trimSingleCharacterOrByteString", 
                         "foldCharacterString", "trimMultiCharacterCharacterString", 
                         "normalizeCharacterString", "nodeReferenceValueExpression", 
                         "edgeReferenceValueExpression", "aggregatingValueExpression", 
                         "valueExpressionPrimary", "parenthesizedValueExpression", 
                         "nonParenthesizedValueExpressionPrimary", "nonParenthesizedValueExpressionPrimarySpecialCase", 
                         "unsignedValueSpecification", "nonNegativeIntegerSpecification", 
                         "generalValueSpecification", "dynamicParameterSpecification", 
                         "letValueExpression", "valueQueryExpression", "caseExpression", 
                         "caseAbbreviation", "caseSpecification", "simpleCase", 
                         "searchedCase", "simpleWhenClause", "searchedWhenClause", 
                         "elseClause", "caseOperand", "whenOperandList", 
                         "whenOperand", "result", "resultExpression", "castSpecification", 
                         "castOperand", "castTarget", "aggregateFunction", 
                         "generalSetFunction", "binarySetFunction", "generalSetFunctionType", 
                         "setQuantifier", "binarySetFunctionType", "dependentValueExpression", 
                         "independentValueExpression", "element_idFunction", 
                         "bindingVariableReference", "pathValueExpression", 
                         "pathValueConstructor", "pathValueConstructorByEnumeration", 
                         "pathElementList", "pathElementListStart", "pathElementListStep", 
                         "listValueExpression", "listValueFunction", "trimListFunction", 
                         "elementsFunction", "listValueConstructor", "listValueConstructorByEnumeration", 
                         "listElementList", "listElement", "recordConstructor", 
                         "fieldsSpecification", "fieldList", "field", "truthValue", 
                         "numericValueExpression", "numericValueFunction", 
                         "lengthExpression", "cardinalityExpression", "cardinalityExpressionArgument", 
                         "charLengthExpression", "byteLengthExpression", 
                         "pathLengthExpression", "absoluteValueExpression", 
                         "modulusExpression", "numericValueExpressionDividend", 
                         "numericValueExpressionDivisor", "trigonometricFunction", 
                         "trigonometricFunctionName", "generalLogarithmFunction", 
                         "generalLogarithmBase", "generalLogarithmArgument", 
                         "commonLogarithm", "naturalLogarithm", "exponentialFunction", 
                         "powerFunction", "numericValueExpressionBase", 
                         "numericValueExpressionExponent", "squareRoot", 
                         "floorFunction", "ceilingFunction", "characterStringValueExpression", 
                         "byteStringValueExpression", "trimOperands", "trimCharacterOrByteStringSource", 
                         "trimSpecification", "trimCharacterOrByteString", 
                         "normalForm", "stringLength", "datetimeValueExpression", 
                         "datetimeValueFunction", "dateFunction", "timeFunction", 
                         "localtimeFunction", "datetimeFunction", "localdatetimeFunction", 
                         "dateFunctionParameters", "timeFunctionParameters", 
                         "datetimeFunctionParameters", "durationValueExpression", 
                         "datetimeSubtraction", "datetimeSubtractionParameters", 
                         "datetimeValueExpression1", "datetimeValueExpression2", 
                         "durationValueFunction", "durationFunction", "durationFunctionParameters", 
                         "objectName", "objectNameOrBindingVariable", "directoryName", 
                         "schemaName", "graphName", "delimitedGraphName", 
                         "graphTypeName", "nodeTypeName", "edgeTypeName", 
                         "bindingTableName", "delimitedBindingTableName", 
                         "procedureName", "labelName", "propertyName", "fieldName", 
                         "elementVariable", "pathVariable", "subpathVariable", 
                         "bindingVariable", "unsignedLiteral", "generalLiteral", 
                         "temporalLiteral", "dateLiteral", "timeLiteral", 
                         "datetimeLiteral", "listLiteral", "recordLiteral", 
                         "identifier", "regularIdentifier", "timeZoneString", 
                         "characterStringLiteral", "unsignedNumericLiteral", 
                         "exactNumericLiteral", "approximateNumericLiteral", 
                         "unsignedInteger", "unsignedDecimalInteger", "nullLiteral", 
                         "dateString", "timeString", "datetimeString", "durationLiteral", 
                         "durationString", "nodeSynonym", "edgesSynonym", 
                         "edgeSynonym", "nonReservedWords" ];

    constructor(input) {
        super(input);
        this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
        this.ruleNames = GQLParser.ruleNames;
        this.literalNames = GQLParser.literalNames;
        this.symbolicNames = GQLParser.symbolicNames;
    }

    sempred(localctx, ruleIndex, predIndex) {
    	switch(ruleIndex) {
    	case 92:
    	    		return this.compositeQueryExpression_sempred(localctx, predIndex);
    	case 214:
    	    		return this.labelExpression_sempred(localctx, predIndex);
    	case 233:
    	    		return this.simplifiedTerm_sempred(localctx, predIndex);
    	case 234:
    	    		return this.simplifiedFactorLow_sempred(localctx, predIndex);
    	case 337:
    	    		return this.valueType_sempred(localctx, predIndex);
    	case 410:
    	    		return this.valueExpression_sempred(localctx, predIndex);
    	case 422:
    	    		return this.valueExpressionPrimary_sempred(localctx, predIndex);
    	case 477:
    	    		return this.numericValueExpression_sempred(localctx, predIndex);
        default:
            throw "No predicate with index:" + ruleIndex;
       }
    }

    compositeQueryExpression_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 0:
    			return this.precpred(this._ctx, 2);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    labelExpression_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 1:
    			return this.precpred(this._ctx, 5);
    		case 2:
    			return this.precpred(this._ctx, 4);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    simplifiedTerm_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 3:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    simplifiedFactorLow_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 4:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    valueType_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 5:
    			return this.precpred(this._ctx, 1);
    		case 6:
    			return this.precpred(this._ctx, 7);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    valueExpression_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 7:
    			return this.precpred(this._ctx, 14);
    		case 8:
    			return this.precpred(this._ctx, 13);
    		case 9:
    			return this.precpred(this._ctx, 12);
    		case 10:
    			return this.precpred(this._ctx, 9);
    		case 11:
    			return this.precpred(this._ctx, 8);
    		case 12:
    			return this.precpred(this._ctx, 10);
    		case 13:
    			return this.precpred(this._ctx, 7);
    		case 14:
    			return this.precpred(this._ctx, 5);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    valueExpressionPrimary_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 15:
    			return this.precpred(this._ctx, 7);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    numericValueExpression_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 16:
    			return this.precpred(this._ctx, 4);
    		case 17:
    			return this.precpred(this._ctx, 3);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };




	gqlProgram() {
	    let localctx = new GqlProgramContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 0, GQLParser.RULE_gqlProgram);
	    var _la = 0;
	    try {
	        this.state = 1159;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1150;
	            this.programActivity();
	            this.state = 1152;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===188) {
	                this.state = 1151;
	                this.sessionCloseCommand();
	            }

	            this.state = 1154;
	            this.match(GQLParser.EOF);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1156;
	            this.sessionCloseCommand();
	            this.state = 1157;
	            this.match(GQLParser.EOF);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	programActivity() {
	    let localctx = new ProgramActivityContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 2, GQLParser.RULE_programActivity);
	    try {
	        this.state = 1163;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 188:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1161;
	            this.sessionActivity();
	            break;
	        case 31:
	        case 44:
	        case 57:
	        case 63:
	        case 76:
	        case 79:
	        case 82:
	        case 91:
	        case 92:
	        case 100:
	        case 110:
	        case 130:
	        case 132:
	        case 143:
	        case 150:
	        case 159:
	        case 160:
	        case 162:
	        case 177:
	        case 180:
	        case 182:
	        case 187:
	        case 190:
	        case 195:
	        case 199:
	        case 223:
	        case 225:
	        case 278:
	        case 289:
	        case 305:
	        case 313:
	        case 369:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1162;
	            this.transactionActivity();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sessionActivity() {
	    let localctx = new SessionActivityContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 4, GQLParser.RULE_sessionActivity);
	    try {
	        this.state = 1181;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,6,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1166; 
	            this._errHandler.sync(this);
	            var _alt = 1;
	            do {
	            	switch (_alt) {
	            	case 1:
	            		this.state = 1165;
	            		this.sessionResetCommand();
	            		break;
	            	default:
	            		throw new antlr4.error.NoViableAltException(this);
	            	}
	            	this.state = 1168; 
	            	this._errHandler.sync(this);
	            	_alt = this._interp.adaptivePredict(this._input,3, this._ctx);
	            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1171; 
	            this._errHandler.sync(this);
	            var _alt = 1;
	            do {
	            	switch (_alt) {
	            	case 1:
	            		this.state = 1170;
	            		this.sessionSetCommand();
	            		break;
	            	default:
	            		throw new antlr4.error.NoViableAltException(this);
	            	}
	            	this.state = 1173; 
	            	this._errHandler.sync(this);
	            	_alt = this._interp.adaptivePredict(this._input,4, this._ctx);
	            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	            this.state = 1178;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,5,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 1175;
	                    this.sessionResetCommand(); 
	                }
	                this.state = 1180;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,5,this._ctx);
	            }

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	transactionActivity() {
	    let localctx = new TransactionActivityContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 6, GQLParser.RULE_transactionActivity);
	    var _la = 0;
	    try {
	        this.state = 1195;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 199:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1183;
	            this.startTransactionCommand();
	            this.state = 1188;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===31 || _la===44 || ((((_la - 63)) & ~0x1f) === 0 && ((1 << (_la - 63)) & 805904385) !== 0) || ((((_la - 100)) & ~0x1f) === 0 && ((1 << (_la - 100)) & 1073742849) !== 0) || ((((_la - 132)) & ~0x1f) === 0 && ((1 << (_la - 132)) & 1476659201) !== 0) || ((((_la - 177)) & ~0x1f) === 0 && ((1 << (_la - 177)) & 271369) !== 0) || _la===223 || _la===225 || ((((_la - 278)) & ~0x1f) === 0 && ((1 << (_la - 278)) & 134219777) !== 0) || _la===313 || _la===369) {
	                this.state = 1184;
	                this.procedureSpecification();
	                this.state = 1186;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===57 || _la===182) {
	                    this.state = 1185;
	                    this.endTransactionCommand();
	                }

	            }

	            break;
	        case 31:
	        case 44:
	        case 63:
	        case 76:
	        case 79:
	        case 82:
	        case 91:
	        case 92:
	        case 100:
	        case 110:
	        case 130:
	        case 132:
	        case 143:
	        case 150:
	        case 159:
	        case 160:
	        case 162:
	        case 177:
	        case 180:
	        case 187:
	        case 190:
	        case 195:
	        case 223:
	        case 225:
	        case 278:
	        case 289:
	        case 305:
	        case 313:
	        case 369:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1190;
	            this.procedureSpecification();
	            this.state = 1192;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===57 || _la===182) {
	                this.state = 1191;
	                this.endTransactionCommand();
	            }

	            break;
	        case 57:
	        case 182:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1194;
	            this.endTransactionCommand();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	endTransactionCommand() {
	    let localctx = new EndTransactionCommandContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 8, GQLParser.RULE_endTransactionCommand);
	    try {
	        this.state = 1199;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 182:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1197;
	            this.rollbackCommand();
	            break;
	        case 57:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1198;
	            this.commitCommand();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sessionSetCommand() {
	    let localctx = new SessionSetCommandContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 10, GQLParser.RULE_sessionSetCommand);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1201;
	        this.match(GQLParser.SESSION);
	        this.state = 1202;
	        this.match(GQLParser.SET);
	        this.state = 1207;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,12,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1203;
	            this.sessionSetSchemaClause();
	            break;

	        case 2:
	            this.state = 1204;
	            this.sessionSetGraphClause();
	            break;

	        case 3:
	            this.state = 1205;
	            this.sessionSetTimeZoneClause();
	            break;

	        case 4:
	            this.state = 1206;
	            this.sessionSetParameterClause();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sessionSetSchemaClause() {
	    let localctx = new SessionSetSchemaClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 12, GQLParser.RULE_sessionSetSchemaClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1209;
	        this.match(GQLParser.SCHEMA);
	        this.state = 1210;
	        this.schemaReference();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sessionSetGraphClause() {
	    let localctx = new SessionSetGraphClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 14, GQLParser.RULE_sessionSetGraphClause);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1213;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===305) {
	            this.state = 1212;
	            this.match(GQLParser.PROPERTY);
	        }

	        this.state = 1215;
	        this.match(GQLParser.GRAPH);
	        this.state = 1216;
	        this.graphExpression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sessionSetTimeZoneClause() {
	    let localctx = new SessionSetTimeZoneClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 16, GQLParser.RULE_sessionSetTimeZoneClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1218;
	        this.match(GQLParser.TIME);
	        this.state = 1219;
	        this.match(GQLParser.ZONE);
	        this.state = 1220;
	        this.setTimeZoneValue();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	setTimeZoneValue() {
	    let localctx = new SetTimeZoneValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 18, GQLParser.RULE_setTimeZoneValue);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1222;
	        this.timeZoneString();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sessionSetParameterClause() {
	    let localctx = new SessionSetParameterClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 20, GQLParser.RULE_sessionSetParameterClause);
	    try {
	        this.state = 1227;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 289:
	        case 305:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1224;
	            this.sessionSetGraphParameterClause();
	            break;
	        case 278:
	        case 313:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1225;
	            this.sessionSetBindingTableParameterClause();
	            break;
	        case 225:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1226;
	            this.sessionSetValueParameterClause();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sessionSetGraphParameterClause() {
	    let localctx = new SessionSetGraphParameterClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 22, GQLParser.RULE_sessionSetGraphParameterClause);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1230;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===305) {
	            this.state = 1229;
	            this.match(GQLParser.PROPERTY);
	        }

	        this.state = 1232;
	        this.match(GQLParser.GRAPH);
	        this.state = 1233;
	        this.sessionSetParameterName();
	        this.state = 1234;
	        this.optTypedGraphInitializer();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sessionSetBindingTableParameterClause() {
	    let localctx = new SessionSetBindingTableParameterClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 24, GQLParser.RULE_sessionSetBindingTableParameterClause);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1237;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===278) {
	            this.state = 1236;
	            this.match(GQLParser.BINDING);
	        }

	        this.state = 1239;
	        this.match(GQLParser.TABLE);
	        this.state = 1240;
	        this.sessionSetParameterName();
	        this.state = 1241;
	        this.optTypedBindingTableInitializer();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sessionSetValueParameterClause() {
	    let localctx = new SessionSetValueParameterClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 26, GQLParser.RULE_sessionSetValueParameterClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1243;
	        this.match(GQLParser.VALUE);
	        this.state = 1244;
	        this.sessionSetParameterName();
	        this.state = 1245;
	        this.optTypedValueInitializer();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sessionSetParameterName() {
	    let localctx = new SessionSetParameterNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 28, GQLParser.RULE_sessionSetParameterName);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1250;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===108) {
	            this.state = 1247;
	            this.match(GQLParser.IF);
	            this.state = 1248;
	            this.match(GQLParser.NOT);
	            this.state = 1249;
	            this.match(GQLParser.EXISTS);
	        }

	        this.state = 1252;
	        this.sessionParameterSpecification();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sessionResetCommand() {
	    let localctx = new SessionResetCommandContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 30, GQLParser.RULE_sessionResetCommand);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1254;
	        this.match(GQLParser.SESSION);
	        this.state = 1255;
	        this.match(GQLParser.RESET);
	        this.state = 1257;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===22 || _la===53 || ((((_la - 164)) & ~0x1f) === 0 && ((1 << (_la - 164)) & 2097155) !== 0) || _la===207 || _la===289 || _la===305 || _la===327) {
	            this.state = 1256;
	            this.sessionResetArguments();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sessionResetArguments() {
	    let localctx = new SessionResetArgumentsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 32, GQLParser.RULE_sessionResetArguments);
	    var _la = 0;
	    try {
	        this.state = 1274;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 22:
	        case 53:
	        case 165:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1260;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===22) {
	                this.state = 1259;
	                this.match(GQLParser.ALL);
	            }

	            this.state = 1262;
	            _la = this._input.LA(1);
	            if(!(_la===53 || _la===165)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;
	        case 185:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1263;
	            this.match(GQLParser.SCHEMA);
	            break;
	        case 289:
	        case 305:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1265;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===305) {
	                this.state = 1264;
	                this.match(GQLParser.PROPERTY);
	            }

	            this.state = 1267;
	            this.match(GQLParser.GRAPH);
	            break;
	        case 207:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1268;
	            this.match(GQLParser.TIME);
	            this.state = 1269;
	            this.match(GQLParser.ZONE);
	            break;
	        case 164:
	        case 327:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1271;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===164) {
	                this.state = 1270;
	                this.match(GQLParser.PARAMETER);
	            }

	            this.state = 1273;
	            this.sessionParameterSpecification();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sessionCloseCommand() {
	    let localctx = new SessionCloseCommandContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 34, GQLParser.RULE_sessionCloseCommand);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1276;
	        this.match(GQLParser.SESSION);
	        this.state = 1277;
	        this.match(GQLParser.CLOSE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sessionParameterSpecification() {
	    let localctx = new SessionParameterSpecificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 36, GQLParser.RULE_sessionParameterSpecification);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1279;
	        this.match(GQLParser.GENERAL_PARAMETER_REFERENCE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	startTransactionCommand() {
	    let localctx = new StartTransactionCommandContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 38, GQLParser.RULE_startTransactionCommand);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1281;
	        this.match(GQLParser.START);
	        this.state = 1282;
	        this.match(GQLParser.TRANSACTION);
	        this.state = 1284;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===306) {
	            this.state = 1283;
	            this.transactionCharacteristics();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	transactionCharacteristics() {
	    let localctx = new TransactionCharacteristicsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 40, GQLParser.RULE_transactionCharacteristics);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1286;
	        this.transactionMode();
	        this.state = 1291;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===361) {
	            this.state = 1287;
	            this.match(GQLParser.COMMA);
	            this.state = 1288;
	            this.transactionMode();
	            this.state = 1293;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	transactionMode() {
	    let localctx = new TransactionModeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 42, GQLParser.RULE_transactionMode);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1294;
	        this.transactionAccessMode();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	transactionAccessMode() {
	    let localctx = new TransactionAccessModeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 44, GQLParser.RULE_transactionAccessMode);
	    try {
	        this.state = 1300;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,25,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1296;
	            this.match(GQLParser.READ);
	            this.state = 1297;
	            this.match(GQLParser.ONLY);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1298;
	            this.match(GQLParser.READ);
	            this.state = 1299;
	            this.match(GQLParser.WRITE);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	rollbackCommand() {
	    let localctx = new RollbackCommandContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 46, GQLParser.RULE_rollbackCommand);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1302;
	        this.match(GQLParser.ROLLBACK);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	commitCommand() {
	    let localctx = new CommitCommandContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 48, GQLParser.RULE_commitCommand);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1304;
	        this.match(GQLParser.COMMIT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nestedProcedureSpecification() {
	    let localctx = new NestedProcedureSpecificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 50, GQLParser.RULE_nestedProcedureSpecification);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1306;
	        this.match(GQLParser.LEFT_BRACE);
	        this.state = 1307;
	        this.procedureSpecification();
	        this.state = 1308;
	        this.match(GQLParser.RIGHT_BRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	procedureSpecification() {
	    let localctx = new ProcedureSpecificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 52, GQLParser.RULE_procedureSpecification);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1310;
	        this.procedureBody();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nestedDataModifyingProcedureSpecification() {
	    let localctx = new NestedDataModifyingProcedureSpecificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 54, GQLParser.RULE_nestedDataModifyingProcedureSpecification);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1312;
	        this.match(GQLParser.LEFT_BRACE);
	        this.state = 1313;
	        this.procedureBody();
	        this.state = 1314;
	        this.match(GQLParser.RIGHT_BRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nestedQuerySpecification() {
	    let localctx = new NestedQuerySpecificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 56, GQLParser.RULE_nestedQuerySpecification);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1316;
	        this.match(GQLParser.LEFT_BRACE);
	        this.state = 1317;
	        this.procedureBody();
	        this.state = 1318;
	        this.match(GQLParser.RIGHT_BRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	procedureBody() {
	    let localctx = new ProcedureBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 58, GQLParser.RULE_procedureBody);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1321;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===31) {
	            this.state = 1320;
	            this.atSchemaClause();
	        }

	        this.state = 1324;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===225 || ((((_la - 278)) & ~0x1f) === 0 && ((1 << (_la - 278)) & 134219777) !== 0) || _la===313) {
	            this.state = 1323;
	            this.bindingVariableDefinitionBlock();
	        }

	        this.state = 1326;
	        this.statementBlock();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bindingVariableDefinitionBlock() {
	    let localctx = new BindingVariableDefinitionBlockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 60, GQLParser.RULE_bindingVariableDefinitionBlock);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1329; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 1328;
	            this.bindingVariableDefinition();
	            this.state = 1331; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===225 || ((((_la - 278)) & ~0x1f) === 0 && ((1 << (_la - 278)) & 134219777) !== 0) || _la===313);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bindingVariableDefinition() {
	    let localctx = new BindingVariableDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 62, GQLParser.RULE_bindingVariableDefinition);
	    try {
	        this.state = 1336;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 289:
	        case 305:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1333;
	            this.graphVariableDefinition();
	            break;
	        case 278:
	        case 313:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1334;
	            this.bindingTableVariableDefinition();
	            break;
	        case 225:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1335;
	            this.valueVariableDefinition();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	statementBlock() {
	    let localctx = new StatementBlockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 64, GQLParser.RULE_statementBlock);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1338;
	        this.statement();
	        this.state = 1342;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===149) {
	            this.state = 1339;
	            this.nextStatement();
	            this.state = 1344;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	statement() {
	    let localctx = new StatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 66, GQLParser.RULE_statement);
	    try {
	        this.state = 1348;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,31,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1345;
	            this.linearCatalogModifyingStatement();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1346;
	            this.linearDataModifyingStatement();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1347;
	            this.compositeQueryStatement();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nextStatement() {
	    let localctx = new NextStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 68, GQLParser.RULE_nextStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1350;
	        this.match(GQLParser.NEXT);
	        this.state = 1352;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===234) {
	            this.state = 1351;
	            this.yieldClause();
	        }

	        this.state = 1354;
	        this.statement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	graphVariableDefinition() {
	    let localctx = new GraphVariableDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 70, GQLParser.RULE_graphVariableDefinition);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1357;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===305) {
	            this.state = 1356;
	            this.match(GQLParser.PROPERTY);
	        }

	        this.state = 1359;
	        this.match(GQLParser.GRAPH);
	        this.state = 1360;
	        this.bindingVariable();
	        this.state = 1361;
	        this.optTypedGraphInitializer();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	optTypedGraphInitializer() {
	    let localctx = new OptTypedGraphInitializerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 72, GQLParser.RULE_optTypedGraphInitializer);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1367;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===25 || _la===211 || _la===289 || _la===305 || _la===332) {
	            this.state = 1364;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===211 || _la===332) {
	                this.state = 1363;
	                this.typed();
	            }

	            this.state = 1366;
	            this.graphReferenceValueType();
	        }

	        this.state = 1369;
	        this.graphInitializer();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	graphInitializer() {
	    let localctx = new GraphInitializerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 74, GQLParser.RULE_graphInitializer);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1371;
	        this.match(GQLParser.EQUALS_OPERATOR);
	        this.state = 1372;
	        this.graphExpression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bindingTableVariableDefinition() {
	    let localctx = new BindingTableVariableDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 76, GQLParser.RULE_bindingTableVariableDefinition);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1375;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===278) {
	            this.state = 1374;
	            this.match(GQLParser.BINDING);
	        }

	        this.state = 1377;
	        this.match(GQLParser.TABLE);
	        this.state = 1378;
	        this.bindingVariable();
	        this.state = 1379;
	        this.optTypedBindingTableInitializer();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	optTypedBindingTableInitializer() {
	    let localctx = new OptTypedBindingTableInitializerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 78, GQLParser.RULE_optTypedBindingTableInitializer);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1385;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===211 || _la===278 || _la===313 || _la===332) {
	            this.state = 1382;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===211 || _la===332) {
	                this.state = 1381;
	                this.typed();
	            }

	            this.state = 1384;
	            this.bindingTableReferenceValueType();
	        }

	        this.state = 1387;
	        this.bindingTableInitializer();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bindingTableInitializer() {
	    let localctx = new BindingTableInitializerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 80, GQLParser.RULE_bindingTableInitializer);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1389;
	        this.match(GQLParser.EQUALS_OPERATOR);
	        this.state = 1390;
	        this.bindingTableExpression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	valueVariableDefinition() {
	    let localctx = new ValueVariableDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 82, GQLParser.RULE_valueVariableDefinition);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1392;
	        this.match(GQLParser.VALUE);
	        this.state = 1393;
	        this.bindingVariable();
	        this.state = 1394;
	        this.optTypedValueInitializer();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	optTypedValueInitializer() {
	    let localctx = new OptTypedValueInitializerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 84, GQLParser.RULE_optTypedValueInitializer);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1400;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 25)) & ~0x1f) === 0 && ((1 << (_la - 25)) & 33832451) !== 0) || ((((_la - 70)) & ~0x1f) === 0 && ((1 << (_la - 70)) & 528492569) !== 0) || ((((_la - 102)) & ~0x1f) === 0 && ((1 << (_la - 102)) & 2155871745) !== 0) || ((((_la - 135)) & ~0x1f) === 0 && ((1 << (_la - 135)) & 2148270081) !== 0) || ((((_la - 175)) & ~0x1f) === 0 && ((1 << (_la - 175)) & 140574723) !== 0) || ((((_la - 207)) & ~0x1f) === 0 && ((1 << (_la - 207)) & 270163955) !== 0) || ((((_la - 278)) & ~0x1f) === 0 && ((1 << (_la - 278)) & 679479393) !== 0) || ((((_la - 313)) & ~0x1f) === 0 && ((1 << (_la - 313)) & 524481) !== 0) || _la===369 || _la===371) {
	            this.state = 1397;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===211 || _la===332) {
	                this.state = 1396;
	                this.typed();
	            }

	            this.state = 1399;
	            this.valueType(0);
	        }

	        this.state = 1402;
	        this.valueInitializer();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	valueInitializer() {
	    let localctx = new ValueInitializerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 86, GQLParser.RULE_valueInitializer);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1404;
	        this.match(GQLParser.EQUALS_OPERATOR);
	        this.state = 1405;
	        this.valueExpression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	graphExpression() {
	    let localctx = new GraphExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 88, GQLParser.RULE_graphExpression);
	    try {
	        this.state = 1411;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,41,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1407;
	            this.objectExpressionPrimary();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1408;
	            this.graphReference();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1409;
	            this.objectNameOrBindingVariable();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1410;
	            this.currentGraph();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	currentGraph() {
	    let localctx = new CurrentGraphContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 90, GQLParser.RULE_currentGraph);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1413;
	        _la = this._input.LA(1);
	        if(!(_la===65 || _la===66)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bindingTableExpression() {
	    let localctx = new BindingTableExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 92, GQLParser.RULE_bindingTableExpression);
	    try {
	        this.state = 1419;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,42,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1415;
	            this.nestedBindingTableQuerySpecification();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1416;
	            this.objectExpressionPrimary();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1417;
	            this.bindingTableReference();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1418;
	            this.objectNameOrBindingVariable();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nestedBindingTableQuerySpecification() {
	    let localctx = new NestedBindingTableQuerySpecificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 94, GQLParser.RULE_nestedBindingTableQuerySpecification);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1421;
	        this.nestedQuerySpecification();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	objectExpressionPrimary() {
	    let localctx = new ObjectExpressionPrimaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 96, GQLParser.RULE_objectExpressionPrimary);
	    try {
	        this.state = 1427;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,43,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1423;
	            this.match(GQLParser.VARIABLE);
	            this.state = 1424;
	            this.valueExpressionPrimary(0);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1425;
	            this.parenthesizedValueExpression();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1426;
	            this.nonParenthesizedValueExpressionPrimarySpecialCase();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	linearCatalogModifyingStatement() {
	    let localctx = new LinearCatalogModifyingStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 98, GQLParser.RULE_linearCatalogModifyingStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1430; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 1429;
	            this.simpleCatalogModifyingStatement();
	            this.state = 1432; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===44 || _la===63 || _la===82 || _la===160);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simpleCatalogModifyingStatement() {
	    let localctx = new SimpleCatalogModifyingStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 100, GQLParser.RULE_simpleCatalogModifyingStatement);
	    try {
	        this.state = 1436;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 63:
	        case 82:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1434;
	            this.primitiveCatalogModifyingStatement();
	            break;
	        case 44:
	        case 160:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1435;
	            this.callCatalogModifyingProcedureStatement();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	primitiveCatalogModifyingStatement() {
	    let localctx = new PrimitiveCatalogModifyingStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 102, GQLParser.RULE_primitiveCatalogModifyingStatement);
	    try {
	        this.state = 1444;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,46,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1438;
	            this.createSchemaStatement();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1439;
	            this.dropSchemaStatement();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1440;
	            this.createGraphStatement();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1441;
	            this.dropGraphStatement();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1442;
	            this.createGraphTypeStatement();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1443;
	            this.dropGraphTypeStatement();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createSchemaStatement() {
	    let localctx = new CreateSchemaStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 104, GQLParser.RULE_createSchemaStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1446;
	        this.match(GQLParser.CREATE);
	        this.state = 1447;
	        this.match(GQLParser.SCHEMA);
	        this.state = 1451;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===108) {
	            this.state = 1448;
	            this.match(GQLParser.IF);
	            this.state = 1449;
	            this.match(GQLParser.NOT);
	            this.state = 1450;
	            this.match(GQLParser.EXISTS);
	        }

	        this.state = 1453;
	        this.catalogSchemaParentAndName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropSchemaStatement() {
	    let localctx = new DropSchemaStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 106, GQLParser.RULE_dropSchemaStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1455;
	        this.match(GQLParser.DROP);
	        this.state = 1456;
	        this.match(GQLParser.SCHEMA);
	        this.state = 1459;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===108) {
	            this.state = 1457;
	            this.match(GQLParser.IF);
	            this.state = 1458;
	            this.match(GQLParser.EXISTS);
	        }

	        this.state = 1461;
	        this.catalogSchemaParentAndName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createGraphStatement() {
	    let localctx = new CreateGraphStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 108, GQLParser.RULE_createGraphStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1463;
	        this.match(GQLParser.CREATE);
	        this.state = 1479;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 289:
	        case 305:
	            this.state = 1465;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===305) {
	                this.state = 1464;
	                this.match(GQLParser.PROPERTY);
	            }

	            this.state = 1467;
	            this.match(GQLParser.GRAPH);
	            this.state = 1471;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===108) {
	                this.state = 1468;
	                this.match(GQLParser.IF);
	                this.state = 1469;
	                this.match(GQLParser.NOT);
	                this.state = 1470;
	                this.match(GQLParser.EXISTS);
	            }

	            break;
	        case 161:
	            this.state = 1473;
	            this.match(GQLParser.OR);
	            this.state = 1474;
	            this.match(GQLParser.REPLACE);
	            this.state = 1476;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===305) {
	                this.state = 1475;
	                this.match(GQLParser.PROPERTY);
	            }

	            this.state = 1478;
	            this.match(GQLParser.GRAPH);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 1481;
	        this.catalogGraphParentAndName();
	        this.state = 1484;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,53,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1482;
	            this.openGraphType();
	            break;

	        case 2:
	            this.state = 1483;
	            this.ofGraphType();
	            break;

	        }
	        this.state = 1487;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===27) {
	            this.state = 1486;
	            this.graphSource();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	openGraphType() {
	    let localctx = new OpenGraphTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 110, GQLParser.RULE_openGraphType);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1490;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===211 || _la===332) {
	            this.state = 1489;
	            this.typed();
	        }

	        this.state = 1492;
	        this.match(GQLParser.ANY);
	        this.state = 1497;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===289 || _la===305) {
	            this.state = 1494;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===305) {
	                this.state = 1493;
	                this.match(GQLParser.PROPERTY);
	            }

	            this.state = 1496;
	            this.match(GQLParser.GRAPH);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ofGraphType() {
	    let localctx = new OfGraphTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 112, GQLParser.RULE_ofGraphType);
	    var _la = 0;
	    try {
	        this.state = 1514;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,62,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1499;
	            this.graphTypeLikeGraph();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1501;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===211 || _la===332) {
	                this.state = 1500;
	                this.typed();
	            }

	            this.state = 1503;
	            this.graphTypeReference();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1505;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===211 || _la===332) {
	                this.state = 1504;
	                this.typed();
	            }

	            this.state = 1511;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===289 || _la===305) {
	                this.state = 1508;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===305) {
	                    this.state = 1507;
	                    this.match(GQLParser.PROPERTY);
	                }

	                this.state = 1510;
	                this.match(GQLParser.GRAPH);
	            }

	            this.state = 1513;
	            this.nestedGraphTypeSpecification();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	graphTypeLikeGraph() {
	    let localctx = new GraphTypeLikeGraphContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 114, GQLParser.RULE_graphTypeLikeGraph);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1516;
	        this.match(GQLParser.LIKE);
	        this.state = 1517;
	        this.graphExpression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	graphSource() {
	    let localctx = new GraphSourceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 116, GQLParser.RULE_graphSource);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1519;
	        this.match(GQLParser.AS);
	        this.state = 1520;
	        this.match(GQLParser.COPY);
	        this.state = 1521;
	        this.match(GQLParser.OF);
	        this.state = 1522;
	        this.graphExpression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropGraphStatement() {
	    let localctx = new DropGraphStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 118, GQLParser.RULE_dropGraphStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1524;
	        this.match(GQLParser.DROP);
	        this.state = 1526;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===305) {
	            this.state = 1525;
	            this.match(GQLParser.PROPERTY);
	        }

	        this.state = 1528;
	        this.match(GQLParser.GRAPH);
	        this.state = 1531;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===108) {
	            this.state = 1529;
	            this.match(GQLParser.IF);
	            this.state = 1530;
	            this.match(GQLParser.EXISTS);
	        }

	        this.state = 1533;
	        this.catalogGraphParentAndName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createGraphTypeStatement() {
	    let localctx = new CreateGraphTypeStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 120, GQLParser.RULE_createGraphTypeStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1535;
	        this.match(GQLParser.CREATE);
	        this.state = 1553;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 289:
	        case 305:
	            this.state = 1537;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===305) {
	                this.state = 1536;
	                this.match(GQLParser.PROPERTY);
	            }

	            this.state = 1539;
	            this.match(GQLParser.GRAPH);
	            this.state = 1540;
	            this.match(GQLParser.TYPE);
	            this.state = 1544;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===108) {
	                this.state = 1541;
	                this.match(GQLParser.IF);
	                this.state = 1542;
	                this.match(GQLParser.NOT);
	                this.state = 1543;
	                this.match(GQLParser.EXISTS);
	            }

	            break;
	        case 161:
	            this.state = 1546;
	            this.match(GQLParser.OR);
	            this.state = 1547;
	            this.match(GQLParser.REPLACE);
	            this.state = 1549;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===305) {
	                this.state = 1548;
	                this.match(GQLParser.PROPERTY);
	            }

	            this.state = 1551;
	            this.match(GQLParser.GRAPH);
	            this.state = 1552;
	            this.match(GQLParser.TYPE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 1555;
	        this.catalogGraphTypeParentAndName();
	        this.state = 1556;
	        this.graphTypeSource();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	graphTypeSource() {
	    let localctx = new GraphTypeSourceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 122, GQLParser.RULE_graphTypeSource);
	    var _la = 0;
	    try {
	        this.state = 1567;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,71,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1559;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===27) {
	                this.state = 1558;
	                this.match(GQLParser.AS);
	            }

	            this.state = 1561;
	            this.copyOfGraphType();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1562;
	            this.graphTypeLikeGraph();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1564;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===27) {
	                this.state = 1563;
	                this.match(GQLParser.AS);
	            }

	            this.state = 1566;
	            this.nestedGraphTypeSpecification();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	copyOfGraphType() {
	    let localctx = new CopyOfGraphTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 124, GQLParser.RULE_copyOfGraphType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1569;
	        this.match(GQLParser.COPY);
	        this.state = 1570;
	        this.match(GQLParser.OF);
	        this.state = 1571;
	        this.graphTypeReference();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropGraphTypeStatement() {
	    let localctx = new DropGraphTypeStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 126, GQLParser.RULE_dropGraphTypeStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1573;
	        this.match(GQLParser.DROP);
	        this.state = 1575;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===305) {
	            this.state = 1574;
	            this.match(GQLParser.PROPERTY);
	        }

	        this.state = 1577;
	        this.match(GQLParser.GRAPH);
	        this.state = 1578;
	        this.match(GQLParser.TYPE);
	        this.state = 1581;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===108) {
	            this.state = 1579;
	            this.match(GQLParser.IF);
	            this.state = 1580;
	            this.match(GQLParser.EXISTS);
	        }

	        this.state = 1583;
	        this.catalogGraphTypeParentAndName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	callCatalogModifyingProcedureStatement() {
	    let localctx = new CallCatalogModifyingProcedureStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 128, GQLParser.RULE_callCatalogModifyingProcedureStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1585;
	        this.callProcedureStatement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	linearDataModifyingStatement() {
	    let localctx = new LinearDataModifyingStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 130, GQLParser.RULE_linearDataModifyingStatement);
	    try {
	        this.state = 1589;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 223:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1587;
	            this.focusedLinearDataModifyingStatement();
	            break;
	        case 44:
	        case 76:
	        case 79:
	        case 91:
	        case 100:
	        case 110:
	        case 130:
	        case 132:
	        case 143:
	        case 150:
	        case 159:
	        case 160:
	        case 162:
	        case 177:
	        case 190:
	        case 195:
	        case 369:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1588;
	            this.ambientLinearDataModifyingStatement();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	focusedLinearDataModifyingStatement() {
	    let localctx = new FocusedLinearDataModifyingStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 132, GQLParser.RULE_focusedLinearDataModifyingStatement);
	    try {
	        this.state = 1593;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,75,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1591;
	            this.focusedLinearDataModifyingStatementBody();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1592;
	            this.focusedNestedDataModifyingProcedureSpecification();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	focusedLinearDataModifyingStatementBody() {
	    let localctx = new FocusedLinearDataModifyingStatementBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 134, GQLParser.RULE_focusedLinearDataModifyingStatementBody);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1595;
	        this.useGraphClause();
	        this.state = 1596;
	        this.simpleLinearDataAccessingStatement();
	        this.state = 1598;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===92 || _la===180) {
	            this.state = 1597;
	            this.primitiveResultStatement();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	focusedNestedDataModifyingProcedureSpecification() {
	    let localctx = new FocusedNestedDataModifyingProcedureSpecificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 136, GQLParser.RULE_focusedNestedDataModifyingProcedureSpecification);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1600;
	        this.useGraphClause();
	        this.state = 1601;
	        this.nestedDataModifyingProcedureSpecification();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ambientLinearDataModifyingStatement() {
	    let localctx = new AmbientLinearDataModifyingStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 138, GQLParser.RULE_ambientLinearDataModifyingStatement);
	    try {
	        this.state = 1605;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 44:
	        case 76:
	        case 79:
	        case 91:
	        case 100:
	        case 110:
	        case 130:
	        case 132:
	        case 143:
	        case 150:
	        case 159:
	        case 160:
	        case 162:
	        case 177:
	        case 190:
	        case 195:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1603;
	            this.ambientLinearDataModifyingStatementBody();
	            break;
	        case 369:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1604;
	            this.nestedDataModifyingProcedureSpecification();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ambientLinearDataModifyingStatementBody() {
	    let localctx = new AmbientLinearDataModifyingStatementBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 140, GQLParser.RULE_ambientLinearDataModifyingStatementBody);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1607;
	        this.simpleLinearDataAccessingStatement();
	        this.state = 1609;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===92 || _la===180) {
	            this.state = 1608;
	            this.primitiveResultStatement();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simpleLinearDataAccessingStatement() {
	    let localctx = new SimpleLinearDataAccessingStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 142, GQLParser.RULE_simpleLinearDataAccessingStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1612; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 1611;
	            this.simpleDataAccessingStatement();
	            this.state = 1614; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===44 || ((((_la - 76)) & ~0x1f) === 0 && ((1 << (_la - 76)) & 16809993) !== 0) || ((((_la - 110)) & ~0x1f) === 0 && ((1 << (_la - 110)) & 5242881) !== 0) || ((((_la - 143)) & ~0x1f) === 0 && ((1 << (_la - 143)) & 721025) !== 0) || ((((_la - 177)) & ~0x1f) === 0 && ((1 << (_la - 177)) & 270337) !== 0));
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simpleDataAccessingStatement() {
	    let localctx = new SimpleDataAccessingStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 144, GQLParser.RULE_simpleDataAccessingStatement);
	    try {
	        this.state = 1618;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,80,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1616;
	            this.simpleQueryStatement();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1617;
	            this.simpleDataModifyingStatement();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simpleDataModifyingStatement() {
	    let localctx = new SimpleDataModifyingStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 146, GQLParser.RULE_simpleDataModifyingStatement);
	    try {
	        this.state = 1622;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 76:
	        case 79:
	        case 110:
	        case 150:
	        case 177:
	        case 190:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1620;
	            this.primitiveDataModifyingStatement();
	            break;
	        case 44:
	        case 160:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1621;
	            this.callDataModifyingProcedureStatement();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	primitiveDataModifyingStatement() {
	    let localctx = new PrimitiveDataModifyingStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 148, GQLParser.RULE_primitiveDataModifyingStatement);
	    try {
	        this.state = 1628;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 110:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1624;
	            this.insertStatement();
	            break;
	        case 190:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1625;
	            this.setStatement();
	            break;
	        case 177:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1626;
	            this.removeStatement();
	            break;
	        case 76:
	        case 79:
	        case 150:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1627;
	            this.deleteStatement();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	insertStatement() {
	    let localctx = new InsertStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 150, GQLParser.RULE_insertStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1630;
	        this.match(GQLParser.INSERT);
	        this.state = 1631;
	        this.insertGraphPattern();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	setStatement() {
	    let localctx = new SetStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 152, GQLParser.RULE_setStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1633;
	        this.match(GQLParser.SET);
	        this.state = 1634;
	        this.setItemList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	setItemList() {
	    let localctx = new SetItemListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 154, GQLParser.RULE_setItemList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1636;
	        this.setItem();
	        this.state = 1641;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===361) {
	            this.state = 1637;
	            this.match(GQLParser.COMMA);
	            this.state = 1638;
	            this.setItem();
	            this.state = 1643;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	setItem() {
	    let localctx = new SetItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 156, GQLParser.RULE_setItem);
	    try {
	        this.state = 1647;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,84,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1644;
	            this.setPropertyItem();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1645;
	            this.setAllPropertiesItem();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1646;
	            this.setLabelItem();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	setPropertyItem() {
	    let localctx = new SetPropertyItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 158, GQLParser.RULE_setPropertyItem);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1649;
	        this.bindingVariableReference();
	        this.state = 1650;
	        this.match(GQLParser.PERIOD);
	        this.state = 1651;
	        this.propertyName();
	        this.state = 1652;
	        this.match(GQLParser.EQUALS_OPERATOR);
	        this.state = 1653;
	        this.valueExpression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	setAllPropertiesItem() {
	    let localctx = new SetAllPropertiesItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 160, GQLParser.RULE_setAllPropertiesItem);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1655;
	        this.bindingVariableReference();
	        this.state = 1656;
	        this.match(GQLParser.EQUALS_OPERATOR);
	        this.state = 1657;
	        this.match(GQLParser.LEFT_BRACE);
	        this.state = 1659;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===4 || _la===5 || ((((_la - 277)) & ~0x1f) === 0 && ((1 << (_la - 277)) & 4294967295) !== 0) || ((((_la - 309)) & ~0x1f) === 0 && ((1 << (_la - 309)) & 131071) !== 0)) {
	            this.state = 1658;
	            this.propertyKeyValuePairList();
	        }

	        this.state = 1661;
	        this.match(GQLParser.RIGHT_BRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	setLabelItem() {
	    let localctx = new SetLabelItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 162, GQLParser.RULE_setLabelItem);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1663;
	        this.bindingVariableReference();
	        this.state = 1664;
	        this.isOrColon();
	        this.state = 1665;
	        this.labelName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	removeStatement() {
	    let localctx = new RemoveStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 164, GQLParser.RULE_removeStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1667;
	        this.match(GQLParser.REMOVE);
	        this.state = 1668;
	        this.removeItemList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	removeItemList() {
	    let localctx = new RemoveItemListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 166, GQLParser.RULE_removeItemList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1670;
	        this.removeItem();
	        this.state = 1675;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===361) {
	            this.state = 1671;
	            this.match(GQLParser.COMMA);
	            this.state = 1672;
	            this.removeItem();
	            this.state = 1677;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	removeItem() {
	    let localctx = new RemoveItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 168, GQLParser.RULE_removeItem);
	    try {
	        this.state = 1680;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,87,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1678;
	            this.removePropertyItem();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1679;
	            this.removeLabelItem();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	removePropertyItem() {
	    let localctx = new RemovePropertyItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 170, GQLParser.RULE_removePropertyItem);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1682;
	        this.bindingVariableReference();
	        this.state = 1683;
	        this.match(GQLParser.PERIOD);
	        this.state = 1684;
	        this.propertyName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	removeLabelItem() {
	    let localctx = new RemoveLabelItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 172, GQLParser.RULE_removeLabelItem);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1686;
	        this.bindingVariableReference();
	        this.state = 1687;
	        this.isOrColon();
	        this.state = 1688;
	        this.labelName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	deleteStatement() {
	    let localctx = new DeleteStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 174, GQLParser.RULE_deleteStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1691;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===79 || _la===150) {
	            this.state = 1690;
	            _la = this._input.LA(1);
	            if(!(_la===79 || _la===150)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 1693;
	        this.match(GQLParser.DELETE);
	        this.state = 1694;
	        this.deleteItemList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	deleteItemList() {
	    let localctx = new DeleteItemListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 176, GQLParser.RULE_deleteItemList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1696;
	        this.deleteItem();
	        this.state = 1701;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===361) {
	            this.state = 1697;
	            this.match(GQLParser.COMMA);
	            this.state = 1698;
	            this.deleteItem();
	            this.state = 1703;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	deleteItem() {
	    let localctx = new DeleteItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 178, GQLParser.RULE_deleteItem);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1704;
	        this.valueExpression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	callDataModifyingProcedureStatement() {
	    let localctx = new CallDataModifyingProcedureStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 180, GQLParser.RULE_callDataModifyingProcedureStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1706;
	        this.callProcedureStatement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	compositeQueryStatement() {
	    let localctx = new CompositeQueryStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 182, GQLParser.RULE_compositeQueryStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1708;
	        this.compositeQueryExpression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	compositeQueryExpression(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new CompositeQueryExpressionContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 184;
	    this.enterRecursionRule(localctx, 184, GQLParser.RULE_compositeQueryExpression, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1711;
	        this.compositeQueryPrimary();
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 1719;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,90,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new CompositeQueryExpressionContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, GQLParser.RULE_compositeQueryExpression);
	                this.state = 1713;
	                if (!( this.precpred(this._ctx, 2))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
	                }
	                this.state = 1714;
	                this.queryConjunction();
	                this.state = 1715;
	                this.compositeQueryPrimary(); 
	            }
	            this.state = 1721;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,90,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	queryConjunction() {
	    let localctx = new QueryConjunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 186, GQLParser.RULE_queryConjunction);
	    try {
	        this.state = 1724;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 88:
	        case 125:
	        case 220:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1722;
	            this.setOperator();
	            break;
	        case 163:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1723;
	            this.match(GQLParser.OTHERWISE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	setOperator() {
	    let localctx = new SetOperatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 188, GQLParser.RULE_setOperator);
	    var _la = 0;
	    try {
	        this.state = 1738;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 220:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1726;
	            this.match(GQLParser.UNION);
	            this.state = 1728;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===22 || _la===80) {
	                this.state = 1727;
	                this.setQuantifier();
	            }

	            break;
	        case 88:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1730;
	            this.match(GQLParser.EXCEPT);
	            this.state = 1732;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===22 || _la===80) {
	                this.state = 1731;
	                this.setQuantifier();
	            }

	            break;
	        case 125:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1734;
	            this.match(GQLParser.INTERSECT);
	            this.state = 1736;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===22 || _la===80) {
	                this.state = 1735;
	                this.setQuantifier();
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	compositeQueryPrimary() {
	    let localctx = new CompositeQueryPrimaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 190, GQLParser.RULE_compositeQueryPrimary);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1740;
	        this.linearQueryStatement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	linearQueryStatement() {
	    let localctx = new LinearQueryStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 192, GQLParser.RULE_linearQueryStatement);
	    try {
	        this.state = 1744;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 187:
	        case 223:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1742;
	            this.focusedLinearQueryStatement();
	            break;
	        case 44:
	        case 91:
	        case 92:
	        case 100:
	        case 130:
	        case 132:
	        case 143:
	        case 159:
	        case 160:
	        case 162:
	        case 180:
	        case 195:
	        case 369:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1743;
	            this.ambientLinearQueryStatement();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	focusedLinearQueryStatement() {
	    let localctx = new FocusedLinearQueryStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 194, GQLParser.RULE_focusedLinearQueryStatement);
	    try {
	        this.state = 1756;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,98,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1749;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,97,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 1746;
	                    this.focusedLinearQueryStatementPart(); 
	                }
	                this.state = 1751;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,97,this._ctx);
	            }

	            this.state = 1752;
	            this.focusedLinearQueryAndPrimitiveResultStatementPart();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1753;
	            this.focusedPrimitiveResultStatement();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1754;
	            this.focusedNestedQuerySpecification();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1755;
	            this.selectStatement();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	focusedLinearQueryStatementPart() {
	    let localctx = new FocusedLinearQueryStatementPartContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 196, GQLParser.RULE_focusedLinearQueryStatementPart);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1758;
	        this.useGraphClause();
	        this.state = 1759;
	        this.simpleLinearQueryStatement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	focusedLinearQueryAndPrimitiveResultStatementPart() {
	    let localctx = new FocusedLinearQueryAndPrimitiveResultStatementPartContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 198, GQLParser.RULE_focusedLinearQueryAndPrimitiveResultStatementPart);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1761;
	        this.useGraphClause();
	        this.state = 1762;
	        this.simpleLinearQueryStatement();
	        this.state = 1763;
	        this.primitiveResultStatement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	focusedPrimitiveResultStatement() {
	    let localctx = new FocusedPrimitiveResultStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 200, GQLParser.RULE_focusedPrimitiveResultStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1765;
	        this.useGraphClause();
	        this.state = 1766;
	        this.primitiveResultStatement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	focusedNestedQuerySpecification() {
	    let localctx = new FocusedNestedQuerySpecificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 202, GQLParser.RULE_focusedNestedQuerySpecification);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1768;
	        this.useGraphClause();
	        this.state = 1769;
	        this.nestedQuerySpecification();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ambientLinearQueryStatement() {
	    let localctx = new AmbientLinearQueryStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 204, GQLParser.RULE_ambientLinearQueryStatement);
	    var _la = 0;
	    try {
	        this.state = 1776;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 44:
	        case 91:
	        case 92:
	        case 100:
	        case 130:
	        case 132:
	        case 143:
	        case 159:
	        case 160:
	        case 162:
	        case 180:
	        case 195:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1772;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===44 || _la===91 || _la===100 || ((((_la - 130)) & ~0x1f) === 0 && ((1 << (_la - 130)) & 1610620933) !== 0) || _la===162 || _la===195) {
	                this.state = 1771;
	                this.simpleLinearQueryStatement();
	            }

	            this.state = 1774;
	            this.primitiveResultStatement();
	            break;
	        case 369:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1775;
	            this.nestedQuerySpecification();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simpleLinearQueryStatement() {
	    let localctx = new SimpleLinearQueryStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 206, GQLParser.RULE_simpleLinearQueryStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1779; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 1778;
	            this.simpleQueryStatement();
	            this.state = 1781; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===44 || _la===91 || _la===100 || ((((_la - 130)) & ~0x1f) === 0 && ((1 << (_la - 130)) & 1610620933) !== 0) || _la===162 || _la===195);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simpleQueryStatement() {
	    let localctx = new SimpleQueryStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 208, GQLParser.RULE_simpleQueryStatement);
	    try {
	        this.state = 1785;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,102,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1783;
	            this.primitiveQueryStatement();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1784;
	            this.callQueryStatement();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	primitiveQueryStatement() {
	    let localctx = new PrimitiveQueryStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 210, GQLParser.RULE_primitiveQueryStatement);
	    try {
	        this.state = 1792;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 143:
	        case 160:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1787;
	            this.matchStatement();
	            break;
	        case 130:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1788;
	            this.letStatement();
	            break;
	        case 100:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1789;
	            this.forStatement();
	            break;
	        case 91:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1790;
	            this.filterStatement();
	            break;
	        case 132:
	        case 159:
	        case 162:
	        case 195:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1791;
	            this.orderByAndPageStatement();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	matchStatement() {
	    let localctx = new MatchStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 212, GQLParser.RULE_matchStatement);
	    try {
	        this.state = 1796;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 143:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1794;
	            this.simpleMatchStatement();
	            break;
	        case 160:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1795;
	            this.optionalMatchStatement();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simpleMatchStatement() {
	    let localctx = new SimpleMatchStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 214, GQLParser.RULE_simpleMatchStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1798;
	        this.match(GQLParser.MATCH);
	        this.state = 1799;
	        this.graphPatternBindingTable();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	optionalMatchStatement() {
	    let localctx = new OptionalMatchStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 216, GQLParser.RULE_optionalMatchStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1801;
	        this.match(GQLParser.OPTIONAL);
	        this.state = 1802;
	        this.optionalOperand();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	optionalOperand() {
	    let localctx = new OptionalOperandContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 218, GQLParser.RULE_optionalOperand);
	    try {
	        this.state = 1813;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 143:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1804;
	            this.simpleMatchStatement();
	            break;
	        case 369:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1805;
	            this.match(GQLParser.LEFT_BRACE);
	            this.state = 1806;
	            this.matchStatementBlock();
	            this.state = 1807;
	            this.match(GQLParser.RIGHT_BRACE);
	            break;
	        case 371:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1809;
	            this.match(GQLParser.LEFT_PAREN);
	            this.state = 1810;
	            this.matchStatementBlock();
	            this.state = 1811;
	            this.match(GQLParser.RIGHT_PAREN);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	matchStatementBlock() {
	    let localctx = new MatchStatementBlockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 220, GQLParser.RULE_matchStatementBlock);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1816; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 1815;
	            this.matchStatement();
	            this.state = 1818; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===143 || _la===160);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	callQueryStatement() {
	    let localctx = new CallQueryStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 222, GQLParser.RULE_callQueryStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1820;
	        this.callProcedureStatement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	filterStatement() {
	    let localctx = new FilterStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 224, GQLParser.RULE_filterStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1822;
	        this.match(GQLParser.FILTER);
	        this.state = 1825;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 230:
	            this.state = 1823;
	            this.whereClause();
	            break;
	        case 2:
	        case 3:
	        case 4:
	        case 7:
	        case 8:
	        case 9:
	        case 10:
	        case 11:
	        case 12:
	        case 13:
	        case 14:
	        case 15:
	        case 16:
	        case 17:
	        case 18:
	        case 19:
	        case 20:
	        case 21:
	        case 23:
	        case 26:
	        case 30:
	        case 32:
	        case 33:
	        case 40:
	        case 42:
	        case 45:
	        case 46:
	        case 47:
	        case 48:
	        case 49:
	        case 51:
	        case 52:
	        case 55:
	        case 56:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 64:
	        case 68:
	        case 69:
	        case 70:
	        case 71:
	        case 75:
	        case 83:
	        case 84:
	        case 85:
	        case 89:
	        case 90:
	        case 99:
	        case 102:
	        case 129:
	        case 130:
	        case 133:
	        case 134:
	        case 136:
	        case 137:
	        case 138:
	        case 139:
	        case 140:
	        case 141:
	        case 142:
	        case 144:
	        case 145:
	        case 147:
	        case 151:
	        case 152:
	        case 154:
	        case 156:
	        case 157:
	        case 166:
	        case 167:
	        case 169:
	        case 170:
	        case 171:
	        case 173:
	        case 174:
	        case 176:
	        case 181:
	        case 183:
	        case 184:
	        case 189:
	        case 192:
	        case 193:
	        case 194:
	        case 198:
	        case 200:
	        case 201:
	        case 203:
	        case 204:
	        case 205:
	        case 207:
	        case 208:
	        case 210:
	        case 222:
	        case 225:
	        case 236:
	        case 237:
	        case 277:
	        case 278:
	        case 279:
	        case 280:
	        case 281:
	        case 282:
	        case 283:
	        case 284:
	        case 285:
	        case 286:
	        case 287:
	        case 288:
	        case 289:
	        case 290:
	        case 291:
	        case 292:
	        case 293:
	        case 294:
	        case 295:
	        case 296:
	        case 297:
	        case 298:
	        case 299:
	        case 300:
	        case 301:
	        case 302:
	        case 303:
	        case 304:
	        case 305:
	        case 306:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 315:
	        case 316:
	        case 317:
	        case 318:
	        case 319:
	        case 320:
	        case 321:
	        case 322:
	        case 323:
	        case 324:
	        case 325:
	        case 327:
	        case 369:
	        case 370:
	        case 371:
	        case 373:
	        case 376:
	            this.state = 1824;
	            this.searchCondition();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	letStatement() {
	    let localctx = new LetStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 226, GQLParser.RULE_letStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1827;
	        this.match(GQLParser.LET);
	        this.state = 1828;
	        this.letVariableDefinitionList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	letVariableDefinitionList() {
	    let localctx = new LetVariableDefinitionListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 228, GQLParser.RULE_letVariableDefinitionList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1830;
	        this.letVariableDefinition();
	        this.state = 1835;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===361) {
	            this.state = 1831;
	            this.match(GQLParser.COMMA);
	            this.state = 1832;
	            this.letVariableDefinition();
	            this.state = 1837;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	letVariableDefinition() {
	    let localctx = new LetVariableDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 230, GQLParser.RULE_letVariableDefinition);
	    try {
	        this.state = 1843;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 225:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1838;
	            this.valueVariableDefinition();
	            break;
	        case 277:
	        case 278:
	        case 279:
	        case 280:
	        case 281:
	        case 282:
	        case 283:
	        case 284:
	        case 285:
	        case 286:
	        case 287:
	        case 288:
	        case 289:
	        case 290:
	        case 291:
	        case 292:
	        case 293:
	        case 294:
	        case 295:
	        case 296:
	        case 297:
	        case 298:
	        case 299:
	        case 300:
	        case 301:
	        case 302:
	        case 303:
	        case 304:
	        case 305:
	        case 306:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 315:
	        case 316:
	        case 317:
	        case 318:
	        case 319:
	        case 320:
	        case 321:
	        case 322:
	        case 323:
	        case 324:
	        case 325:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1839;
	            this.bindingVariable();
	            this.state = 1840;
	            this.match(GQLParser.EQUALS_OPERATOR);
	            this.state = 1841;
	            this.valueExpression(0);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	forStatement() {
	    let localctx = new ForStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 232, GQLParser.RULE_forStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1845;
	        this.match(GQLParser.FOR);
	        this.state = 1846;
	        this.forItem();
	        this.state = 1848;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===231) {
	            this.state = 1847;
	            this.forOrdinalityOrOffset();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	forItem() {
	    let localctx = new ForItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 234, GQLParser.RULE_forItem);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1850;
	        this.forItemAlias();
	        this.state = 1851;
	        this.forItemSource();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	forItemAlias() {
	    let localctx = new ForItemAliasContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 236, GQLParser.RULE_forItemAlias);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1853;
	        this.bindingVariable();
	        this.state = 1854;
	        this.match(GQLParser.IN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	forItemSource() {
	    let localctx = new ForItemSourceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 238, GQLParser.RULE_forItemSource);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1856;
	        this.valueExpression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	forOrdinalityOrOffset() {
	    let localctx = new ForOrdinalityOrOffsetContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 240, GQLParser.RULE_forOrdinalityOrOffset);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1858;
	        this.match(GQLParser.WITH);
	        this.state = 1859;
	        _la = this._input.LA(1);
	        if(!(_la===159 || _la===304)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 1860;
	        this.bindingVariable();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	orderByAndPageStatement() {
	    let localctx = new OrderByAndPageStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 242, GQLParser.RULE_orderByAndPageStatement);
	    try {
	        this.state = 1874;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 162:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1862;
	            this.orderByClause();
	            this.state = 1864;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,111,this._ctx);
	            if(la_===1) {
	                this.state = 1863;
	                this.offsetClause();

	            }
	            this.state = 1867;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,112,this._ctx);
	            if(la_===1) {
	                this.state = 1866;
	                this.limitClause();

	            }
	            break;
	        case 159:
	        case 195:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1869;
	            this.offsetClause();
	            this.state = 1871;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,113,this._ctx);
	            if(la_===1) {
	                this.state = 1870;
	                this.limitClause();

	            }
	            break;
	        case 132:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1873;
	            this.limitClause();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	primitiveResultStatement() {
	    let localctx = new PrimitiveResultStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 244, GQLParser.RULE_primitiveResultStatement);
	    try {
	        this.state = 1881;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 180:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1876;
	            this.returnStatement();
	            this.state = 1878;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,115,this._ctx);
	            if(la_===1) {
	                this.state = 1877;
	                this.orderByAndPageStatement();

	            }
	            break;
	        case 92:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1880;
	            this.match(GQLParser.FINISH);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	returnStatement() {
	    let localctx = new ReturnStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 246, GQLParser.RULE_returnStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1883;
	        this.match(GQLParser.RETURN);
	        this.state = 1884;
	        this.returnStatementBody();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	returnStatementBody() {
	    let localctx = new ReturnStatementBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 248, GQLParser.RULE_returnStatementBody);
	    var _la = 0;
	    try {
	        this.state = 1898;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,120,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1887;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===22 || _la===80) {
	                this.state = 1886;
	                this.setQuantifier();
	            }

	            this.state = 1891;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 359:
	                this.state = 1889;
	                this.match(GQLParser.ASTERISK);
	                break;
	            case 2:
	            case 3:
	            case 4:
	            case 7:
	            case 8:
	            case 9:
	            case 10:
	            case 11:
	            case 12:
	            case 13:
	            case 14:
	            case 15:
	            case 16:
	            case 17:
	            case 18:
	            case 19:
	            case 20:
	            case 21:
	            case 23:
	            case 26:
	            case 30:
	            case 32:
	            case 33:
	            case 40:
	            case 42:
	            case 45:
	            case 46:
	            case 47:
	            case 48:
	            case 49:
	            case 51:
	            case 52:
	            case 55:
	            case 56:
	            case 59:
	            case 60:
	            case 61:
	            case 62:
	            case 64:
	            case 68:
	            case 69:
	            case 70:
	            case 71:
	            case 75:
	            case 83:
	            case 84:
	            case 85:
	            case 89:
	            case 90:
	            case 99:
	            case 102:
	            case 129:
	            case 130:
	            case 133:
	            case 134:
	            case 136:
	            case 137:
	            case 138:
	            case 139:
	            case 140:
	            case 141:
	            case 142:
	            case 144:
	            case 145:
	            case 147:
	            case 151:
	            case 152:
	            case 154:
	            case 156:
	            case 157:
	            case 166:
	            case 167:
	            case 169:
	            case 170:
	            case 171:
	            case 173:
	            case 174:
	            case 176:
	            case 181:
	            case 183:
	            case 184:
	            case 189:
	            case 192:
	            case 193:
	            case 194:
	            case 198:
	            case 200:
	            case 201:
	            case 203:
	            case 204:
	            case 205:
	            case 207:
	            case 208:
	            case 210:
	            case 222:
	            case 225:
	            case 236:
	            case 237:
	            case 277:
	            case 278:
	            case 279:
	            case 280:
	            case 281:
	            case 282:
	            case 283:
	            case 284:
	            case 285:
	            case 286:
	            case 287:
	            case 288:
	            case 289:
	            case 290:
	            case 291:
	            case 292:
	            case 293:
	            case 294:
	            case 295:
	            case 296:
	            case 297:
	            case 298:
	            case 299:
	            case 300:
	            case 301:
	            case 302:
	            case 303:
	            case 304:
	            case 305:
	            case 306:
	            case 307:
	            case 308:
	            case 309:
	            case 310:
	            case 311:
	            case 312:
	            case 313:
	            case 314:
	            case 315:
	            case 316:
	            case 317:
	            case 318:
	            case 319:
	            case 320:
	            case 321:
	            case 322:
	            case 323:
	            case 324:
	            case 325:
	            case 327:
	            case 369:
	            case 370:
	            case 371:
	            case 373:
	            case 376:
	                this.state = 1890;
	                this.returnItemList();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 1894;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,119,this._ctx);
	            if(la_===1) {
	                this.state = 1893;
	                this.groupByClause();

	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1896;
	            this.match(GQLParser.NO);
	            this.state = 1897;
	            this.match(GQLParser.BINDINGS);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	returnItemList() {
	    let localctx = new ReturnItemListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 250, GQLParser.RULE_returnItemList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1900;
	        this.returnItem();
	        this.state = 1905;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,121,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1901;
	                this.match(GQLParser.COMMA);
	                this.state = 1902;
	                this.returnItem(); 
	            }
	            this.state = 1907;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,121,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	returnItem() {
	    let localctx = new ReturnItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 252, GQLParser.RULE_returnItem);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1908;
	        this.aggregatingValueExpression();
	        this.state = 1910;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,122,this._ctx);
	        if(la_===1) {
	            this.state = 1909;
	            this.returnItemAlias();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	returnItemAlias() {
	    let localctx = new ReturnItemAliasContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 254, GQLParser.RULE_returnItemAlias);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1912;
	        this.match(GQLParser.AS);
	        this.state = 1913;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selectStatement() {
	    let localctx = new SelectStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 256, GQLParser.RULE_selectStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1915;
	        this.match(GQLParser.SELECT);
	        this.state = 1917;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===22 || _la===80) {
	            this.state = 1916;
	            this.setQuantifier();
	        }

	        this.state = 1921;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 359:
	            this.state = 1919;
	            this.match(GQLParser.ASTERISK);
	            break;
	        case 2:
	        case 3:
	        case 4:
	        case 7:
	        case 8:
	        case 9:
	        case 10:
	        case 11:
	        case 12:
	        case 13:
	        case 14:
	        case 15:
	        case 16:
	        case 17:
	        case 18:
	        case 19:
	        case 20:
	        case 21:
	        case 23:
	        case 26:
	        case 30:
	        case 32:
	        case 33:
	        case 40:
	        case 42:
	        case 45:
	        case 46:
	        case 47:
	        case 48:
	        case 49:
	        case 51:
	        case 52:
	        case 55:
	        case 56:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 64:
	        case 68:
	        case 69:
	        case 70:
	        case 71:
	        case 75:
	        case 83:
	        case 84:
	        case 85:
	        case 89:
	        case 90:
	        case 99:
	        case 102:
	        case 129:
	        case 130:
	        case 133:
	        case 134:
	        case 136:
	        case 137:
	        case 138:
	        case 139:
	        case 140:
	        case 141:
	        case 142:
	        case 144:
	        case 145:
	        case 147:
	        case 151:
	        case 152:
	        case 154:
	        case 156:
	        case 157:
	        case 166:
	        case 167:
	        case 169:
	        case 170:
	        case 171:
	        case 173:
	        case 174:
	        case 176:
	        case 181:
	        case 183:
	        case 184:
	        case 189:
	        case 192:
	        case 193:
	        case 194:
	        case 198:
	        case 200:
	        case 201:
	        case 203:
	        case 204:
	        case 205:
	        case 207:
	        case 208:
	        case 210:
	        case 222:
	        case 225:
	        case 236:
	        case 237:
	        case 277:
	        case 278:
	        case 279:
	        case 280:
	        case 281:
	        case 282:
	        case 283:
	        case 284:
	        case 285:
	        case 286:
	        case 287:
	        case 288:
	        case 289:
	        case 290:
	        case 291:
	        case 292:
	        case 293:
	        case 294:
	        case 295:
	        case 296:
	        case 297:
	        case 298:
	        case 299:
	        case 300:
	        case 301:
	        case 302:
	        case 303:
	        case 304:
	        case 305:
	        case 306:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 315:
	        case 316:
	        case 317:
	        case 318:
	        case 319:
	        case 320:
	        case 321:
	        case 322:
	        case 323:
	        case 324:
	        case 325:
	        case 327:
	        case 369:
	        case 370:
	        case 371:
	        case 373:
	        case 376:
	            this.state = 1920;
	            this.selectItemList();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 1942;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,131,this._ctx);
	        if(la_===1) {
	            this.state = 1923;
	            this.selectStatementBody();
	            this.state = 1925;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,125,this._ctx);
	            if(la_===1) {
	                this.state = 1924;
	                this.whereClause();

	            }
	            this.state = 1928;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,126,this._ctx);
	            if(la_===1) {
	                this.state = 1927;
	                this.groupByClause();

	            }
	            this.state = 1931;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,127,this._ctx);
	            if(la_===1) {
	                this.state = 1930;
	                this.havingClause();

	            }
	            this.state = 1934;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,128,this._ctx);
	            if(la_===1) {
	                this.state = 1933;
	                this.orderByClause();

	            }
	            this.state = 1937;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,129,this._ctx);
	            if(la_===1) {
	                this.state = 1936;
	                this.offsetClause();

	            }
	            this.state = 1940;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,130,this._ctx);
	            if(la_===1) {
	                this.state = 1939;
	                this.limitClause();

	            }

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selectItemList() {
	    let localctx = new SelectItemListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 258, GQLParser.RULE_selectItemList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1944;
	        this.selectItem();
	        this.state = 1949;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,132,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1945;
	                this.match(GQLParser.COMMA);
	                this.state = 1946;
	                this.selectItem(); 
	            }
	            this.state = 1951;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,132,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selectItem() {
	    let localctx = new SelectItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 260, GQLParser.RULE_selectItem);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1952;
	        this.aggregatingValueExpression();
	        this.state = 1954;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,133,this._ctx);
	        if(la_===1) {
	            this.state = 1953;
	            this.selectItemAlias();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selectItemAlias() {
	    let localctx = new SelectItemAliasContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 262, GQLParser.RULE_selectItemAlias);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1956;
	        this.match(GQLParser.AS);
	        this.state = 1957;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	havingClause() {
	    let localctx = new HavingClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 264, GQLParser.RULE_havingClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1959;
	        this.match(GQLParser.HAVING);
	        this.state = 1960;
	        this.searchCondition();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selectStatementBody() {
	    let localctx = new SelectStatementBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 266, GQLParser.RULE_selectStatementBody);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1962;
	        this.match(GQLParser.FROM);
	        this.state = 1965;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,134,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1963;
	            this.selectGraphMatchList();
	            break;

	        case 2:
	            this.state = 1964;
	            this.selectQuerySpecification();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selectGraphMatchList() {
	    let localctx = new SelectGraphMatchListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 268, GQLParser.RULE_selectGraphMatchList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1967;
	        this.selectGraphMatch();
	        this.state = 1972;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,135,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1968;
	                this.match(GQLParser.COMMA);
	                this.state = 1969;
	                this.selectGraphMatch(); 
	            }
	            this.state = 1974;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,135,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selectGraphMatch() {
	    let localctx = new SelectGraphMatchContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 270, GQLParser.RULE_selectGraphMatch);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1975;
	        this.graphExpression();
	        this.state = 1976;
	        this.matchStatement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selectQuerySpecification() {
	    let localctx = new SelectQuerySpecificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 272, GQLParser.RULE_selectQuerySpecification);
	    try {
	        this.state = 1982;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,136,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1978;
	            this.nestedQuerySpecification();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1979;
	            this.graphExpression();
	            this.state = 1980;
	            this.nestedQuerySpecification();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	callProcedureStatement() {
	    let localctx = new CallProcedureStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 274, GQLParser.RULE_callProcedureStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1985;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===160) {
	            this.state = 1984;
	            this.match(GQLParser.OPTIONAL);
	        }

	        this.state = 1987;
	        this.match(GQLParser.CALL);
	        this.state = 1988;
	        this.procedureCall();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	procedureCall() {
	    let localctx = new ProcedureCallContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 276, GQLParser.RULE_procedureCall);
	    try {
	        this.state = 1992;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 369:
	        case 371:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1990;
	            this.inlineProcedureCall();
	            break;
	        case 4:
	        case 5:
	        case 67:
	        case 106:
	        case 277:
	        case 278:
	        case 279:
	        case 280:
	        case 281:
	        case 282:
	        case 283:
	        case 284:
	        case 285:
	        case 286:
	        case 287:
	        case 288:
	        case 289:
	        case 290:
	        case 291:
	        case 292:
	        case 293:
	        case 294:
	        case 295:
	        case 296:
	        case 297:
	        case 298:
	        case 299:
	        case 300:
	        case 301:
	        case 302:
	        case 303:
	        case 304:
	        case 305:
	        case 306:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 315:
	        case 316:
	        case 317:
	        case 318:
	        case 319:
	        case 320:
	        case 321:
	        case 322:
	        case 323:
	        case 324:
	        case 325:
	        case 326:
	        case 334:
	        case 375:
	        case 383:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1991;
	            this.namedProcedureCall();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	inlineProcedureCall() {
	    let localctx = new InlineProcedureCallContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 278, GQLParser.RULE_inlineProcedureCall);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1995;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===371) {
	            this.state = 1994;
	            this.variableScopeClause();
	        }

	        this.state = 1997;
	        this.nestedProcedureSpecification();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variableScopeClause() {
	    let localctx = new VariableScopeClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 280, GQLParser.RULE_variableScopeClause);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1999;
	        this.match(GQLParser.LEFT_PAREN);
	        this.state = 2001;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 277)) & ~0x1f) === 0 && ((1 << (_la - 277)) & 4294967295) !== 0) || ((((_la - 309)) & ~0x1f) === 0 && ((1 << (_la - 309)) & 131071) !== 0)) {
	            this.state = 2000;
	            this.bindingVariableReferenceList();
	        }

	        this.state = 2003;
	        this.match(GQLParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bindingVariableReferenceList() {
	    let localctx = new BindingVariableReferenceListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 282, GQLParser.RULE_bindingVariableReferenceList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2005;
	        this.bindingVariableReference();
	        this.state = 2010;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===361) {
	            this.state = 2006;
	            this.match(GQLParser.COMMA);
	            this.state = 2007;
	            this.bindingVariableReference();
	            this.state = 2012;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	namedProcedureCall() {
	    let localctx = new NamedProcedureCallContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 284, GQLParser.RULE_namedProcedureCall);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2013;
	        this.procedureReference();
	        this.state = 2014;
	        this.match(GQLParser.LEFT_PAREN);
	        this.state = 2016;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 2)) & ~0x1f) === 0 && ((1 << (_la - 2)) & 3509583847) !== 0) || ((((_la - 40)) & ~0x1f) === 0 && ((1 << (_la - 40)) & 4051278821) !== 0) || ((((_la - 75)) & ~0x1f) === 0 && ((1 << (_la - 75)) & 151045889) !== 0) || ((((_la - 129)) & ~0x1f) === 0 && ((1 << (_la - 129)) & 449167283) !== 0) || ((((_la - 166)) & ~0x1f) === 0 && ((1 << (_la - 166)) & 478578107) !== 0) || ((((_la - 198)) & ~0x1f) === 0 && ((1 << (_la - 198)) & 151000813) !== 0) || _la===236 || _la===237 || ((((_la - 277)) & ~0x1f) === 0 && ((1 << (_la - 277)) & 4294967295) !== 0) || ((((_la - 309)) & ~0x1f) === 0 && ((1 << (_la - 309)) & 393215) !== 0) || ((((_la - 369)) & ~0x1f) === 0 && ((1 << (_la - 369)) & 151) !== 0)) {
	            this.state = 2015;
	            this.procedureArgumentList();
	        }

	        this.state = 2018;
	        this.match(GQLParser.RIGHT_PAREN);
	        this.state = 2020;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===234) {
	            this.state = 2019;
	            this.yieldClause();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	procedureArgumentList() {
	    let localctx = new ProcedureArgumentListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 286, GQLParser.RULE_procedureArgumentList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2022;
	        this.procedureArgument();
	        this.state = 2027;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===361) {
	            this.state = 2023;
	            this.match(GQLParser.COMMA);
	            this.state = 2024;
	            this.procedureArgument();
	            this.state = 2029;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	procedureArgument() {
	    let localctx = new ProcedureArgumentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 288, GQLParser.RULE_procedureArgument);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2030;
	        this.valueExpression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	atSchemaClause() {
	    let localctx = new AtSchemaClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 290, GQLParser.RULE_atSchemaClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2032;
	        this.match(GQLParser.AT);
	        this.state = 2033;
	        this.schemaReference();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	useGraphClause() {
	    let localctx = new UseGraphClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 292, GQLParser.RULE_useGraphClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2035;
	        this.match(GQLParser.USE);
	        this.state = 2036;
	        this.graphExpression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	graphPatternBindingTable() {
	    let localctx = new GraphPatternBindingTableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 294, GQLParser.RULE_graphPatternBindingTable);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2038;
	        this.graphPattern();
	        this.state = 2040;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,145,this._ctx);
	        if(la_===1) {
	            this.state = 2039;
	            this.graphPatternYieldClause();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	graphPatternYieldClause() {
	    let localctx = new GraphPatternYieldClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 296, GQLParser.RULE_graphPatternYieldClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2042;
	        this.match(GQLParser.YIELD);
	        this.state = 2043;
	        this.graphPatternYieldItemList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	graphPatternYieldItemList() {
	    let localctx = new GraphPatternYieldItemListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 298, GQLParser.RULE_graphPatternYieldItemList);
	    try {
	        this.state = 2055;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,147,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2045;
	            this.graphPatternYieldItem();
	            this.state = 2050;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,146,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 2046;
	                    this.match(GQLParser.COMMA);
	                    this.state = 2047;
	                    this.graphPatternYieldItem(); 
	                }
	                this.state = 2052;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,146,this._ctx);
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2053;
	            this.match(GQLParser.NO);
	            this.state = 2054;
	            this.match(GQLParser.BINDINGS);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	graphPatternYieldItem() {
	    let localctx = new GraphPatternYieldItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 300, GQLParser.RULE_graphPatternYieldItem);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2057;
	        this.bindingVariableReference();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	graphPattern() {
	    let localctx = new GraphPatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 302, GQLParser.RULE_graphPattern);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2060;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,148,this._ctx);
	        if(la_===1) {
	            this.state = 2059;
	            this.matchMode();

	        }
	        this.state = 2062;
	        this.pathPatternList();
	        this.state = 2064;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,149,this._ctx);
	        if(la_===1) {
	            this.state = 2063;
	            this.keepClause();

	        }
	        this.state = 2067;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,150,this._ctx);
	        if(la_===1) {
	            this.state = 2066;
	            this.graphPatternWhereClause();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	matchMode() {
	    let localctx = new MatchModeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 304, GQLParser.RULE_matchMode);
	    try {
	        this.state = 2071;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 309:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2069;
	            this.repeatableElementsMatchMode();
	            break;
	        case 282:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2070;
	            this.differentEdgesMatchMode();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	repeatableElementsMatchMode() {
	    let localctx = new RepeatableElementsMatchModeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 306, GQLParser.RULE_repeatableElementsMatchMode);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2073;
	        this.match(GQLParser.REPEATABLE);
	        this.state = 2074;
	        this.elementBindingsOrElements();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	differentEdgesMatchMode() {
	    let localctx = new DifferentEdgesMatchModeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 308, GQLParser.RULE_differentEdgesMatchMode);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2076;
	        this.match(GQLParser.DIFFERENT);
	        this.state = 2077;
	        this.edgeBindingsOrEdges();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elementBindingsOrElements() {
	    let localctx = new ElementBindingsOrElementsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 310, GQLParser.RULE_elementBindingsOrElements);
	    try {
	        this.state = 2084;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 286:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2079;
	            this.match(GQLParser.ELEMENT);
	            this.state = 2081;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,152,this._ctx);
	            if(la_===1) {
	                this.state = 2080;
	                this.match(GQLParser.BINDINGS);

	            }
	            break;
	        case 287:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2083;
	            this.match(GQLParser.ELEMENTS);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	edgeBindingsOrEdges() {
	    let localctx = new EdgeBindingsOrEdgesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 312, GQLParser.RULE_edgeBindingsOrEdges);
	    try {
	        this.state = 2091;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 284:
	        case 307:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2086;
	            this.edgeSynonym();
	            this.state = 2088;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,154,this._ctx);
	            if(la_===1) {
	                this.state = 2087;
	                this.match(GQLParser.BINDINGS);

	            }
	            break;
	        case 285:
	        case 308:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2090;
	            this.edgesSynonym();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathPatternList() {
	    let localctx = new PathPatternListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 314, GQLParser.RULE_pathPatternList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2093;
	        this.pathPattern();
	        this.state = 2098;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,156,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 2094;
	                this.match(GQLParser.COMMA);
	                this.state = 2095;
	                this.pathPattern(); 
	            }
	            this.state = 2100;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,156,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathPattern() {
	    let localctx = new PathPatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 316, GQLParser.RULE_pathPattern);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2102;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,157,this._ctx);
	        if(la_===1) {
	            this.state = 2101;
	            this.pathVariableDeclaration();

	        }
	        this.state = 2105;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===22 || _la===25 || _la===277 || ((((_la - 310)) & ~0x1f) === 0 && ((1 << (_la - 310)) & 2115) !== 0)) {
	            this.state = 2104;
	            this.pathPatternPrefix();
	        }

	        this.state = 2107;
	        this.pathPatternExpression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathVariableDeclaration() {
	    let localctx = new PathVariableDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 318, GQLParser.RULE_pathVariableDeclaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2109;
	        this.pathVariable();
	        this.state = 2110;
	        this.match(GQLParser.EQUALS_OPERATOR);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	keepClause() {
	    let localctx = new KeepClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 320, GQLParser.RULE_keepClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2112;
	        this.match(GQLParser.KEEP);
	        this.state = 2113;
	        this.pathPatternPrefix();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	graphPatternWhereClause() {
	    let localctx = new GraphPatternWhereClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 322, GQLParser.RULE_graphPatternWhereClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2115;
	        this.match(GQLParser.WHERE);
	        this.state = 2116;
	        this.searchCondition();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	insertGraphPattern() {
	    let localctx = new InsertGraphPatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 324, GQLParser.RULE_insertGraphPattern);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2118;
	        this.insertPathPatternList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	insertPathPatternList() {
	    let localctx = new InsertPathPatternListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 326, GQLParser.RULE_insertPathPatternList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2120;
	        this.insertPathPattern();
	        this.state = 2125;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===361) {
	            this.state = 2121;
	            this.match(GQLParser.COMMA);
	            this.state = 2122;
	            this.insertPathPattern();
	            this.state = 2127;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	insertPathPattern() {
	    let localctx = new InsertPathPatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 328, GQLParser.RULE_insertPathPattern);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2128;
	        this.insertNodePattern();
	        this.state = 2134;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 338)) & ~0x1f) === 0 && ((1 << (_la - 338)) & 131137) !== 0)) {
	            this.state = 2129;
	            this.insertEdgePattern();
	            this.state = 2130;
	            this.insertNodePattern();
	            this.state = 2136;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	insertNodePattern() {
	    let localctx = new InsertNodePatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 330, GQLParser.RULE_insertNodePattern);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2137;
	        this.match(GQLParser.LEFT_PAREN);
	        this.state = 2139;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===127 || ((((_la - 277)) & ~0x1f) === 0 && ((1 << (_la - 277)) & 4294967295) !== 0) || ((((_la - 309)) & ~0x1f) === 0 && ((1 << (_la - 309)) & 131071) !== 0) || _la===360 || _la===369) {
	            this.state = 2138;
	            this.insertElementPatternFiller();
	        }

	        this.state = 2141;
	        this.match(GQLParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	insertEdgePattern() {
	    let localctx = new InsertEdgePatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 332, GQLParser.RULE_insertEdgePattern);
	    try {
	        this.state = 2146;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 338:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2143;
	            this.insertEdgePointingLeft();
	            break;
	        case 344:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2144;
	            this.insertEdgePointingRight();
	            break;
	        case 355:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2145;
	            this.insertEdgeUndirected();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	insertEdgePointingLeft() {
	    let localctx = new InsertEdgePointingLeftContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 334, GQLParser.RULE_insertEdgePointingLeft);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2148;
	        this.match(GQLParser.LEFT_ARROW_BRACKET);
	        this.state = 2150;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===127 || ((((_la - 277)) & ~0x1f) === 0 && ((1 << (_la - 277)) & 4294967295) !== 0) || ((((_la - 309)) & ~0x1f) === 0 && ((1 << (_la - 309)) & 131071) !== 0) || _la===360 || _la===369) {
	            this.state = 2149;
	            this.insertElementPatternFiller();
	        }

	        this.state = 2152;
	        this.match(GQLParser.RIGHT_BRACKET_MINUS);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	insertEdgePointingRight() {
	    let localctx = new InsertEdgePointingRightContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 336, GQLParser.RULE_insertEdgePointingRight);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2154;
	        this.match(GQLParser.MINUS_LEFT_BRACKET);
	        this.state = 2156;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===127 || ((((_la - 277)) & ~0x1f) === 0 && ((1 << (_la - 277)) & 4294967295) !== 0) || ((((_la - 309)) & ~0x1f) === 0 && ((1 << (_la - 309)) & 131071) !== 0) || _la===360 || _la===369) {
	            this.state = 2155;
	            this.insertElementPatternFiller();
	        }

	        this.state = 2158;
	        this.match(GQLParser.BRACKET_RIGHT_ARROW);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	insertEdgeUndirected() {
	    let localctx = new InsertEdgeUndirectedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 338, GQLParser.RULE_insertEdgeUndirected);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2160;
	        this.match(GQLParser.TILDE_LEFT_BRACKET);
	        this.state = 2162;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===127 || ((((_la - 277)) & ~0x1f) === 0 && ((1 << (_la - 277)) & 4294967295) !== 0) || ((((_la - 309)) & ~0x1f) === 0 && ((1 << (_la - 309)) & 131071) !== 0) || _la===360 || _la===369) {
	            this.state = 2161;
	            this.insertElementPatternFiller();
	        }

	        this.state = 2164;
	        this.match(GQLParser.RIGHT_BRACKET_TILDE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	insertElementPatternFiller() {
	    let localctx = new InsertElementPatternFillerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 340, GQLParser.RULE_insertElementPatternFiller);
	    var _la = 0;
	    try {
	        this.state = 2174;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,168,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2166;
	            this.elementVariableDeclaration();
	            this.state = 2168;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===127 || _la===360 || _la===369) {
	                this.state = 2167;
	                this.labelAndPropertySetSpecification();
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2171;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 277)) & ~0x1f) === 0 && ((1 << (_la - 277)) & 4294967295) !== 0) || ((((_la - 309)) & ~0x1f) === 0 && ((1 << (_la - 309)) & 131071) !== 0)) {
	                this.state = 2170;
	                this.elementVariableDeclaration();
	            }

	            this.state = 2173;
	            this.labelAndPropertySetSpecification();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	labelAndPropertySetSpecification() {
	    let localctx = new LabelAndPropertySetSpecificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 342, GQLParser.RULE_labelAndPropertySetSpecification);
	    var _la = 0;
	    try {
	        this.state = 2187;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,171,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2176;
	            this.isOrColon();
	            this.state = 2177;
	            this.labelSetSpecification();
	            this.state = 2179;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===369) {
	                this.state = 2178;
	                this.elementPropertySpecification();
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2184;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===127 || _la===360) {
	                this.state = 2181;
	                this.isOrColon();
	                this.state = 2182;
	                this.labelSetSpecification();
	            }

	            this.state = 2186;
	            this.elementPropertySpecification();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathPatternPrefix() {
	    let localctx = new PathPatternPrefixContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 344, GQLParser.RULE_pathPatternPrefix);
	    try {
	        this.state = 2191;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 277:
	        case 311:
	        case 316:
	        case 321:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2189;
	            this.pathModePrefix();
	            break;
	        case 22:
	        case 25:
	        case 310:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2190;
	            this.pathSearchPrefix();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathModePrefix() {
	    let localctx = new PathModePrefixContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 346, GQLParser.RULE_pathModePrefix);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2193;
	        this.pathMode();
	        this.state = 2195;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,173,this._ctx);
	        if(la_===1) {
	            this.state = 2194;
	            this.pathOrPaths();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathMode() {
	    let localctx = new PathModeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 348, GQLParser.RULE_pathMode);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2197;
	        _la = this._input.LA(1);
	        if(!(_la===277 || ((((_la - 311)) & ~0x1f) === 0 && ((1 << (_la - 311)) & 1057) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathSearchPrefix() {
	    let localctx = new PathSearchPrefixContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 350, GQLParser.RULE_pathSearchPrefix);
	    try {
	        this.state = 2202;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,174,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2199;
	            this.allPathSearch();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2200;
	            this.anyPathSearch();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2201;
	            this.shortestPathSearch();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	allPathSearch() {
	    let localctx = new AllPathSearchContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 352, GQLParser.RULE_allPathSearch);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2204;
	        this.match(GQLParser.ALL);
	        this.state = 2206;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,175,this._ctx);
	        if(la_===1) {
	            this.state = 2205;
	            this.pathMode();

	        }
	        this.state = 2209;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,176,this._ctx);
	        if(la_===1) {
	            this.state = 2208;
	            this.pathOrPaths();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathOrPaths() {
	    let localctx = new PathOrPathsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 354, GQLParser.RULE_pathOrPaths);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2211;
	        _la = this._input.LA(1);
	        if(!(_la===166 || _la===168)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	anyPathSearch() {
	    let localctx = new AnyPathSearchContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 356, GQLParser.RULE_anyPathSearch);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2213;
	        this.match(GQLParser.ANY);
	        this.state = 2215;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,177,this._ctx);
	        if(la_===1) {
	            this.state = 2214;
	            this.numberOfPaths();

	        }
	        this.state = 2218;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,178,this._ctx);
	        if(la_===1) {
	            this.state = 2217;
	            this.pathMode();

	        }
	        this.state = 2221;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,179,this._ctx);
	        if(la_===1) {
	            this.state = 2220;
	            this.pathOrPaths();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	numberOfPaths() {
	    let localctx = new NumberOfPathsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 358, GQLParser.RULE_numberOfPaths);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2223;
	        this.nonNegativeIntegerSpecification();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	shortestPathSearch() {
	    let localctx = new ShortestPathSearchContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 360, GQLParser.RULE_shortestPathSearch);
	    try {
	        this.state = 2229;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,180,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2225;
	            this.allShortestPathSearch();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2226;
	            this.anyShortestPathSearch();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2227;
	            this.countedShortestPathSearch();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2228;
	            this.countedShortestGroupSearch();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	allShortestPathSearch() {
	    let localctx = new AllShortestPathSearchContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 362, GQLParser.RULE_allShortestPathSearch);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2231;
	        this.match(GQLParser.ALL);
	        this.state = 2232;
	        this.match(GQLParser.SHORTEST);
	        this.state = 2234;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,181,this._ctx);
	        if(la_===1) {
	            this.state = 2233;
	            this.pathMode();

	        }
	        this.state = 2237;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,182,this._ctx);
	        if(la_===1) {
	            this.state = 2236;
	            this.pathOrPaths();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	anyShortestPathSearch() {
	    let localctx = new AnyShortestPathSearchContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 364, GQLParser.RULE_anyShortestPathSearch);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2239;
	        this.match(GQLParser.ANY);
	        this.state = 2240;
	        this.match(GQLParser.SHORTEST);
	        this.state = 2242;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,183,this._ctx);
	        if(la_===1) {
	            this.state = 2241;
	            this.pathMode();

	        }
	        this.state = 2245;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,184,this._ctx);
	        if(la_===1) {
	            this.state = 2244;
	            this.pathOrPaths();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	countedShortestPathSearch() {
	    let localctx = new CountedShortestPathSearchContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 366, GQLParser.RULE_countedShortestPathSearch);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2247;
	        this.match(GQLParser.SHORTEST);
	        this.state = 2248;
	        this.numberOfPaths();
	        this.state = 2250;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,185,this._ctx);
	        if(la_===1) {
	            this.state = 2249;
	            this.pathMode();

	        }
	        this.state = 2253;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,186,this._ctx);
	        if(la_===1) {
	            this.state = 2252;
	            this.pathOrPaths();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	countedShortestGroupSearch() {
	    let localctx = new CountedShortestGroupSearchContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 368, GQLParser.RULE_countedShortestGroupSearch);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2255;
	        this.match(GQLParser.SHORTEST);
	        this.state = 2257;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 983040) !== 0) || _la===327) {
	            this.state = 2256;
	            this.numberOfGroups();
	        }

	        this.state = 2260;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===277 || ((((_la - 311)) & ~0x1f) === 0 && ((1 << (_la - 311)) & 1057) !== 0)) {
	            this.state = 2259;
	            this.pathMode();
	        }

	        this.state = 2263;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===166 || _la===168) {
	            this.state = 2262;
	            this.pathOrPaths();
	        }

	        this.state = 2265;
	        _la = this._input.LA(1);
	        if(!(_la===102 || _la===290)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	numberOfGroups() {
	    let localctx = new NumberOfGroupsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 370, GQLParser.RULE_numberOfGroups);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2267;
	        this.nonNegativeIntegerSpecification();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathPatternExpression() {
	    let localctx = new PathPatternExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 372, GQLParser.RULE_pathPatternExpression);
	    try {
	        this.state = 2284;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,192,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new PpePathTermContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2269;
	            this.pathTerm();
	            break;

	        case 2:
	            localctx = new PpeMultisetAlternationContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2270;
	            this.pathTerm();
	            this.state = 2273; 
	            this._errHandler.sync(this);
	            var _alt = 1;
	            do {
	            	switch (_alt) {
	            	case 1:
	            		this.state = 2271;
	            		this.match(GQLParser.MULTISET_ALTERNATION_OPERATOR);
	            		this.state = 2272;
	            		this.pathTerm();
	            		break;
	            	default:
	            		throw new antlr4.error.NoViableAltException(this);
	            	}
	            	this.state = 2275; 
	            	this._errHandler.sync(this);
	            	_alt = this._interp.adaptivePredict(this._input,190, this._ctx);
	            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	            break;

	        case 3:
	            localctx = new PpePatternUnionContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2277;
	            this.pathTerm();
	            this.state = 2280; 
	            this._errHandler.sync(this);
	            var _alt = 1;
	            do {
	            	switch (_alt) {
	            	case 1:
	            		this.state = 2278;
	            		this.match(GQLParser.VERTICAL_BAR);
	            		this.state = 2279;
	            		this.pathTerm();
	            		break;
	            	default:
	            		throw new antlr4.error.NoViableAltException(this);
	            	}
	            	this.state = 2282; 
	            	this._errHandler.sync(this);
	            	_alt = this._interp.adaptivePredict(this._input,191, this._ctx);
	            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathTerm() {
	    let localctx = new PathTermContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 374, GQLParser.RULE_pathTerm);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2287; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 2286;
	        		this.pathFactor();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 2289; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,193, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathFactor() {
	    let localctx = new PathFactorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 376, GQLParser.RULE_pathFactor);
	    try {
	        this.state = 2298;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,194,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new PfPathPrimaryContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2291;
	            this.pathPrimary();
	            break;

	        case 2:
	            localctx = new PfQuantifiedPathPrimaryContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2292;
	            this.pathPrimary();
	            this.state = 2293;
	            this.graphPatternQuantifier();
	            break;

	        case 3:
	            localctx = new PfQuestionedPathPrimaryContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2295;
	            this.pathPrimary();
	            this.state = 2296;
	            this.match(GQLParser.QUESTION_MARK);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathPrimary() {
	    let localctx = new PathPrimaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 378, GQLParser.RULE_pathPrimary);
	    try {
	        this.state = 2303;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,195,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new PpElementPatternContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2300;
	            this.elementPattern();
	            break;

	        case 2:
	            localctx = new PpParenthesizedPathPatternExpressionContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2301;
	            this.parenthesizedPathPatternExpression();
	            break;

	        case 3:
	            localctx = new PpSimplifiedPathPatternExpressionContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2302;
	            this.simplifiedPathPatternExpression();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elementPattern() {
	    let localctx = new ElementPatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 380, GQLParser.RULE_elementPattern);
	    try {
	        this.state = 2307;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 371:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2305;
	            this.nodePattern();
	            break;
	        case 336:
	        case 337:
	        case 338:
	        case 339:
	        case 340:
	        case 344:
	        case 347:
	        case 355:
	        case 356:
	        case 373:
	        case 384:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2306;
	            this.edgePattern();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nodePattern() {
	    let localctx = new NodePatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 382, GQLParser.RULE_nodePattern);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2309;
	        this.match(GQLParser.LEFT_PAREN);
	        this.state = 2310;
	        this.elementPatternFiller();
	        this.state = 2311;
	        this.match(GQLParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elementPatternFiller() {
	    let localctx = new ElementPatternFillerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 384, GQLParser.RULE_elementPatternFiller);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2314;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 277)) & ~0x1f) === 0 && ((1 << (_la - 277)) & 4294967295) !== 0) || ((((_la - 309)) & ~0x1f) === 0 && ((1 << (_la - 309)) & 131071) !== 0)) {
	            this.state = 2313;
	            this.elementVariableDeclaration();
	        }

	        this.state = 2317;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===127 || _la===360) {
	            this.state = 2316;
	            this.isLabelExpression();
	        }

	        this.state = 2320;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===230 || _la===369) {
	            this.state = 2319;
	            this.elementPatternPredicate();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elementVariableDeclaration() {
	    let localctx = new ElementVariableDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 386, GQLParser.RULE_elementVariableDeclaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2323;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,200,this._ctx);
	        if(la_===1) {
	            this.state = 2322;
	            this.match(GQLParser.TEMP);

	        }
	        this.state = 2325;
	        this.elementVariable();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	isLabelExpression() {
	    let localctx = new IsLabelExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 388, GQLParser.RULE_isLabelExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2327;
	        this.isOrColon();
	        this.state = 2328;
	        this.labelExpression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	isOrColon() {
	    let localctx = new IsOrColonContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 390, GQLParser.RULE_isOrColon);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2330;
	        _la = this._input.LA(1);
	        if(!(_la===127 || _la===360)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elementPatternPredicate() {
	    let localctx = new ElementPatternPredicateContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 392, GQLParser.RULE_elementPatternPredicate);
	    try {
	        this.state = 2334;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 230:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2332;
	            this.elementPatternWhereClause();
	            break;
	        case 369:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2333;
	            this.elementPropertySpecification();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elementPatternWhereClause() {
	    let localctx = new ElementPatternWhereClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 394, GQLParser.RULE_elementPatternWhereClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2336;
	        this.match(GQLParser.WHERE);
	        this.state = 2337;
	        this.searchCondition();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elementPropertySpecification() {
	    let localctx = new ElementPropertySpecificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 396, GQLParser.RULE_elementPropertySpecification);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2339;
	        this.match(GQLParser.LEFT_BRACE);
	        this.state = 2340;
	        this.propertyKeyValuePairList();
	        this.state = 2341;
	        this.match(GQLParser.RIGHT_BRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	propertyKeyValuePairList() {
	    let localctx = new PropertyKeyValuePairListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 398, GQLParser.RULE_propertyKeyValuePairList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2343;
	        this.propertyKeyValuePair();
	        this.state = 2348;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===361) {
	            this.state = 2344;
	            this.match(GQLParser.COMMA);
	            this.state = 2345;
	            this.propertyKeyValuePair();
	            this.state = 2350;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	propertyKeyValuePair() {
	    let localctx = new PropertyKeyValuePairContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 400, GQLParser.RULE_propertyKeyValuePair);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2351;
	        this.propertyName();
	        this.state = 2352;
	        this.match(GQLParser.COLON);
	        this.state = 2353;
	        this.valueExpression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	edgePattern() {
	    let localctx = new EdgePatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 402, GQLParser.RULE_edgePattern);
	    try {
	        this.state = 2357;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 338:
	        case 339:
	        case 344:
	        case 355:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2355;
	            this.fullEdgePattern();
	            break;
	        case 336:
	        case 337:
	        case 340:
	        case 347:
	        case 356:
	        case 373:
	        case 384:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2356;
	            this.abbreviatedEdgePattern();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fullEdgePattern() {
	    let localctx = new FullEdgePatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 404, GQLParser.RULE_fullEdgePattern);
	    try {
	        this.state = 2366;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,204,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2359;
	            this.fullEdgePointingLeft();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2360;
	            this.fullEdgeUndirected();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2361;
	            this.fullEdgePointingRight();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2362;
	            this.fullEdgeLeftOrUndirected();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2363;
	            this.fullEdgeUndirectedOrRight();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 2364;
	            this.fullEdgeLeftOrRight();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 2365;
	            this.fullEdgeAnyDirection();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fullEdgePointingLeft() {
	    let localctx = new FullEdgePointingLeftContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 406, GQLParser.RULE_fullEdgePointingLeft);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2368;
	        this.match(GQLParser.LEFT_ARROW_BRACKET);
	        this.state = 2369;
	        this.elementPatternFiller();
	        this.state = 2370;
	        this.match(GQLParser.RIGHT_BRACKET_MINUS);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fullEdgeUndirected() {
	    let localctx = new FullEdgeUndirectedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 408, GQLParser.RULE_fullEdgeUndirected);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2372;
	        this.match(GQLParser.TILDE_LEFT_BRACKET);
	        this.state = 2373;
	        this.elementPatternFiller();
	        this.state = 2374;
	        this.match(GQLParser.RIGHT_BRACKET_TILDE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fullEdgePointingRight() {
	    let localctx = new FullEdgePointingRightContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 410, GQLParser.RULE_fullEdgePointingRight);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2376;
	        this.match(GQLParser.MINUS_LEFT_BRACKET);
	        this.state = 2377;
	        this.elementPatternFiller();
	        this.state = 2378;
	        this.match(GQLParser.BRACKET_RIGHT_ARROW);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fullEdgeLeftOrUndirected() {
	    let localctx = new FullEdgeLeftOrUndirectedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 412, GQLParser.RULE_fullEdgeLeftOrUndirected);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2380;
	        this.match(GQLParser.LEFT_ARROW_TILDE_BRACKET);
	        this.state = 2381;
	        this.elementPatternFiller();
	        this.state = 2382;
	        this.match(GQLParser.RIGHT_BRACKET_TILDE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fullEdgeUndirectedOrRight() {
	    let localctx = new FullEdgeUndirectedOrRightContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 414, GQLParser.RULE_fullEdgeUndirectedOrRight);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2384;
	        this.match(GQLParser.TILDE_LEFT_BRACKET);
	        this.state = 2385;
	        this.elementPatternFiller();
	        this.state = 2386;
	        this.match(GQLParser.BRACKET_TILDE_RIGHT_ARROW);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fullEdgeLeftOrRight() {
	    let localctx = new FullEdgeLeftOrRightContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 416, GQLParser.RULE_fullEdgeLeftOrRight);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2388;
	        this.match(GQLParser.LEFT_ARROW_BRACKET);
	        this.state = 2389;
	        this.elementPatternFiller();
	        this.state = 2390;
	        this.match(GQLParser.BRACKET_RIGHT_ARROW);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fullEdgeAnyDirection() {
	    let localctx = new FullEdgeAnyDirectionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 418, GQLParser.RULE_fullEdgeAnyDirection);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2392;
	        this.match(GQLParser.MINUS_LEFT_BRACKET);
	        this.state = 2393;
	        this.elementPatternFiller();
	        this.state = 2394;
	        this.match(GQLParser.RIGHT_BRACKET_MINUS);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	abbreviatedEdgePattern() {
	    let localctx = new AbbreviatedEdgePatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 420, GQLParser.RULE_abbreviatedEdgePattern);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2396;
	        _la = this._input.LA(1);
	        if(!(((((_la - 336)) & ~0x1f) === 0 && ((1 << (_la - 336)) & 1050643) !== 0) || _la===373 || _la===384)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	parenthesizedPathPatternExpression() {
	    let localctx = new ParenthesizedPathPatternExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 422, GQLParser.RULE_parenthesizedPathPatternExpression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2398;
	        this.match(GQLParser.LEFT_PAREN);
	        this.state = 2400;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,205,this._ctx);
	        if(la_===1) {
	            this.state = 2399;
	            this.subpathVariableDeclaration();

	        }
	        this.state = 2403;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===277 || ((((_la - 311)) & ~0x1f) === 0 && ((1 << (_la - 311)) & 1057) !== 0)) {
	            this.state = 2402;
	            this.pathModePrefix();
	        }

	        this.state = 2405;
	        this.pathPatternExpression();
	        this.state = 2407;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===230) {
	            this.state = 2406;
	            this.parenthesizedPathPatternWhereClause();
	        }

	        this.state = 2409;
	        this.match(GQLParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	subpathVariableDeclaration() {
	    let localctx = new SubpathVariableDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 424, GQLParser.RULE_subpathVariableDeclaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2411;
	        this.subpathVariable();
	        this.state = 2412;
	        this.match(GQLParser.EQUALS_OPERATOR);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	parenthesizedPathPatternWhereClause() {
	    let localctx = new ParenthesizedPathPatternWhereClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 426, GQLParser.RULE_parenthesizedPathPatternWhereClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2414;
	        this.match(GQLParser.WHERE);
	        this.state = 2415;
	        this.searchCondition();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	labelExpression(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new LabelExpressionContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 428;
	    this.enterRecursionRule(localctx, 428, GQLParser.RULE_labelExpression, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2426;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 366:
	            localctx = new LabelExpressionNegationContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;

	            this.state = 2418;
	            this.match(GQLParser.EXCLAMATION_MARK);
	            this.state = 2419;
	            this.labelExpression(6);
	            break;
	        case 4:
	        case 5:
	        case 277:
	        case 278:
	        case 279:
	        case 280:
	        case 281:
	        case 282:
	        case 283:
	        case 284:
	        case 285:
	        case 286:
	        case 287:
	        case 288:
	        case 289:
	        case 290:
	        case 291:
	        case 292:
	        case 293:
	        case 294:
	        case 295:
	        case 296:
	        case 297:
	        case 298:
	        case 299:
	        case 300:
	        case 301:
	        case 302:
	        case 303:
	        case 304:
	        case 305:
	        case 306:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 315:
	        case 316:
	        case 317:
	        case 318:
	        case 319:
	        case 320:
	        case 321:
	        case 322:
	        case 323:
	        case 324:
	        case 325:
	            localctx = new LabelExpressionNameContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 2420;
	            this.labelName();
	            break;
	        case 374:
	            localctx = new LabelExpressionWildcardContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 2421;
	            this.match(GQLParser.PERCENT);
	            break;
	        case 371:
	            localctx = new LabelExpressionParenthesizedContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 2422;
	            this.match(GQLParser.LEFT_PAREN);
	            this.state = 2423;
	            this.labelExpression(0);
	            this.state = 2424;
	            this.match(GQLParser.RIGHT_PAREN);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 2436;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,210,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 2434;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,209,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new LabelExpressionConjunctionContext(this, new LabelExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, GQLParser.RULE_labelExpression);
	                    this.state = 2428;
	                    if (!( this.precpred(this._ctx, 5))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
	                    }
	                    this.state = 2429;
	                    this.match(GQLParser.AMPERSAND);
	                    this.state = 2430;
	                    this.labelExpression(6);
	                    break;

	                case 2:
	                    localctx = new LabelExpressionDisjunctionContext(this, new LabelExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, GQLParser.RULE_labelExpression);
	                    this.state = 2431;
	                    if (!( this.precpred(this._ctx, 4))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
	                    }
	                    this.state = 2432;
	                    this.match(GQLParser.VERTICAL_BAR);
	                    this.state = 2433;
	                    this.labelExpression(5);
	                    break;

	                } 
	            }
	            this.state = 2438;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,210,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	pathVariableReference() {
	    let localctx = new PathVariableReferenceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 430, GQLParser.RULE_pathVariableReference);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2439;
	        this.bindingVariableReference();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elementVariableReference() {
	    let localctx = new ElementVariableReferenceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 432, GQLParser.RULE_elementVariableReference);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2441;
	        this.bindingVariableReference();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	graphPatternQuantifier() {
	    let localctx = new GraphPatternQuantifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 434, GQLParser.RULE_graphPatternQuantifier);
	    try {
	        this.state = 2447;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,211,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2443;
	            this.match(GQLParser.ASTERISK);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2444;
	            this.match(GQLParser.PLUS_SIGN);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2445;
	            this.fixedQuantifier();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2446;
	            this.generalQuantifier();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fixedQuantifier() {
	    let localctx = new FixedQuantifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 436, GQLParser.RULE_fixedQuantifier);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2449;
	        this.match(GQLParser.LEFT_BRACE);
	        this.state = 2450;
	        this.unsignedInteger();
	        this.state = 2451;
	        this.match(GQLParser.RIGHT_BRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	generalQuantifier() {
	    let localctx = new GeneralQuantifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 438, GQLParser.RULE_generalQuantifier);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2453;
	        this.match(GQLParser.LEFT_BRACE);
	        this.state = 2455;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 983040) !== 0)) {
	            this.state = 2454;
	            this.lowerBound();
	        }

	        this.state = 2457;
	        this.match(GQLParser.COMMA);
	        this.state = 2459;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 983040) !== 0)) {
	            this.state = 2458;
	            this.upperBound();
	        }

	        this.state = 2461;
	        this.match(GQLParser.RIGHT_BRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lowerBound() {
	    let localctx = new LowerBoundContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 440, GQLParser.RULE_lowerBound);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2463;
	        this.unsignedInteger();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	upperBound() {
	    let localctx = new UpperBoundContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 442, GQLParser.RULE_upperBound);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2465;
	        this.unsignedInteger();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simplifiedPathPatternExpression() {
	    let localctx = new SimplifiedPathPatternExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 444, GQLParser.RULE_simplifiedPathPatternExpression);
	    try {
	        this.state = 2474;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,214,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2467;
	            this.simplifiedDefaultingLeft();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2468;
	            this.simplifiedDefaultingUndirected();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2469;
	            this.simplifiedDefaultingRight();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2470;
	            this.simplifiedDefaultingLeftOrUndirected();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2471;
	            this.simplifiedDefaultingUndirectedOrRight();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 2472;
	            this.simplifiedDefaultingLeftOrRight();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 2473;
	            this.simplifiedDefaultingAnyDirection();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simplifiedDefaultingLeft() {
	    let localctx = new SimplifiedDefaultingLeftContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 446, GQLParser.RULE_simplifiedDefaultingLeft);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2476;
	        this.match(GQLParser.LEFT_MINUS_SLASH);
	        this.state = 2477;
	        this.simplifiedContents();
	        this.state = 2478;
	        this.match(GQLParser.SLASH_MINUS);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simplifiedDefaultingUndirected() {
	    let localctx = new SimplifiedDefaultingUndirectedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 448, GQLParser.RULE_simplifiedDefaultingUndirected);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2480;
	        this.match(GQLParser.TILDE_SLASH);
	        this.state = 2481;
	        this.simplifiedContents();
	        this.state = 2482;
	        this.match(GQLParser.SLASH_TILDE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simplifiedDefaultingRight() {
	    let localctx = new SimplifiedDefaultingRightContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 450, GQLParser.RULE_simplifiedDefaultingRight);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2484;
	        this.match(GQLParser.MINUS_SLASH);
	        this.state = 2485;
	        this.simplifiedContents();
	        this.state = 2486;
	        this.match(GQLParser.SLASH_MINUS_RIGHT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simplifiedDefaultingLeftOrUndirected() {
	    let localctx = new SimplifiedDefaultingLeftOrUndirectedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 452, GQLParser.RULE_simplifiedDefaultingLeftOrUndirected);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2488;
	        this.match(GQLParser.LEFT_TILDE_SLASH);
	        this.state = 2489;
	        this.simplifiedContents();
	        this.state = 2490;
	        this.match(GQLParser.SLASH_TILDE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simplifiedDefaultingUndirectedOrRight() {
	    let localctx = new SimplifiedDefaultingUndirectedOrRightContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 454, GQLParser.RULE_simplifiedDefaultingUndirectedOrRight);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2492;
	        this.match(GQLParser.TILDE_SLASH);
	        this.state = 2493;
	        this.simplifiedContents();
	        this.state = 2494;
	        this.match(GQLParser.SLASH_TILDE_RIGHT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simplifiedDefaultingLeftOrRight() {
	    let localctx = new SimplifiedDefaultingLeftOrRightContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 456, GQLParser.RULE_simplifiedDefaultingLeftOrRight);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2496;
	        this.match(GQLParser.LEFT_MINUS_SLASH);
	        this.state = 2497;
	        this.simplifiedContents();
	        this.state = 2498;
	        this.match(GQLParser.SLASH_MINUS_RIGHT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simplifiedDefaultingAnyDirection() {
	    let localctx = new SimplifiedDefaultingAnyDirectionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 458, GQLParser.RULE_simplifiedDefaultingAnyDirection);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2500;
	        this.match(GQLParser.MINUS_SLASH);
	        this.state = 2501;
	        this.simplifiedContents();
	        this.state = 2502;
	        this.match(GQLParser.SLASH_MINUS);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simplifiedContents() {
	    let localctx = new SimplifiedContentsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 460, GQLParser.RULE_simplifiedContents);
	    try {
	        this.state = 2507;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,215,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2504;
	            this.simplifiedTerm(0);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2505;
	            this.simplifiedPathUnion();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2506;
	            this.simplifiedMultisetAlternation();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simplifiedPathUnion() {
	    let localctx = new SimplifiedPathUnionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 462, GQLParser.RULE_simplifiedPathUnion);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2509;
	        this.simplifiedTerm(0);
	        this.state = 2510;
	        this.match(GQLParser.VERTICAL_BAR);
	        this.state = 2511;
	        this.simplifiedTerm(0);
	        this.state = 2516;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===386) {
	            this.state = 2512;
	            this.match(GQLParser.VERTICAL_BAR);
	            this.state = 2513;
	            this.simplifiedTerm(0);
	            this.state = 2518;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simplifiedMultisetAlternation() {
	    let localctx = new SimplifiedMultisetAlternationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 464, GQLParser.RULE_simplifiedMultisetAlternation);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2519;
	        this.simplifiedTerm(0);
	        this.state = 2520;
	        this.match(GQLParser.MULTISET_ALTERNATION_OPERATOR);
	        this.state = 2521;
	        this.simplifiedTerm(0);
	        this.state = 2526;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===328) {
	            this.state = 2522;
	            this.match(GQLParser.MULTISET_ALTERNATION_OPERATOR);
	            this.state = 2523;
	            this.simplifiedTerm(0);
	            this.state = 2528;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	simplifiedTerm(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new SimplifiedTermContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 466;
	    this.enterRecursionRule(localctx, 466, GQLParser.RULE_simplifiedTerm, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        localctx = new SimplifiedFactorLowLabelContext(this, localctx);
	        this._ctx = localctx;
	        _prevctx = localctx;

	        this.state = 2530;
	        this.simplifiedFactorLow(0);
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 2536;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,218,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new SimplifiedConcatenationLabelContext(this, new SimplifiedTermContext(this, _parentctx, _parentState));
	                this.pushNewRecursionContext(localctx, _startState, GQLParser.RULE_simplifiedTerm);
	                this.state = 2532;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 2533;
	                this.simplifiedFactorLow(0); 
	            }
	            this.state = 2538;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,218,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}


	simplifiedFactorLow(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new SimplifiedFactorLowContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 468;
	    this.enterRecursionRule(localctx, 468, GQLParser.RULE_simplifiedFactorLow, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        localctx = new SimplifiedFactorHighLabelContext(this, localctx);
	        this._ctx = localctx;
	        _prevctx = localctx;

	        this.state = 2540;
	        this.simplifiedFactorHigh();
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 2547;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,219,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new SimplifiedConjunctionLabelContext(this, new SimplifiedFactorLowContext(this, _parentctx, _parentState));
	                this.pushNewRecursionContext(localctx, _startState, GQLParser.RULE_simplifiedFactorLow);
	                this.state = 2542;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 2543;
	                this.match(GQLParser.AMPERSAND);
	                this.state = 2544;
	                this.simplifiedFactorHigh(); 
	            }
	            this.state = 2549;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,219,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	simplifiedFactorHigh() {
	    let localctx = new SimplifiedFactorHighContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 470, GQLParser.RULE_simplifiedFactorHigh);
	    try {
	        this.state = 2553;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,220,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2550;
	            this.simplifiedTertiary();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2551;
	            this.simplifiedQuantified();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2552;
	            this.simplifiedQuestioned();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simplifiedQuantified() {
	    let localctx = new SimplifiedQuantifiedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 472, GQLParser.RULE_simplifiedQuantified);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2555;
	        this.simplifiedTertiary();
	        this.state = 2556;
	        this.graphPatternQuantifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simplifiedQuestioned() {
	    let localctx = new SimplifiedQuestionedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 474, GQLParser.RULE_simplifiedQuestioned);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2558;
	        this.simplifiedTertiary();
	        this.state = 2559;
	        this.match(GQLParser.QUESTION_MARK);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simplifiedTertiary() {
	    let localctx = new SimplifiedTertiaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 476, GQLParser.RULE_simplifiedTertiary);
	    try {
	        this.state = 2563;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,221,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2561;
	            this.simplifiedDirectionOverride();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2562;
	            this.simplifiedSecondary();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simplifiedDirectionOverride() {
	    let localctx = new SimplifiedDirectionOverrideContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 478, GQLParser.RULE_simplifiedDirectionOverride);
	    try {
	        this.state = 2572;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,222,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2565;
	            this.simplifiedOverrideLeft();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2566;
	            this.simplifiedOverrideUndirected();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2567;
	            this.simplifiedOverrideRight();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2568;
	            this.simplifiedOverrideLeftOrUndirected();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2569;
	            this.simplifiedOverrideUndirectedOrRight();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 2570;
	            this.simplifiedOverrideLeftOrRight();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 2571;
	            this.simplifiedOverrideAnyDirection();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simplifiedOverrideLeft() {
	    let localctx = new SimplifiedOverrideLeftContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 480, GQLParser.RULE_simplifiedOverrideLeft);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2574;
	        this.match(GQLParser.LEFT_ANGLE_BRACKET);
	        this.state = 2575;
	        this.simplifiedSecondary();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simplifiedOverrideUndirected() {
	    let localctx = new SimplifiedOverrideUndirectedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 482, GQLParser.RULE_simplifiedOverrideUndirected);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2577;
	        this.match(GQLParser.TILDE);
	        this.state = 2578;
	        this.simplifiedSecondary();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simplifiedOverrideRight() {
	    let localctx = new SimplifiedOverrideRightContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 484, GQLParser.RULE_simplifiedOverrideRight);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2580;
	        this.simplifiedSecondary();
	        this.state = 2581;
	        this.match(GQLParser.RIGHT_ANGLE_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simplifiedOverrideLeftOrUndirected() {
	    let localctx = new SimplifiedOverrideLeftOrUndirectedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 486, GQLParser.RULE_simplifiedOverrideLeftOrUndirected);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2583;
	        this.match(GQLParser.LEFT_ARROW_TILDE);
	        this.state = 2584;
	        this.simplifiedSecondary();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simplifiedOverrideUndirectedOrRight() {
	    let localctx = new SimplifiedOverrideUndirectedOrRightContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 488, GQLParser.RULE_simplifiedOverrideUndirectedOrRight);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2586;
	        this.match(GQLParser.TILDE);
	        this.state = 2587;
	        this.simplifiedSecondary();
	        this.state = 2588;
	        this.match(GQLParser.RIGHT_ANGLE_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simplifiedOverrideLeftOrRight() {
	    let localctx = new SimplifiedOverrideLeftOrRightContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 490, GQLParser.RULE_simplifiedOverrideLeftOrRight);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2590;
	        this.match(GQLParser.LEFT_ANGLE_BRACKET);
	        this.state = 2591;
	        this.simplifiedSecondary();
	        this.state = 2592;
	        this.match(GQLParser.RIGHT_ANGLE_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simplifiedOverrideAnyDirection() {
	    let localctx = new SimplifiedOverrideAnyDirectionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 492, GQLParser.RULE_simplifiedOverrideAnyDirection);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2594;
	        this.match(GQLParser.MINUS_SIGN);
	        this.state = 2595;
	        this.simplifiedSecondary();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simplifiedSecondary() {
	    let localctx = new SimplifiedSecondaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 494, GQLParser.RULE_simplifiedSecondary);
	    try {
	        this.state = 2599;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 4:
	        case 5:
	        case 277:
	        case 278:
	        case 279:
	        case 280:
	        case 281:
	        case 282:
	        case 283:
	        case 284:
	        case 285:
	        case 286:
	        case 287:
	        case 288:
	        case 289:
	        case 290:
	        case 291:
	        case 292:
	        case 293:
	        case 294:
	        case 295:
	        case 296:
	        case 297:
	        case 298:
	        case 299:
	        case 300:
	        case 301:
	        case 302:
	        case 303:
	        case 304:
	        case 305:
	        case 306:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 315:
	        case 316:
	        case 317:
	        case 318:
	        case 319:
	        case 320:
	        case 321:
	        case 322:
	        case 323:
	        case 324:
	        case 325:
	        case 371:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2597;
	            this.simplifiedPrimary();
	            break;
	        case 366:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2598;
	            this.simplifiedNegation();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simplifiedNegation() {
	    let localctx = new SimplifiedNegationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 496, GQLParser.RULE_simplifiedNegation);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2601;
	        this.match(GQLParser.EXCLAMATION_MARK);
	        this.state = 2602;
	        this.simplifiedPrimary();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simplifiedPrimary() {
	    let localctx = new SimplifiedPrimaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 498, GQLParser.RULE_simplifiedPrimary);
	    try {
	        this.state = 2609;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 4:
	        case 5:
	        case 277:
	        case 278:
	        case 279:
	        case 280:
	        case 281:
	        case 282:
	        case 283:
	        case 284:
	        case 285:
	        case 286:
	        case 287:
	        case 288:
	        case 289:
	        case 290:
	        case 291:
	        case 292:
	        case 293:
	        case 294:
	        case 295:
	        case 296:
	        case 297:
	        case 298:
	        case 299:
	        case 300:
	        case 301:
	        case 302:
	        case 303:
	        case 304:
	        case 305:
	        case 306:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 315:
	        case 316:
	        case 317:
	        case 318:
	        case 319:
	        case 320:
	        case 321:
	        case 322:
	        case 323:
	        case 324:
	        case 325:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2604;
	            this.labelName();
	            break;
	        case 371:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2605;
	            this.match(GQLParser.LEFT_PAREN);
	            this.state = 2606;
	            this.simplifiedContents();
	            this.state = 2607;
	            this.match(GQLParser.RIGHT_PAREN);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	whereClause() {
	    let localctx = new WhereClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 500, GQLParser.RULE_whereClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2611;
	        this.match(GQLParser.WHERE);
	        this.state = 2612;
	        this.searchCondition();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	yieldClause() {
	    let localctx = new YieldClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 502, GQLParser.RULE_yieldClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2614;
	        this.match(GQLParser.YIELD);
	        this.state = 2615;
	        this.yieldItemList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	yieldItemList() {
	    let localctx = new YieldItemListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 504, GQLParser.RULE_yieldItemList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2617;
	        this.yieldItem();
	        this.state = 2622;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===361) {
	            this.state = 2618;
	            this.match(GQLParser.COMMA);
	            this.state = 2619;
	            this.yieldItem();
	            this.state = 2624;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	yieldItem() {
	    let localctx = new YieldItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 506, GQLParser.RULE_yieldItem);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2625;
	        this.yieldItemName();
	        this.state = 2627;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===27) {
	            this.state = 2626;
	            this.yieldItemAlias();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	yieldItemName() {
	    let localctx = new YieldItemNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 508, GQLParser.RULE_yieldItemName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2629;
	        this.fieldName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	yieldItemAlias() {
	    let localctx = new YieldItemAliasContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 510, GQLParser.RULE_yieldItemAlias);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2631;
	        this.match(GQLParser.AS);
	        this.state = 2632;
	        this.bindingVariable();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	groupByClause() {
	    let localctx = new GroupByClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 512, GQLParser.RULE_groupByClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2634;
	        this.match(GQLParser.GROUP);
	        this.state = 2635;
	        this.match(GQLParser.BY);
	        this.state = 2636;
	        this.groupingElementList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	groupingElementList() {
	    let localctx = new GroupingElementListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 514, GQLParser.RULE_groupingElementList);
	    try {
	        this.state = 2647;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 277:
	        case 278:
	        case 279:
	        case 280:
	        case 281:
	        case 282:
	        case 283:
	        case 284:
	        case 285:
	        case 286:
	        case 287:
	        case 288:
	        case 289:
	        case 290:
	        case 291:
	        case 292:
	        case 293:
	        case 294:
	        case 295:
	        case 296:
	        case 297:
	        case 298:
	        case 299:
	        case 300:
	        case 301:
	        case 302:
	        case 303:
	        case 304:
	        case 305:
	        case 306:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 315:
	        case 316:
	        case 317:
	        case 318:
	        case 319:
	        case 320:
	        case 321:
	        case 322:
	        case 323:
	        case 324:
	        case 325:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2638;
	            this.groupingElement();
	            this.state = 2643;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,227,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 2639;
	                    this.match(GQLParser.COMMA);
	                    this.state = 2640;
	                    this.groupingElement(); 
	                }
	                this.state = 2645;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,227,this._ctx);
	            }

	            break;
	        case 371:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2646;
	            this.emptyGroupingSet();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	groupingElement() {
	    let localctx = new GroupingElementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 516, GQLParser.RULE_groupingElement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2649;
	        this.bindingVariableReference();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	emptyGroupingSet() {
	    let localctx = new EmptyGroupingSetContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 518, GQLParser.RULE_emptyGroupingSet);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2651;
	        this.match(GQLParser.LEFT_PAREN);
	        this.state = 2652;
	        this.match(GQLParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	orderByClause() {
	    let localctx = new OrderByClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 520, GQLParser.RULE_orderByClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2654;
	        this.match(GQLParser.ORDER);
	        this.state = 2655;
	        this.match(GQLParser.BY);
	        this.state = 2656;
	        this.sortSpecificationList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sortSpecificationList() {
	    let localctx = new SortSpecificationListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 522, GQLParser.RULE_sortSpecificationList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2658;
	        this.sortSpecification();
	        this.state = 2663;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,229,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 2659;
	                this.match(GQLParser.COMMA);
	                this.state = 2660;
	                this.sortSpecification(); 
	            }
	            this.state = 2665;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,229,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sortSpecification() {
	    let localctx = new SortSpecificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 524, GQLParser.RULE_sortSpecification);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2666;
	        this.sortKey();
	        this.state = 2668;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,230,this._ctx);
	        if(la_===1) {
	            this.state = 2667;
	            this.orderingSpecification();

	        }
	        this.state = 2671;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,231,this._ctx);
	        if(la_===1) {
	            this.state = 2670;
	            this.nullOrdering();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sortKey() {
	    let localctx = new SortKeyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 526, GQLParser.RULE_sortKey);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2673;
	        this.aggregatingValueExpression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	orderingSpecification() {
	    let localctx = new OrderingSpecificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 528, GQLParser.RULE_orderingSpecification);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2675;
	        _la = this._input.LA(1);
	        if(!(_la===28 || _la===29 || _la===77 || _la===78)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nullOrdering() {
	    let localctx = new NullOrderingContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 530, GQLParser.RULE_nullOrdering);
	    try {
	        this.state = 2681;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,232,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2677;
	            this.match(GQLParser.NULLS);
	            this.state = 2678;
	            this.match(GQLParser.FIRST);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2679;
	            this.match(GQLParser.NULLS);
	            this.state = 2680;
	            this.match(GQLParser.LAST);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	limitClause() {
	    let localctx = new LimitClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 532, GQLParser.RULE_limitClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2683;
	        this.match(GQLParser.LIMIT);
	        this.state = 2684;
	        this.nonNegativeIntegerSpecification();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	offsetClause() {
	    let localctx = new OffsetClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 534, GQLParser.RULE_offsetClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2686;
	        this.offsetSynonym();
	        this.state = 2687;
	        this.nonNegativeIntegerSpecification();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	offsetSynonym() {
	    let localctx = new OffsetSynonymContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 536, GQLParser.RULE_offsetSynonym);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2689;
	        _la = this._input.LA(1);
	        if(!(_la===159 || _la===195)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	schemaReference() {
	    let localctx = new SchemaReferenceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 538, GQLParser.RULE_schemaReference);
	    try {
	        this.state = 2694;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 383:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2691;
	            this.absoluteCatalogSchemaReference();
	            break;
	        case 67:
	        case 106:
	        case 334:
	        case 375:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2692;
	            this.relativeCatalogSchemaReference();
	            break;
	        case 326:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2693;
	            this.referenceParameterSpecification();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	absoluteCatalogSchemaReference() {
	    let localctx = new AbsoluteCatalogSchemaReferenceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 540, GQLParser.RULE_absoluteCatalogSchemaReference);
	    try {
	        this.state = 2700;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,234,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2696;
	            this.match(GQLParser.SOLIDUS);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2697;
	            this.absoluteDirectoryPath();
	            this.state = 2698;
	            this.schemaName();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	catalogSchemaParentAndName() {
	    let localctx = new CatalogSchemaParentAndNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 542, GQLParser.RULE_catalogSchemaParentAndName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2702;
	        this.absoluteDirectoryPath();
	        this.state = 2703;
	        this.schemaName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	relativeCatalogSchemaReference() {
	    let localctx = new RelativeCatalogSchemaReferenceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 544, GQLParser.RULE_relativeCatalogSchemaReference);
	    try {
	        this.state = 2709;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 67:
	        case 106:
	        case 375:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2705;
	            this.predefinedSchemaReference();
	            break;
	        case 334:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2706;
	            this.relativeDirectoryPath();
	            this.state = 2707;
	            this.schemaName();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	predefinedSchemaReference() {
	    let localctx = new PredefinedSchemaReferenceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 546, GQLParser.RULE_predefinedSchemaReference);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2711;
	        _la = this._input.LA(1);
	        if(!(_la===67 || _la===106 || _la===375)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	absoluteDirectoryPath() {
	    let localctx = new AbsoluteDirectoryPathContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 548, GQLParser.RULE_absoluteDirectoryPath);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2713;
	        this.match(GQLParser.SOLIDUS);
	        this.state = 2715;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,236,this._ctx);
	        if(la_===1) {
	            this.state = 2714;
	            this.simpleDirectoryPath();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	relativeDirectoryPath() {
	    let localctx = new RelativeDirectoryPathContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 550, GQLParser.RULE_relativeDirectoryPath);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2717;
	        this.match(GQLParser.DOUBLE_PERIOD);
	        this.state = 2722;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,237,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 2718;
	                this.match(GQLParser.SOLIDUS);
	                this.state = 2719;
	                this.match(GQLParser.DOUBLE_PERIOD); 
	            }
	            this.state = 2724;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,237,this._ctx);
	        }

	        this.state = 2725;
	        this.match(GQLParser.SOLIDUS);
	        this.state = 2727;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,238,this._ctx);
	        if(la_===1) {
	            this.state = 2726;
	            this.simpleDirectoryPath();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simpleDirectoryPath() {
	    let localctx = new SimpleDirectoryPathContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 552, GQLParser.RULE_simpleDirectoryPath);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2732; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 2729;
	        		this.directoryName();
	        		this.state = 2730;
	        		this.match(GQLParser.SOLIDUS);
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 2734; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,239, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	graphReference() {
	    let localctx = new GraphReferenceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 554, GQLParser.RULE_graphReference);
	    try {
	        this.state = 2742;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,240,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2736;
	            this.catalogObjectParentReference();
	            this.state = 2737;
	            this.graphName();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2739;
	            this.delimitedGraphName();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2740;
	            this.homeGraph();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2741;
	            this.referenceParameterSpecification();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	catalogGraphParentAndName() {
	    let localctx = new CatalogGraphParentAndNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 556, GQLParser.RULE_catalogGraphParentAndName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2745;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,241,this._ctx);
	        if(la_===1) {
	            this.state = 2744;
	            this.catalogObjectParentReference();

	        }
	        this.state = 2747;
	        this.graphName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	homeGraph() {
	    let localctx = new HomeGraphContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 558, GQLParser.RULE_homeGraph);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2749;
	        _la = this._input.LA(1);
	        if(!(_la===104 || _la===105)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	graphTypeReference() {
	    let localctx = new GraphTypeReferenceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 560, GQLParser.RULE_graphTypeReference);
	    try {
	        this.state = 2753;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,242,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2751;
	            this.catalogGraphTypeParentAndName();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2752;
	            this.referenceParameterSpecification();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	catalogGraphTypeParentAndName() {
	    let localctx = new CatalogGraphTypeParentAndNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 562, GQLParser.RULE_catalogGraphTypeParentAndName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2756;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,243,this._ctx);
	        if(la_===1) {
	            this.state = 2755;
	            this.catalogObjectParentReference();

	        }
	        this.state = 2758;
	        this.graphTypeName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bindingTableReference() {
	    let localctx = new BindingTableReferenceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 564, GQLParser.RULE_bindingTableReference);
	    try {
	        this.state = 2765;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,244,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2760;
	            this.catalogObjectParentReference();
	            this.state = 2761;
	            this.bindingTableName();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2763;
	            this.delimitedBindingTableName();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2764;
	            this.referenceParameterSpecification();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	procedureReference() {
	    let localctx = new ProcedureReferenceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 566, GQLParser.RULE_procedureReference);
	    try {
	        this.state = 2769;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,245,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2767;
	            this.catalogProcedureParentAndName();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2768;
	            this.referenceParameterSpecification();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	catalogProcedureParentAndName() {
	    let localctx = new CatalogProcedureParentAndNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 568, GQLParser.RULE_catalogProcedureParentAndName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2772;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,246,this._ctx);
	        if(la_===1) {
	            this.state = 2771;
	            this.catalogObjectParentReference();

	        }
	        this.state = 2774;
	        this.procedureName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	catalogObjectParentReference() {
	    let localctx = new CatalogObjectParentReferenceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 570, GQLParser.RULE_catalogObjectParentReference);
	    var _la = 0;
	    try {
	        this.state = 2795;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 67:
	        case 106:
	        case 326:
	        case 334:
	        case 375:
	        case 383:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2776;
	            this.schemaReference();
	            this.state = 2778;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===383) {
	                this.state = 2777;
	                this.match(GQLParser.SOLIDUS);
	            }

	            this.state = 2785;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,248,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 2780;
	                    this.objectName();
	                    this.state = 2781;
	                    this.match(GQLParser.PERIOD); 
	                }
	                this.state = 2787;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,248,this._ctx);
	            }

	            break;
	        case 4:
	        case 5:
	        case 277:
	        case 278:
	        case 279:
	        case 280:
	        case 281:
	        case 282:
	        case 283:
	        case 284:
	        case 285:
	        case 286:
	        case 287:
	        case 288:
	        case 289:
	        case 290:
	        case 291:
	        case 292:
	        case 293:
	        case 294:
	        case 295:
	        case 296:
	        case 297:
	        case 298:
	        case 299:
	        case 300:
	        case 301:
	        case 302:
	        case 303:
	        case 304:
	        case 305:
	        case 306:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 315:
	        case 316:
	        case 317:
	        case 318:
	        case 319:
	        case 320:
	        case 321:
	        case 322:
	        case 323:
	        case 324:
	        case 325:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2791; 
	            this._errHandler.sync(this);
	            var _alt = 1;
	            do {
	            	switch (_alt) {
	            	case 1:
	            		this.state = 2788;
	            		this.objectName();
	            		this.state = 2789;
	            		this.match(GQLParser.PERIOD);
	            		break;
	            	default:
	            		throw new antlr4.error.NoViableAltException(this);
	            	}
	            	this.state = 2793; 
	            	this._errHandler.sync(this);
	            	_alt = this._interp.adaptivePredict(this._input,249, this._ctx);
	            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	referenceParameterSpecification() {
	    let localctx = new ReferenceParameterSpecificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 572, GQLParser.RULE_referenceParameterSpecification);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2797;
	        this.match(GQLParser.SUBSTITUTED_PARAMETER_REFERENCE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nestedGraphTypeSpecification() {
	    let localctx = new NestedGraphTypeSpecificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 574, GQLParser.RULE_nestedGraphTypeSpecification);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2799;
	        this.match(GQLParser.LEFT_BRACE);
	        this.state = 2800;
	        this.graphTypeSpecificationBody();
	        this.state = 2801;
	        this.match(GQLParser.RIGHT_BRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	graphTypeSpecificationBody() {
	    let localctx = new GraphTypeSpecificationBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 576, GQLParser.RULE_graphTypeSpecificationBody);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2803;
	        this.elementTypeList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elementTypeList() {
	    let localctx = new ElementTypeListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 578, GQLParser.RULE_elementTypeList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2805;
	        this.elementTypeSpecification();
	        this.state = 2810;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===361) {
	            this.state = 2806;
	            this.match(GQLParser.COMMA);
	            this.state = 2807;
	            this.elementTypeSpecification();
	            this.state = 2812;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elementTypeSpecification() {
	    let localctx = new ElementTypeSpecificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 580, GQLParser.RULE_elementTypeSpecification);
	    try {
	        this.state = 2815;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,252,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2813;
	            this.nodeTypeSpecification();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2814;
	            this.edgeTypeSpecification();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nodeTypeSpecification() {
	    let localctx = new NodeTypeSpecificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 582, GQLParser.RULE_nodeTypeSpecification);
	    try {
	        this.state = 2819;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,253,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2817;
	            this.nodeTypePattern();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2818;
	            this.nodeTypePhrase();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nodeTypePattern() {
	    let localctx = new NodeTypePatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 584, GQLParser.RULE_nodeTypePattern);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2827;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===301 || _la===320) {
	            this.state = 2821;
	            this.nodeSynonym();
	            this.state = 2823;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,254,this._ctx);
	            if(la_===1) {
	                this.state = 2822;
	                this.match(GQLParser.TYPE);

	            }
	            this.state = 2825;
	            this.nodeTypeName();
	        }

	        this.state = 2829;
	        this.match(GQLParser.LEFT_PAREN);
	        this.state = 2831;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,256,this._ctx);
	        if(la_===1) {
	            this.state = 2830;
	            this.localNodeTypeAlias();

	        }
	        this.state = 2834;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===1 || _la===127 || _la===292 || _la===294 || _la===360 || _la===369) {
	            this.state = 2833;
	            this.nodeTypeFiller();
	        }

	        this.state = 2836;
	        this.match(GQLParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nodeTypePhrase() {
	    let localctx = new NodeTypePhraseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 586, GQLParser.RULE_nodeTypePhrase);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2838;
	        this.nodeSynonym();
	        this.state = 2840;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,258,this._ctx);
	        if(la_===1) {
	            this.state = 2839;
	            this.match(GQLParser.TYPE);

	        }
	        this.state = 2842;
	        this.nodeTypePhraseFiller();
	        this.state = 2845;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,259,this._ctx);
	        if(la_===1) {
	            this.state = 2843;
	            this.match(GQLParser.AS);
	            this.state = 2844;
	            this.localNodeTypeAlias();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nodeTypePhraseFiller() {
	    let localctx = new NodeTypePhraseFillerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 588, GQLParser.RULE_nodeTypePhraseFiller);
	    try {
	        this.state = 2852;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,261,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2847;
	            this.nodeTypeName();
	            this.state = 2849;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,260,this._ctx);
	            if(la_===1) {
	                this.state = 2848;
	                this.nodeTypeFiller();

	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2851;
	            this.nodeTypeFiller();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nodeTypeFiller() {
	    let localctx = new NodeTypeFillerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 590, GQLParser.RULE_nodeTypeFiller);
	    try {
	        this.state = 2859;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,263,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2854;
	            this.nodeTypeKeyLabelSet();
	            this.state = 2856;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,262,this._ctx);
	            if(la_===1) {
	                this.state = 2855;
	                this.nodeTypeImpliedContent();

	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2858;
	            this.nodeTypeImpliedContent();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	localNodeTypeAlias() {
	    let localctx = new LocalNodeTypeAliasContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 592, GQLParser.RULE_localNodeTypeAlias);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2861;
	        this.regularIdentifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nodeTypeImpliedContent() {
	    let localctx = new NodeTypeImpliedContentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 594, GQLParser.RULE_nodeTypeImpliedContent);
	    try {
	        this.state = 2868;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,264,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2863;
	            this.nodeTypeLabelSet();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2864;
	            this.nodeTypePropertyTypes();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2865;
	            this.nodeTypeLabelSet();
	            this.state = 2866;
	            this.nodeTypePropertyTypes();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nodeTypeKeyLabelSet() {
	    let localctx = new NodeTypeKeyLabelSetContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 596, GQLParser.RULE_nodeTypeKeyLabelSet);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2871;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===127 || _la===292 || _la===294 || _la===360) {
	            this.state = 2870;
	            this.labelSetPhrase();
	        }

	        this.state = 2873;
	        this.match(GQLParser.IMPLIES);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nodeTypeLabelSet() {
	    let localctx = new NodeTypeLabelSetContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 598, GQLParser.RULE_nodeTypeLabelSet);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2875;
	        this.labelSetPhrase();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nodeTypePropertyTypes() {
	    let localctx = new NodeTypePropertyTypesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 600, GQLParser.RULE_nodeTypePropertyTypes);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2877;
	        this.propertyTypesSpecification();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	edgeTypeSpecification() {
	    let localctx = new EdgeTypeSpecificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 602, GQLParser.RULE_edgeTypeSpecification);
	    try {
	        this.state = 2881;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,266,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2879;
	            this.edgeTypePattern();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2880;
	            this.edgeTypePhrase();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	edgeTypePattern() {
	    let localctx = new EdgeTypePatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 604, GQLParser.RULE_edgeTypePattern);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2892;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 283)) & ~0x1f) === 0 && ((1 << (_la - 283)) & 16777219) !== 0) || _la===319) {
	            this.state = 2884;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===283 || _la===319) {
	                this.state = 2883;
	                this.edgeKind();
	            }

	            this.state = 2886;
	            this.edgeSynonym();
	            this.state = 2888;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,268,this._ctx);
	            if(la_===1) {
	                this.state = 2887;
	                this.match(GQLParser.TYPE);

	            }
	            this.state = 2890;
	            this.edgeTypeName();
	        }

	        this.state = 2896;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,270,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 2894;
	            this.edgeTypePatternDirected();
	            break;

	        case 2:
	            this.state = 2895;
	            this.edgeTypePatternUndirected();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	edgeTypePhrase() {
	    let localctx = new EdgeTypePhraseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 606, GQLParser.RULE_edgeTypePhrase);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2898;
	        this.edgeKind();
	        this.state = 2899;
	        this.edgeSynonym();
	        this.state = 2901;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,271,this._ctx);
	        if(la_===1) {
	            this.state = 2900;
	            this.match(GQLParser.TYPE);

	        }
	        this.state = 2903;
	        this.edgeTypePhraseFiller();
	        this.state = 2904;
	        this.endpointPairPhrase();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	edgeTypePhraseFiller() {
	    let localctx = new EdgeTypePhraseFillerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 608, GQLParser.RULE_edgeTypePhraseFiller);
	    var _la = 0;
	    try {
	        this.state = 2911;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,273,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2906;
	            this.edgeTypeName();
	            this.state = 2908;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===1 || _la===127 || _la===292 || _la===294 || _la===360 || _la===369) {
	                this.state = 2907;
	                this.edgeTypeFiller();
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2910;
	            this.edgeTypeFiller();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	edgeTypeFiller() {
	    let localctx = new EdgeTypeFillerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 610, GQLParser.RULE_edgeTypeFiller);
	    var _la = 0;
	    try {
	        this.state = 2918;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,275,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2913;
	            this.edgeTypeKeyLabelSet();
	            this.state = 2915;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===127 || _la===292 || _la===294 || _la===360 || _la===369) {
	                this.state = 2914;
	                this.edgeTypeImpliedContent();
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2917;
	            this.edgeTypeImpliedContent();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	edgeTypeImpliedContent() {
	    let localctx = new EdgeTypeImpliedContentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 612, GQLParser.RULE_edgeTypeImpliedContent);
	    try {
	        this.state = 2925;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,276,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2920;
	            this.edgeTypeLabelSet();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2921;
	            this.edgeTypePropertyTypes();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2922;
	            this.edgeTypeLabelSet();
	            this.state = 2923;
	            this.edgeTypePropertyTypes();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	edgeTypeKeyLabelSet() {
	    let localctx = new EdgeTypeKeyLabelSetContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 614, GQLParser.RULE_edgeTypeKeyLabelSet);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2928;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===127 || _la===292 || _la===294 || _la===360) {
	            this.state = 2927;
	            this.labelSetPhrase();
	        }

	        this.state = 2930;
	        this.match(GQLParser.IMPLIES);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	edgeTypeLabelSet() {
	    let localctx = new EdgeTypeLabelSetContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 616, GQLParser.RULE_edgeTypeLabelSet);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2932;
	        this.labelSetPhrase();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	edgeTypePropertyTypes() {
	    let localctx = new EdgeTypePropertyTypesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 618, GQLParser.RULE_edgeTypePropertyTypes);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2934;
	        this.propertyTypesSpecification();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	edgeTypePatternDirected() {
	    let localctx = new EdgeTypePatternDirectedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 620, GQLParser.RULE_edgeTypePatternDirected);
	    try {
	        this.state = 2938;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,278,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2936;
	            this.edgeTypePatternPointingRight();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2937;
	            this.edgeTypePatternPointingLeft();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	edgeTypePatternPointingRight() {
	    let localctx = new EdgeTypePatternPointingRightContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 622, GQLParser.RULE_edgeTypePatternPointingRight);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2940;
	        this.sourceNodeTypeReference();
	        this.state = 2941;
	        this.arcTypePointingRight();
	        this.state = 2942;
	        this.destinationNodeTypeReference();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	edgeTypePatternPointingLeft() {
	    let localctx = new EdgeTypePatternPointingLeftContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 624, GQLParser.RULE_edgeTypePatternPointingLeft);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2944;
	        this.destinationNodeTypeReference();
	        this.state = 2945;
	        this.arcTypePointingLeft();
	        this.state = 2946;
	        this.sourceNodeTypeReference();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	edgeTypePatternUndirected() {
	    let localctx = new EdgeTypePatternUndirectedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 626, GQLParser.RULE_edgeTypePatternUndirected);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2948;
	        this.sourceNodeTypeReference();
	        this.state = 2949;
	        this.arcTypeUndirected();
	        this.state = 2950;
	        this.destinationNodeTypeReference();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arcTypePointingRight() {
	    let localctx = new ArcTypePointingRightContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 628, GQLParser.RULE_arcTypePointingRight);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2952;
	        this.match(GQLParser.MINUS_LEFT_BRACKET);
	        this.state = 2953;
	        this.edgeTypeFiller();
	        this.state = 2954;
	        this.match(GQLParser.BRACKET_RIGHT_ARROW);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arcTypePointingLeft() {
	    let localctx = new ArcTypePointingLeftContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 630, GQLParser.RULE_arcTypePointingLeft);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2956;
	        this.match(GQLParser.LEFT_ARROW_BRACKET);
	        this.state = 2957;
	        this.edgeTypeFiller();
	        this.state = 2958;
	        this.match(GQLParser.RIGHT_BRACKET_MINUS);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arcTypeUndirected() {
	    let localctx = new ArcTypeUndirectedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 632, GQLParser.RULE_arcTypeUndirected);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2960;
	        this.match(GQLParser.TILDE_LEFT_BRACKET);
	        this.state = 2961;
	        this.edgeTypeFiller();
	        this.state = 2962;
	        this.match(GQLParser.RIGHT_BRACKET_TILDE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sourceNodeTypeReference() {
	    let localctx = new SourceNodeTypeReferenceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 634, GQLParser.RULE_sourceNodeTypeReference);
	    var _la = 0;
	    try {
	        this.state = 2973;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,280,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2964;
	            this.match(GQLParser.LEFT_PAREN);
	            this.state = 2965;
	            this.sourceNodeTypeAlias();
	            this.state = 2966;
	            this.match(GQLParser.RIGHT_PAREN);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2968;
	            this.match(GQLParser.LEFT_PAREN);
	            this.state = 2970;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===1 || _la===127 || _la===292 || _la===294 || _la===360 || _la===369) {
	                this.state = 2969;
	                this.nodeTypeFiller();
	            }

	            this.state = 2972;
	            this.match(GQLParser.RIGHT_PAREN);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	destinationNodeTypeReference() {
	    let localctx = new DestinationNodeTypeReferenceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 636, GQLParser.RULE_destinationNodeTypeReference);
	    var _la = 0;
	    try {
	        this.state = 2984;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,282,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2975;
	            this.match(GQLParser.LEFT_PAREN);
	            this.state = 2976;
	            this.destinationNodeTypeAlias();
	            this.state = 2977;
	            this.match(GQLParser.RIGHT_PAREN);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2979;
	            this.match(GQLParser.LEFT_PAREN);
	            this.state = 2981;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===1 || _la===127 || _la===292 || _la===294 || _la===360 || _la===369) {
	                this.state = 2980;
	                this.nodeTypeFiller();
	            }

	            this.state = 2983;
	            this.match(GQLParser.RIGHT_PAREN);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	edgeKind() {
	    let localctx = new EdgeKindContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 638, GQLParser.RULE_edgeKind);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2986;
	        _la = this._input.LA(1);
	        if(!(_la===283 || _la===319)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	endpointPairPhrase() {
	    let localctx = new EndpointPairPhraseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 640, GQLParser.RULE_endpointPairPhrase);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2988;
	        this.match(GQLParser.CONNECTING);
	        this.state = 2989;
	        this.endpointPair();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	endpointPair() {
	    let localctx = new EndpointPairContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 642, GQLParser.RULE_endpointPair);
	    try {
	        this.state = 2993;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,283,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2991;
	            this.endpointPairDirected();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2992;
	            this.endpointPairUndirected();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	endpointPairDirected() {
	    let localctx = new EndpointPairDirectedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 644, GQLParser.RULE_endpointPairDirected);
	    try {
	        this.state = 2997;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,284,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2995;
	            this.endpointPairPointingRight();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2996;
	            this.endpointPairPointingLeft();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	endpointPairPointingRight() {
	    let localctx = new EndpointPairPointingRightContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 646, GQLParser.RULE_endpointPairPointingRight);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2999;
	        this.match(GQLParser.LEFT_PAREN);
	        this.state = 3000;
	        this.sourceNodeTypeAlias();
	        this.state = 3001;
	        this.connectorPointingRight();
	        this.state = 3002;
	        this.destinationNodeTypeAlias();
	        this.state = 3003;
	        this.match(GQLParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	endpointPairPointingLeft() {
	    let localctx = new EndpointPairPointingLeftContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 648, GQLParser.RULE_endpointPairPointingLeft);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3005;
	        this.match(GQLParser.LEFT_PAREN);
	        this.state = 3006;
	        this.destinationNodeTypeAlias();
	        this.state = 3007;
	        this.match(GQLParser.LEFT_ARROW);
	        this.state = 3008;
	        this.sourceNodeTypeAlias();
	        this.state = 3009;
	        this.match(GQLParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	endpointPairUndirected() {
	    let localctx = new EndpointPairUndirectedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 650, GQLParser.RULE_endpointPairUndirected);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3011;
	        this.match(GQLParser.LEFT_PAREN);
	        this.state = 3012;
	        this.sourceNodeTypeAlias();
	        this.state = 3013;
	        this.connectorUndirected();
	        this.state = 3014;
	        this.destinationNodeTypeAlias();
	        this.state = 3015;
	        this.match(GQLParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	connectorPointingRight() {
	    let localctx = new ConnectorPointingRightContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 652, GQLParser.RULE_connectorPointingRight);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3017;
	        _la = this._input.LA(1);
	        if(!(_la===315 || _la===347)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	connectorUndirected() {
	    let localctx = new ConnectorUndirectedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 654, GQLParser.RULE_connectorUndirected);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3019;
	        _la = this._input.LA(1);
	        if(!(_la===315 || _la===384)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sourceNodeTypeAlias() {
	    let localctx = new SourceNodeTypeAliasContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 656, GQLParser.RULE_sourceNodeTypeAlias);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3021;
	        this.regularIdentifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	destinationNodeTypeAlias() {
	    let localctx = new DestinationNodeTypeAliasContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 658, GQLParser.RULE_destinationNodeTypeAlias);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3023;
	        this.regularIdentifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	labelSetPhrase() {
	    let localctx = new LabelSetPhraseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 660, GQLParser.RULE_labelSetPhrase);
	    try {
	        this.state = 3032;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 292:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3025;
	            this.match(GQLParser.LABEL);
	            this.state = 3026;
	            this.labelName();
	            break;
	        case 294:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3027;
	            this.match(GQLParser.LABELS);
	            this.state = 3028;
	            this.labelSetSpecification();
	            break;
	        case 127:
	        case 360:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3029;
	            this.isOrColon();
	            this.state = 3030;
	            this.labelSetSpecification();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	labelSetSpecification() {
	    let localctx = new LabelSetSpecificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 662, GQLParser.RULE_labelSetSpecification);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3034;
	        this.labelName();
	        this.state = 3039;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,286,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 3035;
	                this.match(GQLParser.AMPERSAND);
	                this.state = 3036;
	                this.labelName(); 
	            }
	            this.state = 3041;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,286,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	propertyTypesSpecification() {
	    let localctx = new PropertyTypesSpecificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 664, GQLParser.RULE_propertyTypesSpecification);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3042;
	        this.match(GQLParser.LEFT_BRACE);
	        this.state = 3044;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===4 || _la===5 || ((((_la - 277)) & ~0x1f) === 0 && ((1 << (_la - 277)) & 4294967295) !== 0) || ((((_la - 309)) & ~0x1f) === 0 && ((1 << (_la - 309)) & 131071) !== 0)) {
	            this.state = 3043;
	            this.propertyTypeList();
	        }

	        this.state = 3046;
	        this.match(GQLParser.RIGHT_BRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	propertyTypeList() {
	    let localctx = new PropertyTypeListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 666, GQLParser.RULE_propertyTypeList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3048;
	        this.propertyType();
	        this.state = 3053;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===361) {
	            this.state = 3049;
	            this.match(GQLParser.COMMA);
	            this.state = 3050;
	            this.propertyType();
	            this.state = 3055;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	propertyType() {
	    let localctx = new PropertyTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 668, GQLParser.RULE_propertyType);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3056;
	        this.propertyName();
	        this.state = 3058;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===211 || _la===332) {
	            this.state = 3057;
	            this.typed();
	        }

	        this.state = 3060;
	        this.propertyValueType();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	propertyValueType() {
	    let localctx = new PropertyValueTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 670, GQLParser.RULE_propertyValueType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3062;
	        this.valueType(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bindingTableType() {
	    let localctx = new BindingTableTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 672, GQLParser.RULE_bindingTableType);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3065;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===278) {
	            this.state = 3064;
	            this.match(GQLParser.BINDING);
	        }

	        this.state = 3067;
	        this.match(GQLParser.TABLE);
	        this.state = 3068;
	        this.fieldTypesSpecification();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	valueType(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new ValueTypeContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 674;
	    this.enterRecursionRule(localctx, 674, GQLParser.RULE_valueType, _p);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3127;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,301,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new PredefinedTypeLabelContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;

	            this.state = 3071;
	            this.predefinedType();
	            break;

	        case 2:
	            localctx = new PathValueTypeLabelContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 3072;
	            this.pathValueType();
	            break;

	        case 3:
	            localctx = new ListValueTypeAlt1Context(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 3073;
	            this.listValueTypeName();
	            this.state = 3074;
	            this.match(GQLParser.LEFT_ANGLE_BRACKET);
	            this.state = 3075;
	            this.valueType(0);
	            this.state = 3076;
	            this.match(GQLParser.RIGHT_ANGLE_BRACKET);
	            this.state = 3081;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,291,this._ctx);
	            if(la_===1) {
	                this.state = 3077;
	                this.match(GQLParser.LEFT_BRACKET);
	                this.state = 3078;
	                this.maxLength();
	                this.state = 3079;
	                this.match(GQLParser.RIGHT_BRACKET);

	            }
	            this.state = 3084;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,292,this._ctx);
	            if(la_===1) {
	                this.state = 3083;
	                this.notNull();

	            }
	            break;

	        case 4:
	            localctx = new ListValueTypeAlt3Context(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 3086;
	            this.listValueTypeName();
	            this.state = 3091;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,293,this._ctx);
	            if(la_===1) {
	                this.state = 3087;
	                this.match(GQLParser.LEFT_BRACKET);
	                this.state = 3088;
	                this.maxLength();
	                this.state = 3089;
	                this.match(GQLParser.RIGHT_BRACKET);

	            }
	            this.state = 3094;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,294,this._ctx);
	            if(la_===1) {
	                this.state = 3093;
	                this.notNull();

	            }
	            break;

	        case 5:
	            localctx = new RecordTypeLabelContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 3096;
	            this.recordType();
	            break;

	        case 6:
	            localctx = new OpenDynamicUnionTypeLabelContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 3097;
	            this.match(GQLParser.ANY);
	            this.state = 3099;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,295,this._ctx);
	            if(la_===1) {
	                this.state = 3098;
	                this.match(GQLParser.VALUE);

	            }
	            this.state = 3102;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,296,this._ctx);
	            if(la_===1) {
	                this.state = 3101;
	                this.notNull();

	            }
	            break;

	        case 7:
	            localctx = new DynamicPropertyValueTypeLabelContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 3105;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===25) {
	                this.state = 3104;
	                this.match(GQLParser.ANY);
	            }

	            this.state = 3107;
	            this.match(GQLParser.PROPERTY);
	            this.state = 3108;
	            this.match(GQLParser.VALUE);
	            this.state = 3110;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,298,this._ctx);
	            if(la_===1) {
	                this.state = 3109;
	                this.notNull();

	            }
	            break;

	        case 8:
	            localctx = new ClosedDynamicUnionTypeAtl1Context(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 3112;
	            this.match(GQLParser.ANY);
	            this.state = 3114;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===225) {
	                this.state = 3113;
	                this.match(GQLParser.VALUE);
	            }

	            this.state = 3116;
	            this.match(GQLParser.LEFT_ANGLE_BRACKET);
	            this.state = 3117;
	            this.valueType(0);
	            this.state = 3122;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===386) {
	                this.state = 3118;
	                this.match(GQLParser.VERTICAL_BAR);
	                this.state = 3119;
	                this.valueType(0);
	                this.state = 3124;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 3125;
	            this.match(GQLParser.RIGHT_ANGLE_BRACKET);
	            break;

	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 3145;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,305,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 3143;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,304,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new ClosedDynamicUnionTypeAtl2Context(this, new ValueTypeContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, GQLParser.RULE_valueType);
	                    this.state = 3129;
	                    if (!( this.precpred(this._ctx, 1))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                    }
	                    this.state = 3130;
	                    this.match(GQLParser.VERTICAL_BAR);
	                    this.state = 3131;
	                    this.valueType(2);
	                    break;

	                case 2:
	                    localctx = new ListValueTypeAlt2Context(this, new ValueTypeContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, GQLParser.RULE_valueType);
	                    this.state = 3132;
	                    if (!( this.precpred(this._ctx, 7))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 7)");
	                    }
	                    this.state = 3133;
	                    this.listValueTypeName();
	                    this.state = 3138;
	                    this._errHandler.sync(this);
	                    var la_ = this._interp.adaptivePredict(this._input,302,this._ctx);
	                    if(la_===1) {
	                        this.state = 3134;
	                        this.match(GQLParser.LEFT_BRACKET);
	                        this.state = 3135;
	                        this.maxLength();
	                        this.state = 3136;
	                        this.match(GQLParser.RIGHT_BRACKET);

	                    }
	                    this.state = 3141;
	                    this._errHandler.sync(this);
	                    var la_ = this._interp.adaptivePredict(this._input,303,this._ctx);
	                    if(la_===1) {
	                        this.state = 3140;
	                        this.notNull();

	                    }
	                    break;

	                } 
	            }
	            this.state = 3147;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,305,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	typed() {
	    let localctx = new TypedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 676, GQLParser.RULE_typed);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3148;
	        _la = this._input.LA(1);
	        if(!(_la===211 || _la===332)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	predefinedType() {
	    let localctx = new PredefinedTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 678, GQLParser.RULE_predefinedType);
	    try {
	        this.state = 3157;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 37:
	        case 38:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3150;
	            this.booleanType();
	            break;
	        case 50:
	        case 202:
	        case 227:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3151;
	            this.characterStringType();
	            break;
	        case 36:
	        case 43:
	        case 226:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3152;
	            this.byteStringType();
	            break;
	        case 34:
	        case 35:
	        case 73:
	        case 74:
	        case 81:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	        case 98:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	        case 119:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 175:
	        case 191:
	        case 196:
	        case 197:
	        case 212:
	        case 213:
	        case 214:
	        case 215:
	        case 216:
	        case 217:
	        case 218:
	        case 219:
	        case 221:
	        case 224:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 3153;
	            this.numericType();
	            break;
	        case 70:
	        case 83:
	        case 135:
	        case 207:
	        case 208:
	        case 235:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 3154;
	            this.temporalType();
	            break;
	        case 25:
	        case 278:
	        case 283:
	        case 284:
	        case 289:
	        case 301:
	        case 305:
	        case 307:
	        case 313:
	        case 319:
	        case 320:
	        case 371:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 3155;
	            this.referenceValueType();
	            break;
	        case 153:
	        case 154:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 3156;
	            this.immaterialValueType();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	booleanType() {
	    let localctx = new BooleanTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 680, GQLParser.RULE_booleanType);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3159;
	        _la = this._input.LA(1);
	        if(!(_la===37 || _la===38)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 3161;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,307,this._ctx);
	        if(la_===1) {
	            this.state = 3160;
	            this.notNull();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	characterStringType() {
	    let localctx = new CharacterStringTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 682, GQLParser.RULE_characterStringType);
	    try {
	        this.state = 3198;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 202:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3163;
	            this.match(GQLParser.STRING);
	            this.state = 3173;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,309,this._ctx);
	            if(la_===1) {
	                this.state = 3164;
	                this.match(GQLParser.LEFT_PAREN);
	                this.state = 3168;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,308,this._ctx);
	                if(la_===1) {
	                    this.state = 3165;
	                    this.minLength();
	                    this.state = 3166;
	                    this.match(GQLParser.COMMA);

	                }
	                this.state = 3170;
	                this.maxLength();
	                this.state = 3171;
	                this.match(GQLParser.RIGHT_PAREN);

	            }
	            this.state = 3176;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,310,this._ctx);
	            if(la_===1) {
	                this.state = 3175;
	                this.notNull();

	            }
	            break;
	        case 50:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3178;
	            this.match(GQLParser.CHAR);
	            this.state = 3183;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,311,this._ctx);
	            if(la_===1) {
	                this.state = 3179;
	                this.match(GQLParser.LEFT_PAREN);
	                this.state = 3180;
	                this.fixedLength();
	                this.state = 3181;
	                this.match(GQLParser.RIGHT_PAREN);

	            }
	            this.state = 3186;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,312,this._ctx);
	            if(la_===1) {
	                this.state = 3185;
	                this.notNull();

	            }
	            break;
	        case 227:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3188;
	            this.match(GQLParser.VARCHAR);
	            this.state = 3193;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,313,this._ctx);
	            if(la_===1) {
	                this.state = 3189;
	                this.match(GQLParser.LEFT_PAREN);
	                this.state = 3190;
	                this.maxLength();
	                this.state = 3191;
	                this.match(GQLParser.RIGHT_PAREN);

	            }
	            this.state = 3196;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,314,this._ctx);
	            if(la_===1) {
	                this.state = 3195;
	                this.notNull();

	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	byteStringType() {
	    let localctx = new ByteStringTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 684, GQLParser.RULE_byteStringType);
	    try {
	        this.state = 3235;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 43:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3200;
	            this.match(GQLParser.BYTES);
	            this.state = 3210;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,317,this._ctx);
	            if(la_===1) {
	                this.state = 3201;
	                this.match(GQLParser.LEFT_PAREN);
	                this.state = 3205;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,316,this._ctx);
	                if(la_===1) {
	                    this.state = 3202;
	                    this.minLength();
	                    this.state = 3203;
	                    this.match(GQLParser.COMMA);

	                }
	                this.state = 3207;
	                this.maxLength();
	                this.state = 3208;
	                this.match(GQLParser.RIGHT_PAREN);

	            }
	            this.state = 3213;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,318,this._ctx);
	            if(la_===1) {
	                this.state = 3212;
	                this.notNull();

	            }
	            break;
	        case 36:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3215;
	            this.match(GQLParser.BINARY);
	            this.state = 3220;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,319,this._ctx);
	            if(la_===1) {
	                this.state = 3216;
	                this.match(GQLParser.LEFT_PAREN);
	                this.state = 3217;
	                this.fixedLength();
	                this.state = 3218;
	                this.match(GQLParser.RIGHT_PAREN);

	            }
	            this.state = 3223;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,320,this._ctx);
	            if(la_===1) {
	                this.state = 3222;
	                this.notNull();

	            }
	            break;
	        case 226:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3225;
	            this.match(GQLParser.VARBINARY);
	            this.state = 3230;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,321,this._ctx);
	            if(la_===1) {
	                this.state = 3226;
	                this.match(GQLParser.LEFT_PAREN);
	                this.state = 3227;
	                this.maxLength();
	                this.state = 3228;
	                this.match(GQLParser.RIGHT_PAREN);

	            }
	            this.state = 3233;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,322,this._ctx);
	            if(la_===1) {
	                this.state = 3232;
	                this.notNull();

	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	minLength() {
	    let localctx = new MinLengthContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 686, GQLParser.RULE_minLength);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3237;
	        this.unsignedInteger();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	maxLength() {
	    let localctx = new MaxLengthContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 688, GQLParser.RULE_maxLength);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3239;
	        this.unsignedInteger();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fixedLength() {
	    let localctx = new FixedLengthContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 690, GQLParser.RULE_fixedLength);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3241;
	        this.unsignedInteger();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	numericType() {
	    let localctx = new NumericTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 692, GQLParser.RULE_numericType);
	    try {
	        this.state = 3245;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 34:
	        case 35:
	        case 73:
	        case 74:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	        case 119:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 191:
	        case 196:
	        case 197:
	        case 212:
	        case 213:
	        case 214:
	        case 215:
	        case 216:
	        case 217:
	        case 218:
	        case 219:
	        case 221:
	        case 224:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3243;
	            this.exactNumericType();
	            break;
	        case 81:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	        case 98:
	        case 175:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3244;
	            this.approximateNumericType();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	exactNumericType() {
	    let localctx = new ExactNumericTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 694, GQLParser.RULE_exactNumericType);
	    try {
	        this.state = 3249;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 34:
	        case 35:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	        case 119:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 191:
	        case 196:
	        case 197:
	        case 212:
	        case 213:
	        case 214:
	        case 215:
	        case 216:
	        case 217:
	        case 218:
	        case 219:
	        case 221:
	        case 224:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3247;
	            this.binaryExactNumericType();
	            break;
	        case 73:
	        case 74:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3248;
	            this.decimalExactNumericType();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	binaryExactNumericType() {
	    let localctx = new BinaryExactNumericTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 696, GQLParser.RULE_binaryExactNumericType);
	    try {
	        this.state = 3253;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 34:
	        case 35:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	        case 119:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 191:
	        case 196:
	        case 197:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3251;
	            this.signedBinaryExactNumericType();
	            break;
	        case 212:
	        case 213:
	        case 214:
	        case 215:
	        case 216:
	        case 217:
	        case 218:
	        case 219:
	        case 221:
	        case 224:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3252;
	            this.unsignedBinaryExactNumericType();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	signedBinaryExactNumericType() {
	    let localctx = new SignedBinaryExactNumericTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 698, GQLParser.RULE_signedBinaryExactNumericType);
	    var _la = 0;
	    try {
	        this.state = 3301;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 113:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3255;
	            this.match(GQLParser.INT8);
	            this.state = 3257;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,327,this._ctx);
	            if(la_===1) {
	                this.state = 3256;
	                this.notNull();

	            }
	            break;
	        case 115:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3259;
	            this.match(GQLParser.INT16);
	            this.state = 3261;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,328,this._ctx);
	            if(la_===1) {
	                this.state = 3260;
	                this.notNull();

	            }
	            break;
	        case 117:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3263;
	            this.match(GQLParser.INT32);
	            this.state = 3265;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,329,this._ctx);
	            if(la_===1) {
	                this.state = 3264;
	                this.notNull();

	            }
	            break;
	        case 119:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 3267;
	            this.match(GQLParser.INT64);
	            this.state = 3269;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,330,this._ctx);
	            if(la_===1) {
	                this.state = 3268;
	                this.notNull();

	            }
	            break;
	        case 121:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 3271;
	            this.match(GQLParser.INT128);
	            this.state = 3273;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,331,this._ctx);
	            if(la_===1) {
	                this.state = 3272;
	                this.notNull();

	            }
	            break;
	        case 123:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 3275;
	            this.match(GQLParser.INT256);
	            this.state = 3277;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,332,this._ctx);
	            if(la_===1) {
	                this.state = 3276;
	                this.notNull();

	            }
	            break;
	        case 197:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 3279;
	            this.match(GQLParser.SMALLINT);
	            this.state = 3281;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,333,this._ctx);
	            if(la_===1) {
	                this.state = 3280;
	                this.notNull();

	            }
	            break;
	        case 111:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 3283;
	            this.match(GQLParser.INT);
	            this.state = 3288;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,334,this._ctx);
	            if(la_===1) {
	                this.state = 3284;
	                this.match(GQLParser.LEFT_PAREN);
	                this.state = 3285;
	                this.precision();
	                this.state = 3286;
	                this.match(GQLParser.RIGHT_PAREN);

	            }
	            this.state = 3291;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,335,this._ctx);
	            if(la_===1) {
	                this.state = 3290;
	                this.notNull();

	            }
	            break;
	        case 35:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 3293;
	            this.match(GQLParser.BIGINT);
	            this.state = 3295;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,336,this._ctx);
	            if(la_===1) {
	                this.state = 3294;
	                this.notNull();

	            }
	            break;
	        case 34:
	        case 112:
	        case 114:
	        case 116:
	        case 118:
	        case 120:
	        case 122:
	        case 124:
	        case 191:
	        case 196:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 3298;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===191) {
	                this.state = 3297;
	                this.match(GQLParser.SIGNED);
	            }

	            this.state = 3300;
	            this.verboseBinaryExactNumericType();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unsignedBinaryExactNumericType() {
	    let localctx = new UnsignedBinaryExactNumericTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 700, GQLParser.RULE_unsignedBinaryExactNumericType);
	    try {
	        this.state = 3347;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 214:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3303;
	            this.match(GQLParser.UINT8);
	            this.state = 3305;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,339,this._ctx);
	            if(la_===1) {
	                this.state = 3304;
	                this.notNull();

	            }
	            break;
	        case 215:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3307;
	            this.match(GQLParser.UINT16);
	            this.state = 3309;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,340,this._ctx);
	            if(la_===1) {
	                this.state = 3308;
	                this.notNull();

	            }
	            break;
	        case 216:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3311;
	            this.match(GQLParser.UINT32);
	            this.state = 3313;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,341,this._ctx);
	            if(la_===1) {
	                this.state = 3312;
	                this.notNull();

	            }
	            break;
	        case 217:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 3315;
	            this.match(GQLParser.UINT64);
	            this.state = 3317;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,342,this._ctx);
	            if(la_===1) {
	                this.state = 3316;
	                this.notNull();

	            }
	            break;
	        case 218:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 3319;
	            this.match(GQLParser.UINT128);
	            this.state = 3321;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,343,this._ctx);
	            if(la_===1) {
	                this.state = 3320;
	                this.notNull();

	            }
	            break;
	        case 219:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 3323;
	            this.match(GQLParser.UINT256);
	            this.state = 3325;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,344,this._ctx);
	            if(la_===1) {
	                this.state = 3324;
	                this.notNull();

	            }
	            break;
	        case 224:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 3327;
	            this.match(GQLParser.USMALLINT);
	            this.state = 3329;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,345,this._ctx);
	            if(la_===1) {
	                this.state = 3328;
	                this.notNull();

	            }
	            break;
	        case 213:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 3331;
	            this.match(GQLParser.UINT);
	            this.state = 3336;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,346,this._ctx);
	            if(la_===1) {
	                this.state = 3332;
	                this.match(GQLParser.LEFT_PAREN);
	                this.state = 3333;
	                this.precision();
	                this.state = 3334;
	                this.match(GQLParser.RIGHT_PAREN);

	            }
	            this.state = 3339;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,347,this._ctx);
	            if(la_===1) {
	                this.state = 3338;
	                this.notNull();

	            }
	            break;
	        case 212:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 3341;
	            this.match(GQLParser.UBIGINT);
	            this.state = 3343;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,348,this._ctx);
	            if(la_===1) {
	                this.state = 3342;
	                this.notNull();

	            }
	            break;
	        case 221:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 3345;
	            this.match(GQLParser.UNSIGNED);
	            this.state = 3346;
	            this.verboseBinaryExactNumericType();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	verboseBinaryExactNumericType() {
	    let localctx = new VerboseBinaryExactNumericTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 702, GQLParser.RULE_verboseBinaryExactNumericType);
	    try {
	        this.state = 3393;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 114:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3349;
	            this.match(GQLParser.INTEGER8);
	            this.state = 3351;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,350,this._ctx);
	            if(la_===1) {
	                this.state = 3350;
	                this.notNull();

	            }
	            break;
	        case 116:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3353;
	            this.match(GQLParser.INTEGER16);
	            this.state = 3355;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,351,this._ctx);
	            if(la_===1) {
	                this.state = 3354;
	                this.notNull();

	            }
	            break;
	        case 118:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3357;
	            this.match(GQLParser.INTEGER32);
	            this.state = 3359;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,352,this._ctx);
	            if(la_===1) {
	                this.state = 3358;
	                this.notNull();

	            }
	            break;
	        case 120:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 3361;
	            this.match(GQLParser.INTEGER64);
	            this.state = 3363;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,353,this._ctx);
	            if(la_===1) {
	                this.state = 3362;
	                this.notNull();

	            }
	            break;
	        case 122:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 3365;
	            this.match(GQLParser.INTEGER128);
	            this.state = 3367;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,354,this._ctx);
	            if(la_===1) {
	                this.state = 3366;
	                this.notNull();

	            }
	            break;
	        case 124:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 3369;
	            this.match(GQLParser.INTEGER256);
	            this.state = 3371;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,355,this._ctx);
	            if(la_===1) {
	                this.state = 3370;
	                this.notNull();

	            }
	            break;
	        case 196:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 3373;
	            this.match(GQLParser.SMALL);
	            this.state = 3374;
	            this.match(GQLParser.INTEGER);
	            this.state = 3376;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,356,this._ctx);
	            if(la_===1) {
	                this.state = 3375;
	                this.notNull();

	            }
	            break;
	        case 112:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 3378;
	            this.match(GQLParser.INTEGER);
	            this.state = 3383;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,357,this._ctx);
	            if(la_===1) {
	                this.state = 3379;
	                this.match(GQLParser.LEFT_PAREN);
	                this.state = 3380;
	                this.precision();
	                this.state = 3381;
	                this.match(GQLParser.RIGHT_PAREN);

	            }
	            this.state = 3386;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,358,this._ctx);
	            if(la_===1) {
	                this.state = 3385;
	                this.notNull();

	            }
	            break;
	        case 34:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 3388;
	            this.match(GQLParser.BIG);
	            this.state = 3389;
	            this.match(GQLParser.INTEGER);
	            this.state = 3391;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,359,this._ctx);
	            if(la_===1) {
	                this.state = 3390;
	                this.notNull();

	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	decimalExactNumericType() {
	    let localctx = new DecimalExactNumericTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 704, GQLParser.RULE_decimalExactNumericType);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3395;
	        _la = this._input.LA(1);
	        if(!(_la===73 || _la===74)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 3406;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,363,this._ctx);
	        if(la_===1) {
	            this.state = 3396;
	            this.match(GQLParser.LEFT_PAREN);
	            this.state = 3397;
	            this.precision();
	            this.state = 3400;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===361) {
	                this.state = 3398;
	                this.match(GQLParser.COMMA);
	                this.state = 3399;
	                this.scale();
	            }

	            this.state = 3402;
	            this.match(GQLParser.RIGHT_PAREN);
	            this.state = 3404;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,362,this._ctx);
	            if(la_===1) {
	                this.state = 3403;
	                this.notNull();

	            }

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	precision() {
	    let localctx = new PrecisionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 706, GQLParser.RULE_precision);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3408;
	        this.unsignedDecimalInteger();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	scale() {
	    let localctx = new ScaleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 708, GQLParser.RULE_scale);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3410;
	        this.unsignedDecimalInteger();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	approximateNumericType() {
	    let localctx = new ApproximateNumericTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 710, GQLParser.RULE_approximateNumericType);
	    var _la = 0;
	    try {
	        this.state = 3457;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 94:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3412;
	            this.match(GQLParser.FLOAT16);
	            this.state = 3414;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,364,this._ctx);
	            if(la_===1) {
	                this.state = 3413;
	                this.notNull();

	            }
	            break;
	        case 95:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3416;
	            this.match(GQLParser.FLOAT32);
	            this.state = 3418;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,365,this._ctx);
	            if(la_===1) {
	                this.state = 3417;
	                this.notNull();

	            }
	            break;
	        case 96:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3420;
	            this.match(GQLParser.FLOAT64);
	            this.state = 3422;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,366,this._ctx);
	            if(la_===1) {
	                this.state = 3421;
	                this.notNull();

	            }
	            break;
	        case 97:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 3424;
	            this.match(GQLParser.FLOAT128);
	            this.state = 3426;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,367,this._ctx);
	            if(la_===1) {
	                this.state = 3425;
	                this.notNull();

	            }
	            break;
	        case 98:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 3428;
	            this.match(GQLParser.FLOAT256);
	            this.state = 3430;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,368,this._ctx);
	            if(la_===1) {
	                this.state = 3429;
	                this.notNull();

	            }
	            break;
	        case 93:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 3432;
	            this.match(GQLParser.FLOAT);
	            this.state = 3441;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,370,this._ctx);
	            if(la_===1) {
	                this.state = 3433;
	                this.match(GQLParser.LEFT_PAREN);
	                this.state = 3434;
	                this.precision();
	                this.state = 3437;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===361) {
	                    this.state = 3435;
	                    this.match(GQLParser.COMMA);
	                    this.state = 3436;
	                    this.scale();
	                }

	                this.state = 3439;
	                this.match(GQLParser.RIGHT_PAREN);

	            }
	            this.state = 3444;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,371,this._ctx);
	            if(la_===1) {
	                this.state = 3443;
	                this.notNull();

	            }
	            break;
	        case 175:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 3446;
	            this.match(GQLParser.REAL);
	            this.state = 3448;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,372,this._ctx);
	            if(la_===1) {
	                this.state = 3447;
	                this.notNull();

	            }
	            break;
	        case 81:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 3450;
	            this.match(GQLParser.DOUBLE);
	            this.state = 3452;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,373,this._ctx);
	            if(la_===1) {
	                this.state = 3451;
	                this.match(GQLParser.PRECISION);

	            }
	            this.state = 3455;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,374,this._ctx);
	            if(la_===1) {
	                this.state = 3454;
	                this.notNull();

	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	temporalType() {
	    let localctx = new TemporalTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 712, GQLParser.RULE_temporalType);
	    try {
	        this.state = 3461;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 70:
	        case 135:
	        case 207:
	        case 208:
	        case 235:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3459;
	            this.temporalInstantType();
	            break;
	        case 83:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3460;
	            this.temporalDurationType();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	temporalInstantType() {
	    let localctx = new TemporalInstantTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 714, GQLParser.RULE_temporalInstantType);
	    try {
	        this.state = 3468;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,377,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3463;
	            this.datetimeType();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3464;
	            this.localdatetimeType();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3465;
	            this.dateType();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 3466;
	            this.timeType();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 3467;
	            this.localtimeType();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	datetimeType() {
	    let localctx = new DatetimeTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 716, GQLParser.RULE_datetimeType);
	    try {
	        this.state = 3482;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 235:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3470;
	            this.match(GQLParser.ZONED);
	            this.state = 3471;
	            this.match(GQLParser.DATETIME);
	            this.state = 3473;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,378,this._ctx);
	            if(la_===1) {
	                this.state = 3472;
	                this.notNull();

	            }
	            break;
	        case 208:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3475;
	            this.match(GQLParser.TIMESTAMP);
	            this.state = 3476;
	            this.match(GQLParser.WITH);
	            this.state = 3477;
	            this.match(GQLParser.TIME);
	            this.state = 3478;
	            this.match(GQLParser.ZONE);
	            this.state = 3480;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,379,this._ctx);
	            if(la_===1) {
	                this.state = 3479;
	                this.notNull();

	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	localdatetimeType() {
	    let localctx = new LocaldatetimeTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 718, GQLParser.RULE_localdatetimeType);
	    try {
	        this.state = 3498;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 135:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3484;
	            this.match(GQLParser.LOCAL);
	            this.state = 3485;
	            this.match(GQLParser.DATETIME);
	            this.state = 3487;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,381,this._ctx);
	            if(la_===1) {
	                this.state = 3486;
	                this.notNull();

	            }
	            break;
	        case 208:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3489;
	            this.match(GQLParser.TIMESTAMP);
	            this.state = 3493;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,382,this._ctx);
	            if(la_===1) {
	                this.state = 3490;
	                this.match(GQLParser.WITHOUT);
	                this.state = 3491;
	                this.match(GQLParser.TIME);
	                this.state = 3492;
	                this.match(GQLParser.ZONE);

	            }
	            this.state = 3496;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,383,this._ctx);
	            if(la_===1) {
	                this.state = 3495;
	                this.notNull();

	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dateType() {
	    let localctx = new DateTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 720, GQLParser.RULE_dateType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3500;
	        this.match(GQLParser.DATE);
	        this.state = 3502;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,385,this._ctx);
	        if(la_===1) {
	            this.state = 3501;
	            this.notNull();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	timeType() {
	    let localctx = new TimeTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 722, GQLParser.RULE_timeType);
	    try {
	        this.state = 3516;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 235:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3504;
	            this.match(GQLParser.ZONED);
	            this.state = 3505;
	            this.match(GQLParser.TIME);
	            this.state = 3507;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,386,this._ctx);
	            if(la_===1) {
	                this.state = 3506;
	                this.notNull();

	            }
	            break;
	        case 207:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3509;
	            this.match(GQLParser.TIME);
	            this.state = 3510;
	            this.match(GQLParser.WITH);
	            this.state = 3511;
	            this.match(GQLParser.TIME);
	            this.state = 3512;
	            this.match(GQLParser.ZONE);
	            this.state = 3514;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,387,this._ctx);
	            if(la_===1) {
	                this.state = 3513;
	                this.notNull();

	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	localtimeType() {
	    let localctx = new LocaltimeTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 724, GQLParser.RULE_localtimeType);
	    try {
	        this.state = 3530;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 135:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3518;
	            this.match(GQLParser.LOCAL);
	            this.state = 3519;
	            this.match(GQLParser.TIME);
	            this.state = 3521;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,389,this._ctx);
	            if(la_===1) {
	                this.state = 3520;
	                this.notNull();

	            }
	            break;
	        case 207:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3523;
	            this.match(GQLParser.TIME);
	            this.state = 3524;
	            this.match(GQLParser.WITHOUT);
	            this.state = 3525;
	            this.match(GQLParser.TIME);
	            this.state = 3526;
	            this.match(GQLParser.ZONE);
	            this.state = 3528;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,390,this._ctx);
	            if(la_===1) {
	                this.state = 3527;
	                this.notNull();

	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	temporalDurationType() {
	    let localctx = new TemporalDurationTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 726, GQLParser.RULE_temporalDurationType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3532;
	        this.match(GQLParser.DURATION);
	        this.state = 3533;
	        this.match(GQLParser.LEFT_PAREN);
	        this.state = 3534;
	        this.temporalDurationQualifier();
	        this.state = 3535;
	        this.match(GQLParser.RIGHT_PAREN);
	        this.state = 3537;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,392,this._ctx);
	        if(la_===1) {
	            this.state = 3536;
	            this.notNull();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	temporalDurationQualifier() {
	    let localctx = new TemporalDurationQualifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 728, GQLParser.RULE_temporalDurationQualifier);
	    try {
	        this.state = 3545;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 233:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3539;
	            this.match(GQLParser.YEAR);
	            this.state = 3540;
	            this.match(GQLParser.TO);
	            this.state = 3541;
	            this.match(GQLParser.MONTH);
	            break;
	        case 72:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3542;
	            this.match(GQLParser.DAY);
	            this.state = 3543;
	            this.match(GQLParser.TO);
	            this.state = 3544;
	            this.match(GQLParser.SECOND);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	referenceValueType() {
	    let localctx = new ReferenceValueTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 730, GQLParser.RULE_referenceValueType);
	    try {
	        this.state = 3551;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,394,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3547;
	            this.graphReferenceValueType();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3548;
	            this.bindingTableReferenceValueType();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3549;
	            this.nodeReferenceValueType();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 3550;
	            this.edgeReferenceValueType();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	immaterialValueType() {
	    let localctx = new ImmaterialValueTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 732, GQLParser.RULE_immaterialValueType);
	    try {
	        this.state = 3555;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,395,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3553;
	            this.nullType();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3554;
	            this.emptyType();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nullType() {
	    let localctx = new NullTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 734, GQLParser.RULE_nullType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3557;
	        this.match(GQLParser.NULL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	emptyType() {
	    let localctx = new EmptyTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 736, GQLParser.RULE_emptyType);
	    try {
	        this.state = 3562;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 154:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3559;
	            this.match(GQLParser.NULL);
	            this.state = 3560;
	            this.notNull();
	            break;
	        case 153:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3561;
	            this.match(GQLParser.NOTHING);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	graphReferenceValueType() {
	    let localctx = new GraphReferenceValueTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 738, GQLParser.RULE_graphReferenceValueType);
	    try {
	        this.state = 3566;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 25:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3564;
	            this.openGraphReferenceValueType();
	            break;
	        case 289:
	        case 305:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3565;
	            this.closedGraphReferenceValueType();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	closedGraphReferenceValueType() {
	    let localctx = new ClosedGraphReferenceValueTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 740, GQLParser.RULE_closedGraphReferenceValueType);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3569;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===305) {
	            this.state = 3568;
	            this.match(GQLParser.PROPERTY);
	        }

	        this.state = 3571;
	        this.match(GQLParser.GRAPH);
	        this.state = 3572;
	        this.nestedGraphTypeSpecification();
	        this.state = 3574;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,399,this._ctx);
	        if(la_===1) {
	            this.state = 3573;
	            this.notNull();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	openGraphReferenceValueType() {
	    let localctx = new OpenGraphReferenceValueTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 742, GQLParser.RULE_openGraphReferenceValueType);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3576;
	        this.match(GQLParser.ANY);
	        this.state = 3578;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===305) {
	            this.state = 3577;
	            this.match(GQLParser.PROPERTY);
	        }

	        this.state = 3580;
	        this.match(GQLParser.GRAPH);
	        this.state = 3582;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,401,this._ctx);
	        if(la_===1) {
	            this.state = 3581;
	            this.notNull();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bindingTableReferenceValueType() {
	    let localctx = new BindingTableReferenceValueTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 744, GQLParser.RULE_bindingTableReferenceValueType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3584;
	        this.bindingTableType();
	        this.state = 3586;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,402,this._ctx);
	        if(la_===1) {
	            this.state = 3585;
	            this.notNull();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nodeReferenceValueType() {
	    let localctx = new NodeReferenceValueTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 746, GQLParser.RULE_nodeReferenceValueType);
	    try {
	        this.state = 3590;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,403,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3588;
	            this.openNodeReferenceValueType();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3589;
	            this.closedNodeReferenceValueType();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	closedNodeReferenceValueType() {
	    let localctx = new ClosedNodeReferenceValueTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 748, GQLParser.RULE_closedNodeReferenceValueType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3592;
	        this.nodeTypeSpecification();
	        this.state = 3594;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,404,this._ctx);
	        if(la_===1) {
	            this.state = 3593;
	            this.notNull();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	openNodeReferenceValueType() {
	    let localctx = new OpenNodeReferenceValueTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 750, GQLParser.RULE_openNodeReferenceValueType);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3597;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===25) {
	            this.state = 3596;
	            this.match(GQLParser.ANY);
	        }

	        this.state = 3599;
	        this.nodeSynonym();
	        this.state = 3601;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,406,this._ctx);
	        if(la_===1) {
	            this.state = 3600;
	            this.notNull();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	edgeReferenceValueType() {
	    let localctx = new EdgeReferenceValueTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 752, GQLParser.RULE_edgeReferenceValueType);
	    try {
	        this.state = 3605;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,407,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3603;
	            this.openEdgeReferenceValueType();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3604;
	            this.closedEdgeReferenceValueType();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	closedEdgeReferenceValueType() {
	    let localctx = new ClosedEdgeReferenceValueTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 754, GQLParser.RULE_closedEdgeReferenceValueType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3607;
	        this.edgeTypeSpecification();
	        this.state = 3609;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,408,this._ctx);
	        if(la_===1) {
	            this.state = 3608;
	            this.notNull();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	openEdgeReferenceValueType() {
	    let localctx = new OpenEdgeReferenceValueTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 756, GQLParser.RULE_openEdgeReferenceValueType);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3612;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===25) {
	            this.state = 3611;
	            this.match(GQLParser.ANY);
	        }

	        this.state = 3614;
	        this.edgeSynonym();
	        this.state = 3616;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,410,this._ctx);
	        if(la_===1) {
	            this.state = 3615;
	            this.notNull();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathValueType() {
	    let localctx = new PathValueTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 758, GQLParser.RULE_pathValueType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3618;
	        this.match(GQLParser.PATH);
	        this.state = 3620;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,411,this._ctx);
	        if(la_===1) {
	            this.state = 3619;
	            this.notNull();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	listValueTypeName() {
	    let localctx = new ListValueTypeNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 760, GQLParser.RULE_listValueTypeName);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3623;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===102) {
	            this.state = 3622;
	            this.match(GQLParser.GROUP);
	        }

	        this.state = 3625;
	        this.listValueTypeNameSynonym();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	listValueTypeNameSynonym() {
	    let localctx = new ListValueTypeNameSynonymContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 762, GQLParser.RULE_listValueTypeNameSynonym);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3627;
	        _la = this._input.LA(1);
	        if(!(_la===26 || _la===133)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	recordType() {
	    let localctx = new RecordTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 764, GQLParser.RULE_recordType);
	    var _la = 0;
	    try {
	        this.state = 3643;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,417,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3630;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===25) {
	                this.state = 3629;
	                this.match(GQLParser.ANY);
	            }

	            this.state = 3632;
	            this.match(GQLParser.RECORD);
	            this.state = 3634;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,414,this._ctx);
	            if(la_===1) {
	                this.state = 3633;
	                this.notNull();

	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3637;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===176) {
	                this.state = 3636;
	                this.match(GQLParser.RECORD);
	            }

	            this.state = 3639;
	            this.fieldTypesSpecification();
	            this.state = 3641;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,416,this._ctx);
	            if(la_===1) {
	                this.state = 3640;
	                this.notNull();

	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fieldTypesSpecification() {
	    let localctx = new FieldTypesSpecificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 766, GQLParser.RULE_fieldTypesSpecification);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3645;
	        this.match(GQLParser.LEFT_BRACE);
	        this.state = 3647;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===4 || _la===5 || ((((_la - 277)) & ~0x1f) === 0 && ((1 << (_la - 277)) & 4294967295) !== 0) || ((((_la - 309)) & ~0x1f) === 0 && ((1 << (_la - 309)) & 131071) !== 0)) {
	            this.state = 3646;
	            this.fieldTypeList();
	        }

	        this.state = 3649;
	        this.match(GQLParser.RIGHT_BRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fieldTypeList() {
	    let localctx = new FieldTypeListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 768, GQLParser.RULE_fieldTypeList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3651;
	        this.fieldType();
	        this.state = 3656;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===361) {
	            this.state = 3652;
	            this.match(GQLParser.COMMA);
	            this.state = 3653;
	            this.fieldType();
	            this.state = 3658;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	notNull() {
	    let localctx = new NotNullContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 770, GQLParser.RULE_notNull);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3659;
	        this.match(GQLParser.NOT);
	        this.state = 3660;
	        this.match(GQLParser.NULL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fieldType() {
	    let localctx = new FieldTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 772, GQLParser.RULE_fieldType);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3662;
	        this.fieldName();
	        this.state = 3664;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===211 || _la===332) {
	            this.state = 3663;
	            this.typed();
	        }

	        this.state = 3666;
	        this.valueType(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	searchCondition() {
	    let localctx = new SearchConditionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 774, GQLParser.RULE_searchCondition);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3668;
	        this.booleanValueExpression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	predicate() {
	    let localctx = new PredicateContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 776, GQLParser.RULE_predicate);
	    try {
	        this.state = 3679;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,421,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3670;
	            this.existsPredicate();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3671;
	            this.nullPredicate();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3672;
	            this.valueTypePredicate();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 3673;
	            this.directedPredicate();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 3674;
	            this.labeledPredicate();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 3675;
	            this.sourceDestinationPredicate();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 3676;
	            this.all_differentPredicate();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 3677;
	            this.samePredicate();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 3678;
	            this.property_existsPredicate();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	comparisonPredicatePart2() {
	    let localctx = new ComparisonPredicatePart2Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 778, GQLParser.RULE_comparisonPredicatePart2);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3681;
	        this.compOp();
	        this.state = 3682;
	        this.valueExpression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	compOp() {
	    let localctx = new CompOpContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 780, GQLParser.RULE_compOp);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3684;
	        _la = this._input.LA(1);
	        if(!(((((_la - 335)) & ~0x1f) === 0 && ((1 << (_la - 335)) & 1073744129) !== 0) || _la===367 || _la===372)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	existsPredicate() {
	    let localctx = new ExistsPredicateContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 782, GQLParser.RULE_existsPredicate);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3686;
	        this.match(GQLParser.EXISTS);
	        this.state = 3704;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,422,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 3687;
	            this.match(GQLParser.LEFT_BRACE);
	            this.state = 3688;
	            this.graphPattern();
	            this.state = 3689;
	            this.match(GQLParser.RIGHT_BRACE);
	            break;

	        case 2:
	            this.state = 3691;
	            this.match(GQLParser.LEFT_PAREN);
	            this.state = 3692;
	            this.graphPattern();
	            this.state = 3693;
	            this.match(GQLParser.RIGHT_PAREN);
	            break;

	        case 3:
	            this.state = 3695;
	            this.match(GQLParser.LEFT_BRACE);
	            this.state = 3696;
	            this.matchStatementBlock();
	            this.state = 3697;
	            this.match(GQLParser.RIGHT_BRACE);
	            break;

	        case 4:
	            this.state = 3699;
	            this.match(GQLParser.LEFT_PAREN);
	            this.state = 3700;
	            this.matchStatementBlock();
	            this.state = 3701;
	            this.match(GQLParser.RIGHT_PAREN);
	            break;

	        case 5:
	            this.state = 3703;
	            this.nestedQuerySpecification();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nullPredicate() {
	    let localctx = new NullPredicateContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 784, GQLParser.RULE_nullPredicate);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3706;
	        this.valueExpressionPrimary(0);
	        this.state = 3707;
	        this.nullPredicatePart2();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nullPredicatePart2() {
	    let localctx = new NullPredicatePart2Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 786, GQLParser.RULE_nullPredicatePart2);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3709;
	        this.match(GQLParser.IS);
	        this.state = 3711;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===152) {
	            this.state = 3710;
	            this.match(GQLParser.NOT);
	        }

	        this.state = 3713;
	        this.match(GQLParser.NULL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	valueTypePredicate() {
	    let localctx = new ValueTypePredicateContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 788, GQLParser.RULE_valueTypePredicate);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3715;
	        this.valueExpressionPrimary(0);
	        this.state = 3716;
	        this.valueTypePredicatePart2();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	valueTypePredicatePart2() {
	    let localctx = new ValueTypePredicatePart2Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 790, GQLParser.RULE_valueTypePredicatePart2);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3718;
	        this.match(GQLParser.IS);
	        this.state = 3720;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===152) {
	            this.state = 3719;
	            this.match(GQLParser.NOT);
	        }

	        this.state = 3722;
	        this.typed();
	        this.state = 3723;
	        this.valueType(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	normalizedPredicatePart2() {
	    let localctx = new NormalizedPredicatePart2Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 792, GQLParser.RULE_normalizedPredicatePart2);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3725;
	        this.match(GQLParser.IS);
	        this.state = 3727;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===152) {
	            this.state = 3726;
	            this.match(GQLParser.NOT);
	        }

	        this.state = 3730;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 296)) & ~0x1f) === 0 && ((1 << (_la - 296)) & 15) !== 0)) {
	            this.state = 3729;
	            this.normalForm();
	        }

	        this.state = 3732;
	        this.match(GQLParser.NORMALIZED);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	directedPredicate() {
	    let localctx = new DirectedPredicateContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 794, GQLParser.RULE_directedPredicate);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3734;
	        this.elementVariableReference();
	        this.state = 3735;
	        this.directedPredicatePart2();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	directedPredicatePart2() {
	    let localctx = new DirectedPredicatePart2Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 796, GQLParser.RULE_directedPredicatePart2);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3737;
	        this.match(GQLParser.IS);
	        this.state = 3739;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===152) {
	            this.state = 3738;
	            this.match(GQLParser.NOT);
	        }

	        this.state = 3741;
	        this.match(GQLParser.DIRECTED);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	labeledPredicate() {
	    let localctx = new LabeledPredicateContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 798, GQLParser.RULE_labeledPredicate);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3743;
	        this.elementVariableReference();
	        this.state = 3744;
	        this.labeledPredicatePart2();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	labeledPredicatePart2() {
	    let localctx = new LabeledPredicatePart2Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 800, GQLParser.RULE_labeledPredicatePart2);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3746;
	        this.isLabeledOrColon();
	        this.state = 3747;
	        this.labelExpression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	isLabeledOrColon() {
	    let localctx = new IsLabeledOrColonContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 802, GQLParser.RULE_isLabeledOrColon);
	    var _la = 0;
	    try {
	        this.state = 3755;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 127:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3749;
	            this.match(GQLParser.IS);
	            this.state = 3751;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===152) {
	                this.state = 3750;
	                this.match(GQLParser.NOT);
	            }

	            this.state = 3753;
	            this.match(GQLParser.LABELED);
	            break;
	        case 360:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3754;
	            this.match(GQLParser.COLON);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sourceDestinationPredicate() {
	    let localctx = new SourceDestinationPredicateContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 804, GQLParser.RULE_sourceDestinationPredicate);
	    try {
	        this.state = 3763;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,430,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3757;
	            this.nodeReference();
	            this.state = 3758;
	            this.sourcePredicatePart2();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3760;
	            this.nodeReference();
	            this.state = 3761;
	            this.destinationPredicatePart2();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nodeReference() {
	    let localctx = new NodeReferenceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 806, GQLParser.RULE_nodeReference);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3765;
	        this.elementVariableReference();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sourcePredicatePart2() {
	    let localctx = new SourcePredicatePart2Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 808, GQLParser.RULE_sourcePredicatePart2);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3767;
	        this.match(GQLParser.IS);
	        this.state = 3769;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===152) {
	            this.state = 3768;
	            this.match(GQLParser.NOT);
	        }

	        this.state = 3771;
	        this.match(GQLParser.SOURCE);
	        this.state = 3772;
	        this.match(GQLParser.OF);
	        this.state = 3773;
	        this.edgeReference();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	destinationPredicatePart2() {
	    let localctx = new DestinationPredicatePart2Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 810, GQLParser.RULE_destinationPredicatePart2);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3775;
	        this.match(GQLParser.IS);
	        this.state = 3777;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===152) {
	            this.state = 3776;
	            this.match(GQLParser.NOT);
	        }

	        this.state = 3779;
	        this.match(GQLParser.DESTINATION);
	        this.state = 3780;
	        this.match(GQLParser.OF);
	        this.state = 3781;
	        this.edgeReference();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	edgeReference() {
	    let localctx = new EdgeReferenceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 812, GQLParser.RULE_edgeReference);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3783;
	        this.elementVariableReference();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	all_differentPredicate() {
	    let localctx = new All_differentPredicateContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 814, GQLParser.RULE_all_differentPredicate);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3785;
	        this.match(GQLParser.ALL_DIFFERENT);
	        this.state = 3786;
	        this.match(GQLParser.LEFT_PAREN);
	        this.state = 3787;
	        this.elementVariableReference();
	        this.state = 3788;
	        this.match(GQLParser.COMMA);
	        this.state = 3789;
	        this.elementVariableReference();
	        this.state = 3794;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===361) {
	            this.state = 3790;
	            this.match(GQLParser.COMMA);
	            this.state = 3791;
	            this.elementVariableReference();
	            this.state = 3796;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 3797;
	        this.match(GQLParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	samePredicate() {
	    let localctx = new SamePredicateContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 816, GQLParser.RULE_samePredicate);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3799;
	        this.match(GQLParser.SAME);
	        this.state = 3800;
	        this.match(GQLParser.LEFT_PAREN);
	        this.state = 3801;
	        this.elementVariableReference();
	        this.state = 3802;
	        this.match(GQLParser.COMMA);
	        this.state = 3803;
	        this.elementVariableReference();
	        this.state = 3808;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===361) {
	            this.state = 3804;
	            this.match(GQLParser.COMMA);
	            this.state = 3805;
	            this.elementVariableReference();
	            this.state = 3810;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 3811;
	        this.match(GQLParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	property_existsPredicate() {
	    let localctx = new Property_existsPredicateContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 818, GQLParser.RULE_property_existsPredicate);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3813;
	        this.match(GQLParser.PROPERTY_EXISTS);
	        this.state = 3814;
	        this.match(GQLParser.LEFT_PAREN);
	        this.state = 3815;
	        this.elementVariableReference();
	        this.state = 3816;
	        this.match(GQLParser.COMMA);
	        this.state = 3817;
	        this.propertyName();
	        this.state = 3818;
	        this.match(GQLParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	valueExpression(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new ValueExpressionContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 820;
	    this.enterRecursionRule(localctx, 820, GQLParser.RULE_valueExpression, _p);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3838;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,437,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new SignedExprAltContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;

	            this.state = 3821;
	            localctx.sign = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===373 || _la===376)) {
	                localctx.sign = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 3822;
	            this.valueExpression(15);
	            break;

	        case 2:
	            localctx = new NotExprAltContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 3823;
	            this.match(GQLParser.NOT);
	            this.state = 3824;
	            this.valueExpression(11);
	            break;

	        case 3:
	            localctx = new PredicateExprAltContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 3825;
	            this.predicate();
	            break;

	        case 4:
	            localctx = new PropertyGraphExprAltContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 3827;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===305) {
	                this.state = 3826;
	                this.match(GQLParser.PROPERTY);
	            }

	            this.state = 3829;
	            this.match(GQLParser.GRAPH);
	            this.state = 3830;
	            this.graphExpression();
	            break;

	        case 5:
	            localctx = new BindingTableExprAltContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 3832;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===278) {
	                this.state = 3831;
	                this.match(GQLParser.BINDING);
	            }

	            this.state = 3834;
	            this.match(GQLParser.TABLE);
	            this.state = 3835;
	            this.bindingTableExpression();
	            break;

	        case 6:
	            localctx = new ValueFunctionExprAltContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 3836;
	            this.valueFunction();
	            break;

	        case 7:
	            localctx = new PrimaryExprAltContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 3837;
	            this.valueExpressionPrimary(0);
	            break;

	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 3867;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,440,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 3865;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,439,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new MultDivExprAltContext(this, new ValueExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, GQLParser.RULE_valueExpression);
	                    this.state = 3840;
	                    if (!( this.precpred(this._ctx, 14))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 14)");
	                    }
	                    this.state = 3841;
	                    localctx.operator = this._input.LT(1);
	                    _la = this._input.LA(1);
	                    if(!(_la===359 || _la===383)) {
	                        localctx.operator = this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 3842;
	                    this.valueExpression(15);
	                    break;

	                case 2:
	                    localctx = new AddSubtractExprAltContext(this, new ValueExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, GQLParser.RULE_valueExpression);
	                    this.state = 3843;
	                    if (!( this.precpred(this._ctx, 13))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 13)");
	                    }
	                    this.state = 3844;
	                    localctx.operator = this._input.LT(1);
	                    _la = this._input.LA(1);
	                    if(!(_la===373 || _la===376)) {
	                        localctx.operator = this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 3845;
	                    this.valueExpression(14);
	                    break;

	                case 3:
	                    localctx = new ConcatenationExprAltContext(this, new ValueExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, GQLParser.RULE_valueExpression);
	                    this.state = 3846;
	                    if (!( this.precpred(this._ctx, 12))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 12)");
	                    }
	                    this.state = 3847;
	                    this.match(GQLParser.CONCATENATION_OPERATOR);
	                    this.state = 3848;
	                    this.valueExpression(13);
	                    break;

	                case 4:
	                    localctx = new ConjunctiveExprAltContext(this, new ValueExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, GQLParser.RULE_valueExpression);
	                    this.state = 3849;
	                    if (!( this.precpred(this._ctx, 9))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 9)");
	                    }
	                    this.state = 3850;
	                    this.match(GQLParser.AND);
	                    this.state = 3851;
	                    this.valueExpression(10);
	                    break;

	                case 5:
	                    localctx = new DisjunctiveExprAltContext(this, new ValueExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, GQLParser.RULE_valueExpression);
	                    this.state = 3852;
	                    if (!( this.precpred(this._ctx, 8))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 8)");
	                    }
	                    this.state = 3853;
	                    localctx.operator = this._input.LT(1);
	                    _la = this._input.LA(1);
	                    if(!(_la===161 || _la===232)) {
	                        localctx.operator = this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 3854;
	                    this.valueExpression(9);
	                    break;

	                case 6:
	                    localctx = new IsNotExprAltContext(this, new ValueExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, GQLParser.RULE_valueExpression);
	                    this.state = 3855;
	                    if (!( this.precpred(this._ctx, 10))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 10)");
	                    }
	                    this.state = 3856;
	                    this.match(GQLParser.IS);
	                    this.state = 3858;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===152) {
	                        this.state = 3857;
	                        this.match(GQLParser.NOT);
	                    }

	                    this.state = 3860;
	                    this.truthValue();
	                    break;

	                case 7:
	                    localctx = new ComparisonExprAltContext(this, new ValueExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, GQLParser.RULE_valueExpression);
	                    this.state = 3861;
	                    if (!( this.precpred(this._ctx, 7))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 7)");
	                    }
	                    this.state = 3862;
	                    this.comparisonPredicatePart2();
	                    break;

	                case 8:
	                    localctx = new NormalizedPredicateExprAltContext(this, new ValueExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, GQLParser.RULE_valueExpression);
	                    this.state = 3863;
	                    if (!( this.precpred(this._ctx, 5))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
	                    }
	                    this.state = 3864;
	                    this.normalizedPredicatePart2();
	                    break;

	                } 
	            }
	            this.state = 3869;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,440,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	valueFunction() {
	    let localctx = new ValueFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 822, GQLParser.RULE_valueFunction);
	    try {
	        this.state = 3876;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,441,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3870;
	            this.numericValueFunction();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3871;
	            this.datetimeSubtraction();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3872;
	            this.datetimeValueFunction();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 3873;
	            this.durationValueFunction();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 3874;
	            this.characterOrByteStringFunction();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 3875;
	            this.listValueFunction();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	booleanValueExpression() {
	    let localctx = new BooleanValueExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 824, GQLParser.RULE_booleanValueExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3878;
	        this.valueExpression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	characterOrByteStringFunction() {
	    let localctx = new CharacterOrByteStringFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 826, GQLParser.RULE_characterOrByteStringFunction);
	    try {
	        this.state = 3885;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 129:
	        case 181:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3880;
	            this.subCharacterOrByteString();
	            break;
	        case 210:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3881;
	            this.trimSingleCharacterOrByteString();
	            break;
	        case 141:
	        case 222:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3882;
	            this.foldCharacterString();
	            break;
	        case 40:
	        case 142:
	        case 183:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 3883;
	            this.trimMultiCharacterCharacterString();
	            break;
	        case 151:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 3884;
	            this.normalizeCharacterString();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	subCharacterOrByteString() {
	    let localctx = new SubCharacterOrByteStringContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 828, GQLParser.RULE_subCharacterOrByteString);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3887;
	        _la = this._input.LA(1);
	        if(!(_la===129 || _la===181)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 3888;
	        this.match(GQLParser.LEFT_PAREN);
	        this.state = 3889;
	        this.valueExpression(0);
	        this.state = 3890;
	        this.match(GQLParser.COMMA);
	        this.state = 3891;
	        this.stringLength();
	        this.state = 3892;
	        this.match(GQLParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	trimSingleCharacterOrByteString() {
	    let localctx = new TrimSingleCharacterOrByteStringContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 830, GQLParser.RULE_trimSingleCharacterOrByteString);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3894;
	        this.match(GQLParser.TRIM);
	        this.state = 3895;
	        this.match(GQLParser.LEFT_PAREN);
	        this.state = 3896;
	        this.trimOperands();
	        this.state = 3897;
	        this.match(GQLParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	foldCharacterString() {
	    let localctx = new FoldCharacterStringContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 832, GQLParser.RULE_foldCharacterString);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3899;
	        _la = this._input.LA(1);
	        if(!(_la===141 || _la===222)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 3900;
	        this.match(GQLParser.LEFT_PAREN);
	        this.state = 3901;
	        this.valueExpression(0);
	        this.state = 3902;
	        this.match(GQLParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	trimMultiCharacterCharacterString() {
	    let localctx = new TrimMultiCharacterCharacterStringContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 834, GQLParser.RULE_trimMultiCharacterCharacterString);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3904;
	        _la = this._input.LA(1);
	        if(!(_la===40 || _la===142 || _la===183)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 3905;
	        this.match(GQLParser.LEFT_PAREN);
	        this.state = 3906;
	        this.valueExpression(0);
	        this.state = 3909;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===361) {
	            this.state = 3907;
	            this.match(GQLParser.COMMA);
	            this.state = 3908;
	            this.valueExpression(0);
	        }

	        this.state = 3911;
	        this.match(GQLParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	normalizeCharacterString() {
	    let localctx = new NormalizeCharacterStringContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 836, GQLParser.RULE_normalizeCharacterString);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3913;
	        this.match(GQLParser.NORMALIZE);
	        this.state = 3914;
	        this.match(GQLParser.LEFT_PAREN);
	        this.state = 3915;
	        this.valueExpression(0);
	        this.state = 3918;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===361) {
	            this.state = 3916;
	            this.match(GQLParser.COMMA);
	            this.state = 3917;
	            this.normalForm();
	        }

	        this.state = 3920;
	        this.match(GQLParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nodeReferenceValueExpression() {
	    let localctx = new NodeReferenceValueExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 838, GQLParser.RULE_nodeReferenceValueExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3922;
	        this.valueExpressionPrimary(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	edgeReferenceValueExpression() {
	    let localctx = new EdgeReferenceValueExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 840, GQLParser.RULE_edgeReferenceValueExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3924;
	        this.valueExpressionPrimary(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	aggregatingValueExpression() {
	    let localctx = new AggregatingValueExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 842, GQLParser.RULE_aggregatingValueExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3926;
	        this.valueExpression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	valueExpressionPrimary(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new ValueExpressionPrimaryContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 844;
	    this.enterRecursionRule(localctx, 844, GQLParser.RULE_valueExpressionPrimary, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3939;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 371:
	            this.state = 3929;
	            this.parenthesizedValueExpression();
	            break;
	        case 33:
	        case 56:
	        case 62:
	        case 144:
	        case 145:
	        case 169:
	        case 170:
	        case 200:
	        case 201:
	        case 203:
	            this.state = 3930;
	            this.aggregateFunction();
	            break;
	        case 2:
	        case 3:
	        case 4:
	        case 7:
	        case 8:
	        case 9:
	        case 10:
	        case 11:
	        case 12:
	        case 13:
	        case 14:
	        case 15:
	        case 16:
	        case 17:
	        case 18:
	        case 19:
	        case 26:
	        case 70:
	        case 71:
	        case 83:
	        case 102:
	        case 133:
	        case 154:
	        case 176:
	        case 189:
	        case 207:
	        case 208:
	        case 327:
	        case 369:
	        case 370:
	            this.state = 3931;
	            this.unsignedValueSpecification();
	            break;
	        case 166:
	            this.state = 3932;
	            this.pathValueConstructor();
	            break;
	        case 225:
	            this.state = 3933;
	            this.valueQueryExpression();
	            break;
	        case 46:
	        case 55:
	        case 156:
	            this.state = 3934;
	            this.caseExpression();
	            break;
	        case 47:
	            this.state = 3935;
	            this.castSpecification();
	            break;
	        case 85:
	            this.state = 3936;
	            this.element_idFunction();
	            break;
	        case 130:
	            this.state = 3937;
	            this.letValueExpression();
	            break;
	        case 277:
	        case 278:
	        case 279:
	        case 280:
	        case 281:
	        case 282:
	        case 283:
	        case 284:
	        case 285:
	        case 286:
	        case 287:
	        case 288:
	        case 289:
	        case 290:
	        case 291:
	        case 292:
	        case 293:
	        case 294:
	        case 295:
	        case 296:
	        case 297:
	        case 298:
	        case 299:
	        case 300:
	        case 301:
	        case 302:
	        case 303:
	        case 304:
	        case 305:
	        case 306:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 315:
	        case 316:
	        case 317:
	        case 318:
	        case 319:
	        case 320:
	        case 321:
	        case 322:
	        case 323:
	        case 324:
	        case 325:
	            this.state = 3938;
	            this.bindingVariableReference();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 3946;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,446,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new ValueExpressionPrimaryContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, GQLParser.RULE_valueExpressionPrimary);
	                this.state = 3941;
	                if (!( this.precpred(this._ctx, 7))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 7)");
	                }
	                this.state = 3942;
	                this.match(GQLParser.PERIOD);
	                this.state = 3943;
	                this.propertyName(); 
	            }
	            this.state = 3948;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,446,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	parenthesizedValueExpression() {
	    let localctx = new ParenthesizedValueExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 846, GQLParser.RULE_parenthesizedValueExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3949;
	        this.match(GQLParser.LEFT_PAREN);
	        this.state = 3950;
	        this.valueExpression(0);
	        this.state = 3951;
	        this.match(GQLParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nonParenthesizedValueExpressionPrimary() {
	    let localctx = new NonParenthesizedValueExpressionPrimaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 848, GQLParser.RULE_nonParenthesizedValueExpressionPrimary);
	    try {
	        this.state = 3955;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,447,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3953;
	            this.nonParenthesizedValueExpressionPrimarySpecialCase();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3954;
	            this.bindingVariableReference();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nonParenthesizedValueExpressionPrimarySpecialCase() {
	    let localctx = new NonParenthesizedValueExpressionPrimarySpecialCaseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 850, GQLParser.RULE_nonParenthesizedValueExpressionPrimarySpecialCase);
	    try {
	        this.state = 3969;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,448,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3957;
	            this.aggregateFunction();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3958;
	            this.unsignedValueSpecification();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3959;
	            this.pathValueConstructor();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 3960;
	            this.valueExpressionPrimary(0);
	            this.state = 3961;
	            this.match(GQLParser.PERIOD);
	            this.state = 3962;
	            this.propertyName();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 3964;
	            this.valueQueryExpression();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 3965;
	            this.caseExpression();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 3966;
	            this.castSpecification();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 3967;
	            this.element_idFunction();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 3968;
	            this.letValueExpression();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unsignedValueSpecification() {
	    let localctx = new UnsignedValueSpecificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 852, GQLParser.RULE_unsignedValueSpecification);
	    try {
	        this.state = 3973;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 2:
	        case 3:
	        case 4:
	        case 7:
	        case 8:
	        case 9:
	        case 10:
	        case 11:
	        case 12:
	        case 13:
	        case 14:
	        case 15:
	        case 16:
	        case 17:
	        case 18:
	        case 19:
	        case 26:
	        case 70:
	        case 71:
	        case 83:
	        case 102:
	        case 133:
	        case 154:
	        case 176:
	        case 207:
	        case 208:
	        case 369:
	        case 370:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3971;
	            this.unsignedLiteral();
	            break;
	        case 189:
	        case 327:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3972;
	            this.generalValueSpecification();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nonNegativeIntegerSpecification() {
	    let localctx = new NonNegativeIntegerSpecificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 854, GQLParser.RULE_nonNegativeIntegerSpecification);
	    try {
	        this.state = 3977;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 16:
	        case 17:
	        case 18:
	        case 19:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3975;
	            this.unsignedInteger();
	            break;
	        case 327:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3976;
	            this.dynamicParameterSpecification();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	generalValueSpecification() {
	    let localctx = new GeneralValueSpecificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 856, GQLParser.RULE_generalValueSpecification);
	    try {
	        this.state = 3981;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 327:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3979;
	            this.dynamicParameterSpecification();
	            break;
	        case 189:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3980;
	            this.match(GQLParser.SESSION_USER);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dynamicParameterSpecification() {
	    let localctx = new DynamicParameterSpecificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 858, GQLParser.RULE_dynamicParameterSpecification);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3983;
	        this.match(GQLParser.GENERAL_PARAMETER_REFERENCE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	letValueExpression() {
	    let localctx = new LetValueExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 860, GQLParser.RULE_letValueExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3985;
	        this.match(GQLParser.LET);
	        this.state = 3986;
	        this.letVariableDefinitionList();
	        this.state = 3987;
	        this.match(GQLParser.IN);
	        this.state = 3988;
	        this.valueExpression(0);
	        this.state = 3989;
	        this.match(GQLParser.END);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	valueQueryExpression() {
	    let localctx = new ValueQueryExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 862, GQLParser.RULE_valueQueryExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3991;
	        this.match(GQLParser.VALUE);
	        this.state = 3992;
	        this.nestedQuerySpecification();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	caseExpression() {
	    let localctx = new CaseExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 864, GQLParser.RULE_caseExpression);
	    try {
	        this.state = 3996;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 55:
	        case 156:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3994;
	            this.caseAbbreviation();
	            break;
	        case 46:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3995;
	            this.caseSpecification();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	caseAbbreviation() {
	    let localctx = new CaseAbbreviationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 866, GQLParser.RULE_caseAbbreviation);
	    var _la = 0;
	    try {
	        this.state = 4016;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 156:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3998;
	            this.match(GQLParser.NULLIF);
	            this.state = 3999;
	            this.match(GQLParser.LEFT_PAREN);
	            this.state = 4000;
	            this.valueExpression(0);
	            this.state = 4001;
	            this.match(GQLParser.COMMA);
	            this.state = 4002;
	            this.valueExpression(0);
	            this.state = 4003;
	            this.match(GQLParser.RIGHT_PAREN);
	            break;
	        case 55:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4005;
	            this.match(GQLParser.COALESCE);
	            this.state = 4006;
	            this.match(GQLParser.LEFT_PAREN);
	            this.state = 4007;
	            this.valueExpression(0);
	            this.state = 4010; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 4008;
	                this.match(GQLParser.COMMA);
	                this.state = 4009;
	                this.valueExpression(0);
	                this.state = 4012; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===361);
	            this.state = 4014;
	            this.match(GQLParser.RIGHT_PAREN);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	caseSpecification() {
	    let localctx = new CaseSpecificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 868, GQLParser.RULE_caseSpecification);
	    try {
	        this.state = 4020;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,455,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4018;
	            this.simpleCase();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4019;
	            this.searchedCase();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simpleCase() {
	    let localctx = new SimpleCaseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 870, GQLParser.RULE_simpleCase);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4022;
	        this.match(GQLParser.CASE);
	        this.state = 4023;
	        this.caseOperand();
	        this.state = 4025; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 4024;
	            this.simpleWhenClause();
	            this.state = 4027; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===229);
	        this.state = 4030;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===86) {
	            this.state = 4029;
	            this.elseClause();
	        }

	        this.state = 4032;
	        this.match(GQLParser.END);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	searchedCase() {
	    let localctx = new SearchedCaseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 872, GQLParser.RULE_searchedCase);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4034;
	        this.match(GQLParser.CASE);
	        this.state = 4036; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 4035;
	            this.searchedWhenClause();
	            this.state = 4038; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===229);
	        this.state = 4041;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===86) {
	            this.state = 4040;
	            this.elseClause();
	        }

	        this.state = 4043;
	        this.match(GQLParser.END);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simpleWhenClause() {
	    let localctx = new SimpleWhenClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 874, GQLParser.RULE_simpleWhenClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4045;
	        this.match(GQLParser.WHEN);
	        this.state = 4046;
	        this.whenOperandList();
	        this.state = 4047;
	        this.match(GQLParser.THEN);
	        this.state = 4048;
	        this.result();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	searchedWhenClause() {
	    let localctx = new SearchedWhenClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 876, GQLParser.RULE_searchedWhenClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4050;
	        this.match(GQLParser.WHEN);
	        this.state = 4051;
	        this.searchCondition();
	        this.state = 4052;
	        this.match(GQLParser.THEN);
	        this.state = 4053;
	        this.result();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elseClause() {
	    let localctx = new ElseClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 878, GQLParser.RULE_elseClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4055;
	        this.match(GQLParser.ELSE);
	        this.state = 4056;
	        this.result();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	caseOperand() {
	    let localctx = new CaseOperandContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 880, GQLParser.RULE_caseOperand);
	    try {
	        this.state = 4060;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,460,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4058;
	            this.nonParenthesizedValueExpressionPrimary();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4059;
	            this.elementVariableReference();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	whenOperandList() {
	    let localctx = new WhenOperandListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 882, GQLParser.RULE_whenOperandList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4062;
	        this.whenOperand();
	        this.state = 4067;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===361) {
	            this.state = 4063;
	            this.match(GQLParser.COMMA);
	            this.state = 4064;
	            this.whenOperand();
	            this.state = 4069;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	whenOperand() {
	    let localctx = new WhenOperandContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 884, GQLParser.RULE_whenOperand);
	    try {
	        this.state = 4079;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,462,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4070;
	            this.nonParenthesizedValueExpressionPrimary();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4071;
	            this.comparisonPredicatePart2();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4072;
	            this.nullPredicatePart2();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 4073;
	            this.valueTypePredicatePart2();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 4074;
	            this.normalizedPredicatePart2();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 4075;
	            this.directedPredicatePart2();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 4076;
	            this.labeledPredicatePart2();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 4077;
	            this.sourcePredicatePart2();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 4078;
	            this.destinationPredicatePart2();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	result() {
	    let localctx = new ResultContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 886, GQLParser.RULE_result);
	    try {
	        this.state = 4083;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,463,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4081;
	            this.resultExpression();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4082;
	            this.nullLiteral();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	resultExpression() {
	    let localctx = new ResultExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 888, GQLParser.RULE_resultExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4085;
	        this.valueExpression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	castSpecification() {
	    let localctx = new CastSpecificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 890, GQLParser.RULE_castSpecification);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4087;
	        this.match(GQLParser.CAST);
	        this.state = 4088;
	        this.match(GQLParser.LEFT_PAREN);
	        this.state = 4089;
	        this.castOperand();
	        this.state = 4090;
	        this.match(GQLParser.AS);
	        this.state = 4091;
	        this.castTarget();
	        this.state = 4092;
	        this.match(GQLParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	castOperand() {
	    let localctx = new CastOperandContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 892, GQLParser.RULE_castOperand);
	    try {
	        this.state = 4096;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,464,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4094;
	            this.valueExpression(0);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4095;
	            this.nullLiteral();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	castTarget() {
	    let localctx = new CastTargetContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 894, GQLParser.RULE_castTarget);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4098;
	        this.valueType(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	aggregateFunction() {
	    let localctx = new AggregateFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 896, GQLParser.RULE_aggregateFunction);
	    try {
	        this.state = 4106;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,465,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4100;
	            this.match(GQLParser.COUNT);
	            this.state = 4101;
	            this.match(GQLParser.LEFT_PAREN);
	            this.state = 4102;
	            this.match(GQLParser.ASTERISK);
	            this.state = 4103;
	            this.match(GQLParser.RIGHT_PAREN);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4104;
	            this.generalSetFunction();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4105;
	            this.binarySetFunction();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	generalSetFunction() {
	    let localctx = new GeneralSetFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 898, GQLParser.RULE_generalSetFunction);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4108;
	        this.generalSetFunctionType();
	        this.state = 4109;
	        this.match(GQLParser.LEFT_PAREN);
	        this.state = 4111;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===22 || _la===80) {
	            this.state = 4110;
	            this.setQuantifier();
	        }

	        this.state = 4113;
	        this.valueExpression(0);
	        this.state = 4114;
	        this.match(GQLParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	binarySetFunction() {
	    let localctx = new BinarySetFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 900, GQLParser.RULE_binarySetFunction);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4116;
	        this.binarySetFunctionType();
	        this.state = 4117;
	        this.match(GQLParser.LEFT_PAREN);
	        this.state = 4118;
	        this.dependentValueExpression();
	        this.state = 4119;
	        this.match(GQLParser.COMMA);
	        this.state = 4120;
	        this.independentValueExpression();
	        this.state = 4121;
	        this.match(GQLParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	generalSetFunctionType() {
	    let localctx = new GeneralSetFunctionTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 902, GQLParser.RULE_generalSetFunctionType);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4123;
	        _la = this._input.LA(1);
	        if(!(((((_la - 33)) & ~0x1f) === 0 && ((1 << (_la - 33)) & 545259521) !== 0) || _la===144 || _la===145 || ((((_la - 200)) & ~0x1f) === 0 && ((1 << (_la - 200)) & 11) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	setQuantifier() {
	    let localctx = new SetQuantifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 904, GQLParser.RULE_setQuantifier);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4125;
	        _la = this._input.LA(1);
	        if(!(_la===22 || _la===80)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	binarySetFunctionType() {
	    let localctx = new BinarySetFunctionTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 906, GQLParser.RULE_binarySetFunctionType);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4127;
	        _la = this._input.LA(1);
	        if(!(_la===169 || _la===170)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dependentValueExpression() {
	    let localctx = new DependentValueExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 908, GQLParser.RULE_dependentValueExpression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4130;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===22 || _la===80) {
	            this.state = 4129;
	            this.setQuantifier();
	        }

	        this.state = 4132;
	        this.numericValueExpression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	independentValueExpression() {
	    let localctx = new IndependentValueExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 910, GQLParser.RULE_independentValueExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4134;
	        this.numericValueExpression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	element_idFunction() {
	    let localctx = new Element_idFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 912, GQLParser.RULE_element_idFunction);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4136;
	        this.match(GQLParser.ELEMENT_ID);
	        this.state = 4137;
	        this.match(GQLParser.LEFT_PAREN);
	        this.state = 4138;
	        this.elementVariableReference();
	        this.state = 4139;
	        this.match(GQLParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bindingVariableReference() {
	    let localctx = new BindingVariableReferenceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 914, GQLParser.RULE_bindingVariableReference);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4141;
	        this.bindingVariable();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathValueExpression() {
	    let localctx = new PathValueExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 916, GQLParser.RULE_pathValueExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4143;
	        this.valueExpression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathValueConstructor() {
	    let localctx = new PathValueConstructorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 918, GQLParser.RULE_pathValueConstructor);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4145;
	        this.pathValueConstructorByEnumeration();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathValueConstructorByEnumeration() {
	    let localctx = new PathValueConstructorByEnumerationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 920, GQLParser.RULE_pathValueConstructorByEnumeration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4147;
	        this.match(GQLParser.PATH);
	        this.state = 4148;
	        this.match(GQLParser.LEFT_BRACKET);
	        this.state = 4149;
	        this.pathElementList();
	        this.state = 4150;
	        this.match(GQLParser.RIGHT_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathElementList() {
	    let localctx = new PathElementListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 922, GQLParser.RULE_pathElementList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4152;
	        this.pathElementListStart();
	        this.state = 4156;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===361) {
	            this.state = 4153;
	            this.pathElementListStep();
	            this.state = 4158;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathElementListStart() {
	    let localctx = new PathElementListStartContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 924, GQLParser.RULE_pathElementListStart);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4159;
	        this.nodeReferenceValueExpression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathElementListStep() {
	    let localctx = new PathElementListStepContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 926, GQLParser.RULE_pathElementListStep);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4161;
	        this.match(GQLParser.COMMA);
	        this.state = 4162;
	        this.edgeReferenceValueExpression();
	        this.state = 4163;
	        this.match(GQLParser.COMMA);
	        this.state = 4164;
	        this.nodeReferenceValueExpression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	listValueExpression() {
	    let localctx = new ListValueExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 928, GQLParser.RULE_listValueExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4166;
	        this.valueExpression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	listValueFunction() {
	    let localctx = new ListValueFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 930, GQLParser.RULE_listValueFunction);
	    try {
	        this.state = 4170;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 210:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4168;
	            this.trimListFunction();
	            break;
	        case 287:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4169;
	            this.elementsFunction();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	trimListFunction() {
	    let localctx = new TrimListFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 932, GQLParser.RULE_trimListFunction);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4172;
	        this.match(GQLParser.TRIM);
	        this.state = 4173;
	        this.match(GQLParser.LEFT_PAREN);
	        this.state = 4174;
	        this.listValueExpression();
	        this.state = 4175;
	        this.match(GQLParser.COMMA);
	        this.state = 4176;
	        this.numericValueExpression(0);
	        this.state = 4177;
	        this.match(GQLParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elementsFunction() {
	    let localctx = new ElementsFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 934, GQLParser.RULE_elementsFunction);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4179;
	        this.match(GQLParser.ELEMENTS);
	        this.state = 4180;
	        this.match(GQLParser.LEFT_PAREN);
	        this.state = 4181;
	        this.pathValueExpression();
	        this.state = 4182;
	        this.match(GQLParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	listValueConstructor() {
	    let localctx = new ListValueConstructorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 936, GQLParser.RULE_listValueConstructor);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4184;
	        this.listValueConstructorByEnumeration();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	listValueConstructorByEnumeration() {
	    let localctx = new ListValueConstructorByEnumerationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 938, GQLParser.RULE_listValueConstructorByEnumeration);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4187;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===26 || _la===102 || _la===133) {
	            this.state = 4186;
	            this.listValueTypeName();
	        }

	        this.state = 4189;
	        this.match(GQLParser.LEFT_BRACKET);
	        this.state = 4191;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 2)) & ~0x1f) === 0 && ((1 << (_la - 2)) & 3509583847) !== 0) || ((((_la - 40)) & ~0x1f) === 0 && ((1 << (_la - 40)) & 4051278821) !== 0) || ((((_la - 75)) & ~0x1f) === 0 && ((1 << (_la - 75)) & 151045889) !== 0) || ((((_la - 129)) & ~0x1f) === 0 && ((1 << (_la - 129)) & 449167283) !== 0) || ((((_la - 166)) & ~0x1f) === 0 && ((1 << (_la - 166)) & 478578107) !== 0) || ((((_la - 198)) & ~0x1f) === 0 && ((1 << (_la - 198)) & 151000813) !== 0) || _la===236 || _la===237 || ((((_la - 277)) & ~0x1f) === 0 && ((1 << (_la - 277)) & 4294967295) !== 0) || ((((_la - 309)) & ~0x1f) === 0 && ((1 << (_la - 309)) & 393215) !== 0) || ((((_la - 369)) & ~0x1f) === 0 && ((1 << (_la - 369)) & 151) !== 0)) {
	            this.state = 4190;
	            this.listElementList();
	        }

	        this.state = 4193;
	        this.match(GQLParser.RIGHT_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	listElementList() {
	    let localctx = new ListElementListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 940, GQLParser.RULE_listElementList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4195;
	        this.listElement();
	        this.state = 4200;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===361) {
	            this.state = 4196;
	            this.match(GQLParser.COMMA);
	            this.state = 4197;
	            this.listElement();
	            this.state = 4202;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	listElement() {
	    let localctx = new ListElementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 942, GQLParser.RULE_listElement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4203;
	        this.valueExpression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	recordConstructor() {
	    let localctx = new RecordConstructorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 944, GQLParser.RULE_recordConstructor);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4206;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===176) {
	            this.state = 4205;
	            this.match(GQLParser.RECORD);
	        }

	        this.state = 4208;
	        this.fieldsSpecification();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fieldsSpecification() {
	    let localctx = new FieldsSpecificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 946, GQLParser.RULE_fieldsSpecification);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4210;
	        this.match(GQLParser.LEFT_BRACE);
	        this.state = 4212;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===4 || _la===5 || ((((_la - 277)) & ~0x1f) === 0 && ((1 << (_la - 277)) & 4294967295) !== 0) || ((((_la - 309)) & ~0x1f) === 0 && ((1 << (_la - 309)) & 131071) !== 0)) {
	            this.state = 4211;
	            this.fieldList();
	        }

	        this.state = 4214;
	        this.match(GQLParser.RIGHT_BRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fieldList() {
	    let localctx = new FieldListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 948, GQLParser.RULE_fieldList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4216;
	        this.field();
	        this.state = 4221;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===361) {
	            this.state = 4217;
	            this.match(GQLParser.COMMA);
	            this.state = 4218;
	            this.field();
	            this.state = 4223;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	field() {
	    let localctx = new FieldContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 950, GQLParser.RULE_field);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4224;
	        this.fieldName();
	        this.state = 4225;
	        this.match(GQLParser.COLON);
	        this.state = 4226;
	        this.valueExpression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	truthValue() {
	    let localctx = new TruthValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 952, GQLParser.RULE_truthValue);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4228;
	        this.match(GQLParser.BOOLEAN_LITERAL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	numericValueExpression(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new NumericValueExpressionContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 954;
	    this.enterRecursionRule(localctx, 954, GQLParser.RULE_numericValueExpression, _p);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4235;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 373:
	        case 376:
	            this.state = 4231;
	            localctx.sign = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===373 || _la===376)) {
	                localctx.sign = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 4232;
	            this.numericValueExpression(5);
	            break;
	        case 2:
	        case 3:
	        case 4:
	        case 7:
	        case 8:
	        case 9:
	        case 10:
	        case 11:
	        case 12:
	        case 13:
	        case 14:
	        case 15:
	        case 16:
	        case 17:
	        case 18:
	        case 19:
	        case 26:
	        case 33:
	        case 46:
	        case 47:
	        case 55:
	        case 56:
	        case 62:
	        case 70:
	        case 71:
	        case 83:
	        case 85:
	        case 102:
	        case 130:
	        case 133:
	        case 144:
	        case 145:
	        case 154:
	        case 156:
	        case 166:
	        case 169:
	        case 170:
	        case 176:
	        case 189:
	        case 200:
	        case 201:
	        case 203:
	        case 207:
	        case 208:
	        case 225:
	        case 277:
	        case 278:
	        case 279:
	        case 280:
	        case 281:
	        case 282:
	        case 283:
	        case 284:
	        case 285:
	        case 286:
	        case 287:
	        case 288:
	        case 289:
	        case 290:
	        case 291:
	        case 292:
	        case 293:
	        case 294:
	        case 295:
	        case 296:
	        case 297:
	        case 298:
	        case 299:
	        case 300:
	        case 301:
	        case 302:
	        case 303:
	        case 304:
	        case 305:
	        case 306:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 315:
	        case 316:
	        case 317:
	        case 318:
	        case 319:
	        case 320:
	        case 321:
	        case 322:
	        case 323:
	        case 324:
	        case 325:
	        case 327:
	        case 369:
	        case 370:
	        case 371:
	            this.state = 4233;
	            this.valueExpressionPrimary(0);
	            break;
	        case 20:
	        case 21:
	        case 30:
	        case 32:
	        case 42:
	        case 45:
	        case 48:
	        case 49:
	        case 51:
	        case 52:
	        case 59:
	        case 60:
	        case 61:
	        case 75:
	        case 90:
	        case 99:
	        case 134:
	        case 139:
	        case 140:
	        case 147:
	        case 157:
	        case 167:
	        case 171:
	        case 174:
	        case 192:
	        case 193:
	        case 194:
	        case 198:
	        case 204:
	        case 205:
	            this.state = 4234;
	            this.numericValueFunction();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 4245;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,478,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 4243;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,477,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new NumericValueExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, GQLParser.RULE_numericValueExpression);
	                    this.state = 4237;
	                    if (!( this.precpred(this._ctx, 4))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
	                    }
	                    this.state = 4238;
	                    localctx.operator = this._input.LT(1);
	                    _la = this._input.LA(1);
	                    if(!(_la===359 || _la===383)) {
	                        localctx.operator = this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 4239;
	                    this.numericValueExpression(5);
	                    break;

	                case 2:
	                    localctx = new NumericValueExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, GQLParser.RULE_numericValueExpression);
	                    this.state = 4240;
	                    if (!( this.precpred(this._ctx, 3))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
	                    }
	                    this.state = 4241;
	                    localctx.operator = this._input.LT(1);
	                    _la = this._input.LA(1);
	                    if(!(_la===373 || _la===376)) {
	                        localctx.operator = this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 4242;
	                    this.numericValueExpression(4);
	                    break;

	                } 
	            }
	            this.state = 4247;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,478,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	numericValueFunction() {
	    let localctx = new NumericValueFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 956, GQLParser.RULE_numericValueFunction);
	    try {
	        this.state = 4261;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 42:
	        case 51:
	        case 52:
	        case 157:
	        case 167:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4248;
	            this.lengthExpression();
	            break;
	        case 45:
	        case 194:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4249;
	            this.cardinalityExpression();
	            break;
	        case 20:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4250;
	            this.absoluteValueExpression();
	            break;
	        case 147:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 4251;
	            this.modulusExpression();
	            break;
	        case 21:
	        case 30:
	        case 32:
	        case 59:
	        case 60:
	        case 61:
	        case 75:
	        case 174:
	        case 192:
	        case 193:
	        case 204:
	        case 205:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 4252;
	            this.trigonometricFunction();
	            break;
	        case 139:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 4253;
	            this.generalLogarithmFunction();
	            break;
	        case 140:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 4254;
	            this.commonLogarithm();
	            break;
	        case 134:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 4255;
	            this.naturalLogarithm();
	            break;
	        case 90:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 4256;
	            this.exponentialFunction();
	            break;
	        case 171:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 4257;
	            this.powerFunction();
	            break;
	        case 198:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 4258;
	            this.squareRoot();
	            break;
	        case 99:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 4259;
	            this.floorFunction();
	            break;
	        case 48:
	        case 49:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 4260;
	            this.ceilingFunction();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lengthExpression() {
	    let localctx = new LengthExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 958, GQLParser.RULE_lengthExpression);
	    try {
	        this.state = 4266;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 51:
	        case 52:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4263;
	            this.charLengthExpression();
	            break;
	        case 42:
	        case 157:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4264;
	            this.byteLengthExpression();
	            break;
	        case 167:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4265;
	            this.pathLengthExpression();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cardinalityExpression() {
	    let localctx = new CardinalityExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 960, GQLParser.RULE_cardinalityExpression);
	    try {
	        this.state = 4278;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 45:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4268;
	            this.match(GQLParser.CARDINALITY);
	            this.state = 4269;
	            this.match(GQLParser.LEFT_PAREN);
	            this.state = 4270;
	            this.cardinalityExpressionArgument();
	            this.state = 4271;
	            this.match(GQLParser.RIGHT_PAREN);
	            break;
	        case 194:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4273;
	            this.match(GQLParser.SIZE);
	            this.state = 4274;
	            this.match(GQLParser.LEFT_PAREN);
	            this.state = 4275;
	            this.listValueExpression();
	            this.state = 4276;
	            this.match(GQLParser.RIGHT_PAREN);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cardinalityExpressionArgument() {
	    let localctx = new CardinalityExpressionArgumentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 962, GQLParser.RULE_cardinalityExpressionArgument);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4280;
	        this.valueExpression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	charLengthExpression() {
	    let localctx = new CharLengthExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 964, GQLParser.RULE_charLengthExpression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4282;
	        _la = this._input.LA(1);
	        if(!(_la===51 || _la===52)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 4283;
	        this.match(GQLParser.LEFT_PAREN);
	        this.state = 4284;
	        this.characterStringValueExpression();
	        this.state = 4285;
	        this.match(GQLParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	byteLengthExpression() {
	    let localctx = new ByteLengthExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 966, GQLParser.RULE_byteLengthExpression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4287;
	        _la = this._input.LA(1);
	        if(!(_la===42 || _la===157)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 4288;
	        this.match(GQLParser.LEFT_PAREN);
	        this.state = 4289;
	        this.byteStringValueExpression();
	        this.state = 4290;
	        this.match(GQLParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathLengthExpression() {
	    let localctx = new PathLengthExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 968, GQLParser.RULE_pathLengthExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4292;
	        this.match(GQLParser.PATH_LENGTH);
	        this.state = 4293;
	        this.match(GQLParser.LEFT_PAREN);
	        this.state = 4294;
	        this.pathValueExpression();
	        this.state = 4295;
	        this.match(GQLParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	absoluteValueExpression() {
	    let localctx = new AbsoluteValueExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 970, GQLParser.RULE_absoluteValueExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4297;
	        this.match(GQLParser.ABS);
	        this.state = 4298;
	        this.match(GQLParser.LEFT_PAREN);
	        this.state = 4299;
	        this.valueExpression(0);
	        this.state = 4300;
	        this.match(GQLParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	modulusExpression() {
	    let localctx = new ModulusExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 972, GQLParser.RULE_modulusExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4302;
	        this.match(GQLParser.MOD);
	        this.state = 4303;
	        this.match(GQLParser.LEFT_PAREN);
	        this.state = 4304;
	        this.numericValueExpressionDividend();
	        this.state = 4305;
	        this.match(GQLParser.COMMA);
	        this.state = 4306;
	        this.numericValueExpressionDivisor();
	        this.state = 4307;
	        this.match(GQLParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	numericValueExpressionDividend() {
	    let localctx = new NumericValueExpressionDividendContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 974, GQLParser.RULE_numericValueExpressionDividend);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4309;
	        this.numericValueExpression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	numericValueExpressionDivisor() {
	    let localctx = new NumericValueExpressionDivisorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 976, GQLParser.RULE_numericValueExpressionDivisor);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4311;
	        this.numericValueExpression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	trigonometricFunction() {
	    let localctx = new TrigonometricFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 978, GQLParser.RULE_trigonometricFunction);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4313;
	        this.trigonometricFunctionName();
	        this.state = 4314;
	        this.match(GQLParser.LEFT_PAREN);
	        this.state = 4315;
	        this.numericValueExpression(0);
	        this.state = 4316;
	        this.match(GQLParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	trigonometricFunctionName() {
	    let localctx = new TrigonometricFunctionNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 980, GQLParser.RULE_trigonometricFunctionName);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4318;
	        _la = this._input.LA(1);
	        if(!(((((_la - 21)) & ~0x1f) === 0 && ((1 << (_la - 21)) & 2561) !== 0) || ((((_la - 59)) & ~0x1f) === 0 && ((1 << (_la - 59)) & 65543) !== 0) || ((((_la - 174)) & ~0x1f) === 0 && ((1 << (_la - 174)) & 3222011905) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	generalLogarithmFunction() {
	    let localctx = new GeneralLogarithmFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 982, GQLParser.RULE_generalLogarithmFunction);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4320;
	        this.match(GQLParser.LOG);
	        this.state = 4321;
	        this.match(GQLParser.LEFT_PAREN);
	        this.state = 4322;
	        this.generalLogarithmBase();
	        this.state = 4323;
	        this.match(GQLParser.COMMA);
	        this.state = 4324;
	        this.generalLogarithmArgument();
	        this.state = 4325;
	        this.match(GQLParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	generalLogarithmBase() {
	    let localctx = new GeneralLogarithmBaseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 984, GQLParser.RULE_generalLogarithmBase);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4327;
	        this.numericValueExpression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	generalLogarithmArgument() {
	    let localctx = new GeneralLogarithmArgumentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 986, GQLParser.RULE_generalLogarithmArgument);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4329;
	        this.numericValueExpression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	commonLogarithm() {
	    let localctx = new CommonLogarithmContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 988, GQLParser.RULE_commonLogarithm);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4331;
	        this.match(GQLParser.LOG10);
	        this.state = 4332;
	        this.match(GQLParser.LEFT_PAREN);
	        this.state = 4333;
	        this.numericValueExpression(0);
	        this.state = 4334;
	        this.match(GQLParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	naturalLogarithm() {
	    let localctx = new NaturalLogarithmContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 990, GQLParser.RULE_naturalLogarithm);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4336;
	        this.match(GQLParser.LN);
	        this.state = 4337;
	        this.match(GQLParser.LEFT_PAREN);
	        this.state = 4338;
	        this.numericValueExpression(0);
	        this.state = 4339;
	        this.match(GQLParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	exponentialFunction() {
	    let localctx = new ExponentialFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 992, GQLParser.RULE_exponentialFunction);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4341;
	        this.match(GQLParser.EXP);
	        this.state = 4342;
	        this.match(GQLParser.LEFT_PAREN);
	        this.state = 4343;
	        this.numericValueExpression(0);
	        this.state = 4344;
	        this.match(GQLParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	powerFunction() {
	    let localctx = new PowerFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 994, GQLParser.RULE_powerFunction);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4346;
	        this.match(GQLParser.POWER);
	        this.state = 4347;
	        this.match(GQLParser.LEFT_PAREN);
	        this.state = 4348;
	        this.numericValueExpressionBase();
	        this.state = 4349;
	        this.match(GQLParser.COMMA);
	        this.state = 4350;
	        this.numericValueExpressionExponent();
	        this.state = 4351;
	        this.match(GQLParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	numericValueExpressionBase() {
	    let localctx = new NumericValueExpressionBaseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 996, GQLParser.RULE_numericValueExpressionBase);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4353;
	        this.numericValueExpression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	numericValueExpressionExponent() {
	    let localctx = new NumericValueExpressionExponentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 998, GQLParser.RULE_numericValueExpressionExponent);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4355;
	        this.numericValueExpression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	squareRoot() {
	    let localctx = new SquareRootContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1000, GQLParser.RULE_squareRoot);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4357;
	        this.match(GQLParser.SQRT);
	        this.state = 4358;
	        this.match(GQLParser.LEFT_PAREN);
	        this.state = 4359;
	        this.numericValueExpression(0);
	        this.state = 4360;
	        this.match(GQLParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	floorFunction() {
	    let localctx = new FloorFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1002, GQLParser.RULE_floorFunction);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4362;
	        this.match(GQLParser.FLOOR);
	        this.state = 4363;
	        this.match(GQLParser.LEFT_PAREN);
	        this.state = 4364;
	        this.numericValueExpression(0);
	        this.state = 4365;
	        this.match(GQLParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ceilingFunction() {
	    let localctx = new CeilingFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1004, GQLParser.RULE_ceilingFunction);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4367;
	        _la = this._input.LA(1);
	        if(!(_la===48 || _la===49)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 4368;
	        this.match(GQLParser.LEFT_PAREN);
	        this.state = 4369;
	        this.numericValueExpression(0);
	        this.state = 4370;
	        this.match(GQLParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	characterStringValueExpression() {
	    let localctx = new CharacterStringValueExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1006, GQLParser.RULE_characterStringValueExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4372;
	        this.valueExpression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	byteStringValueExpression() {
	    let localctx = new ByteStringValueExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1008, GQLParser.RULE_byteStringValueExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4374;
	        this.valueExpression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	trimOperands() {
	    let localctx = new TrimOperandsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1010, GQLParser.RULE_trimOperands);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4383;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,484,this._ctx);
	        if(la_===1) {
	            this.state = 4377;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===39 || _la===128 || _la===209) {
	                this.state = 4376;
	                this.trimSpecification();
	            }

	            this.state = 4380;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 2)) & ~0x1f) === 0 && ((1 << (_la - 2)) & 3509583847) !== 0) || ((((_la - 40)) & ~0x1f) === 0 && ((1 << (_la - 40)) & 4051278821) !== 0) || ((((_la - 75)) & ~0x1f) === 0 && ((1 << (_la - 75)) & 151045889) !== 0) || ((((_la - 129)) & ~0x1f) === 0 && ((1 << (_la - 129)) & 449167283) !== 0) || ((((_la - 166)) & ~0x1f) === 0 && ((1 << (_la - 166)) & 478578107) !== 0) || ((((_la - 198)) & ~0x1f) === 0 && ((1 << (_la - 198)) & 151000813) !== 0) || _la===236 || _la===237 || ((((_la - 277)) & ~0x1f) === 0 && ((1 << (_la - 277)) & 4294967295) !== 0) || ((((_la - 309)) & ~0x1f) === 0 && ((1 << (_la - 309)) & 393215) !== 0) || ((((_la - 369)) & ~0x1f) === 0 && ((1 << (_la - 369)) & 151) !== 0)) {
	                this.state = 4379;
	                this.trimCharacterOrByteString();
	            }

	            this.state = 4382;
	            this.match(GQLParser.FROM);

	        }
	        this.state = 4385;
	        this.trimCharacterOrByteStringSource();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	trimCharacterOrByteStringSource() {
	    let localctx = new TrimCharacterOrByteStringSourceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1012, GQLParser.RULE_trimCharacterOrByteStringSource);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4387;
	        this.valueExpression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	trimSpecification() {
	    let localctx = new TrimSpecificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1014, GQLParser.RULE_trimSpecification);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4389;
	        _la = this._input.LA(1);
	        if(!(_la===39 || _la===128 || _la===209)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	trimCharacterOrByteString() {
	    let localctx = new TrimCharacterOrByteStringContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1016, GQLParser.RULE_trimCharacterOrByteString);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4391;
	        this.valueExpression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	normalForm() {
	    let localctx = new NormalFormContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1018, GQLParser.RULE_normalForm);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4393;
	        _la = this._input.LA(1);
	        if(!(((((_la - 296)) & ~0x1f) === 0 && ((1 << (_la - 296)) & 15) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stringLength() {
	    let localctx = new StringLengthContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1020, GQLParser.RULE_stringLength);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4395;
	        this.numericValueExpression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	datetimeValueExpression() {
	    let localctx = new DatetimeValueExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1022, GQLParser.RULE_datetimeValueExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4397;
	        this.valueExpression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	datetimeValueFunction() {
	    let localctx = new DatetimeValueFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1024, GQLParser.RULE_datetimeValueFunction);
	    try {
	        this.state = 4404;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 64:
	        case 70:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4399;
	            this.dateFunction();
	            break;
	        case 68:
	        case 237:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4400;
	            this.timeFunction();
	            break;
	        case 69:
	        case 236:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4401;
	            this.datetimeFunction();
	            break;
	        case 137:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 4402;
	            this.localtimeFunction();
	            break;
	        case 136:
	        case 138:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 4403;
	            this.localdatetimeFunction();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dateFunction() {
	    let localctx = new DateFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1026, GQLParser.RULE_dateFunction);
	    var _la = 0;
	    try {
	        this.state = 4413;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 64:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4406;
	            this.match(GQLParser.CURRENT_DATE);
	            break;
	        case 70:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4407;
	            this.match(GQLParser.DATE);
	            this.state = 4408;
	            this.match(GQLParser.LEFT_PAREN);
	            this.state = 4410;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===3 || _la===4 || _la===176 || _la===369) {
	                this.state = 4409;
	                this.dateFunctionParameters();
	            }

	            this.state = 4412;
	            this.match(GQLParser.RIGHT_PAREN);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	timeFunction() {
	    let localctx = new TimeFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1028, GQLParser.RULE_timeFunction);
	    var _la = 0;
	    try {
	        this.state = 4422;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 68:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4415;
	            this.match(GQLParser.CURRENT_TIME);
	            break;
	        case 237:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4416;
	            this.match(GQLParser.ZONED_TIME);
	            this.state = 4417;
	            this.match(GQLParser.LEFT_PAREN);
	            this.state = 4419;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===3 || _la===4 || _la===176 || _la===369) {
	                this.state = 4418;
	                this.timeFunctionParameters();
	            }

	            this.state = 4421;
	            this.match(GQLParser.RIGHT_PAREN);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	localtimeFunction() {
	    let localctx = new LocaltimeFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1030, GQLParser.RULE_localtimeFunction);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4424;
	        this.match(GQLParser.LOCAL_TIME);
	        this.state = 4430;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,491,this._ctx);
	        if(la_===1) {
	            this.state = 4425;
	            this.match(GQLParser.LEFT_PAREN);
	            this.state = 4427;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===3 || _la===4 || _la===176 || _la===369) {
	                this.state = 4426;
	                this.timeFunctionParameters();
	            }

	            this.state = 4429;
	            this.match(GQLParser.RIGHT_PAREN);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	datetimeFunction() {
	    let localctx = new DatetimeFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1032, GQLParser.RULE_datetimeFunction);
	    var _la = 0;
	    try {
	        this.state = 4439;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 69:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4432;
	            this.match(GQLParser.CURRENT_TIMESTAMP);
	            break;
	        case 236:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4433;
	            this.match(GQLParser.ZONED_DATETIME);
	            this.state = 4434;
	            this.match(GQLParser.LEFT_PAREN);
	            this.state = 4436;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===3 || _la===4 || _la===176 || _la===369) {
	                this.state = 4435;
	                this.datetimeFunctionParameters();
	            }

	            this.state = 4438;
	            this.match(GQLParser.RIGHT_PAREN);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	localdatetimeFunction() {
	    let localctx = new LocaldatetimeFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1034, GQLParser.RULE_localdatetimeFunction);
	    var _la = 0;
	    try {
	        this.state = 4448;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 138:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4441;
	            this.match(GQLParser.LOCAL_TIMESTAMP);
	            break;
	        case 136:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4442;
	            this.match(GQLParser.LOCAL_DATETIME);
	            this.state = 4443;
	            this.match(GQLParser.LEFT_PAREN);
	            this.state = 4445;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===3 || _la===4 || _la===176 || _la===369) {
	                this.state = 4444;
	                this.datetimeFunctionParameters();
	            }

	            this.state = 4447;
	            this.match(GQLParser.RIGHT_PAREN);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dateFunctionParameters() {
	    let localctx = new DateFunctionParametersContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1036, GQLParser.RULE_dateFunctionParameters);
	    try {
	        this.state = 4452;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 3:
	        case 4:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4450;
	            this.dateString();
	            break;
	        case 176:
	        case 369:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4451;
	            this.recordConstructor();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	timeFunctionParameters() {
	    let localctx = new TimeFunctionParametersContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1038, GQLParser.RULE_timeFunctionParameters);
	    try {
	        this.state = 4456;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 3:
	        case 4:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4454;
	            this.timeString();
	            break;
	        case 176:
	        case 369:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4455;
	            this.recordConstructor();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	datetimeFunctionParameters() {
	    let localctx = new DatetimeFunctionParametersContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1040, GQLParser.RULE_datetimeFunctionParameters);
	    try {
	        this.state = 4460;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 3:
	        case 4:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4458;
	            this.datetimeString();
	            break;
	        case 176:
	        case 369:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4459;
	            this.recordConstructor();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	durationValueExpression() {
	    let localctx = new DurationValueExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1042, GQLParser.RULE_durationValueExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4462;
	        this.valueExpression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	datetimeSubtraction() {
	    let localctx = new DatetimeSubtractionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1044, GQLParser.RULE_datetimeSubtraction);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4464;
	        this.match(GQLParser.DURATION_BETWEEN);
	        this.state = 4465;
	        this.match(GQLParser.LEFT_PAREN);
	        this.state = 4466;
	        this.datetimeSubtractionParameters();
	        this.state = 4467;
	        this.match(GQLParser.RIGHT_PAREN);
	        this.state = 4469;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,499,this._ctx);
	        if(la_===1) {
	            this.state = 4468;
	            this.temporalDurationQualifier();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	datetimeSubtractionParameters() {
	    let localctx = new DatetimeSubtractionParametersContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1046, GQLParser.RULE_datetimeSubtractionParameters);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4471;
	        this.datetimeValueExpression1();
	        this.state = 4472;
	        this.match(GQLParser.COMMA);
	        this.state = 4473;
	        this.datetimeValueExpression2();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	datetimeValueExpression1() {
	    let localctx = new DatetimeValueExpression1Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 1048, GQLParser.RULE_datetimeValueExpression1);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4475;
	        this.datetimeValueExpression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	datetimeValueExpression2() {
	    let localctx = new DatetimeValueExpression2Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 1050, GQLParser.RULE_datetimeValueExpression2);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4477;
	        this.datetimeValueExpression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	durationValueFunction() {
	    let localctx = new DurationValueFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1052, GQLParser.RULE_durationValueFunction);
	    try {
	        this.state = 4481;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 83:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4479;
	            this.durationFunction();
	            break;
	        case 20:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4480;
	            this.absoluteValueExpression();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	durationFunction() {
	    let localctx = new DurationFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1054, GQLParser.RULE_durationFunction);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4483;
	        this.match(GQLParser.DURATION);
	        this.state = 4484;
	        this.match(GQLParser.LEFT_PAREN);
	        this.state = 4485;
	        this.durationFunctionParameters();
	        this.state = 4486;
	        this.match(GQLParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	durationFunctionParameters() {
	    let localctx = new DurationFunctionParametersContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1056, GQLParser.RULE_durationFunctionParameters);
	    try {
	        this.state = 4490;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 3:
	        case 4:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4488;
	            this.durationString();
	            break;
	        case 176:
	        case 369:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4489;
	            this.recordConstructor();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	objectName() {
	    let localctx = new ObjectNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1058, GQLParser.RULE_objectName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4492;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	objectNameOrBindingVariable() {
	    let localctx = new ObjectNameOrBindingVariableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1060, GQLParser.RULE_objectNameOrBindingVariable);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4494;
	        this.regularIdentifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	directoryName() {
	    let localctx = new DirectoryNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1062, GQLParser.RULE_directoryName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4496;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	schemaName() {
	    let localctx = new SchemaNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1064, GQLParser.RULE_schemaName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4498;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	graphName() {
	    let localctx = new GraphNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1066, GQLParser.RULE_graphName);
	    try {
	        this.state = 4502;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 277:
	        case 278:
	        case 279:
	        case 280:
	        case 281:
	        case 282:
	        case 283:
	        case 284:
	        case 285:
	        case 286:
	        case 287:
	        case 288:
	        case 289:
	        case 290:
	        case 291:
	        case 292:
	        case 293:
	        case 294:
	        case 295:
	        case 296:
	        case 297:
	        case 298:
	        case 299:
	        case 300:
	        case 301:
	        case 302:
	        case 303:
	        case 304:
	        case 305:
	        case 306:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 315:
	        case 316:
	        case 317:
	        case 318:
	        case 319:
	        case 320:
	        case 321:
	        case 322:
	        case 323:
	        case 324:
	        case 325:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4500;
	            this.regularIdentifier();
	            break;
	        case 4:
	        case 5:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4501;
	            this.delimitedGraphName();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	delimitedGraphName() {
	    let localctx = new DelimitedGraphNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1068, GQLParser.RULE_delimitedGraphName);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4504;
	        _la = this._input.LA(1);
	        if(!(_la===4 || _la===5)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	graphTypeName() {
	    let localctx = new GraphTypeNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1070, GQLParser.RULE_graphTypeName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4506;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nodeTypeName() {
	    let localctx = new NodeTypeNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1072, GQLParser.RULE_nodeTypeName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4508;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	edgeTypeName() {
	    let localctx = new EdgeTypeNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1074, GQLParser.RULE_edgeTypeName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4510;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bindingTableName() {
	    let localctx = new BindingTableNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1076, GQLParser.RULE_bindingTableName);
	    try {
	        this.state = 4514;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 277:
	        case 278:
	        case 279:
	        case 280:
	        case 281:
	        case 282:
	        case 283:
	        case 284:
	        case 285:
	        case 286:
	        case 287:
	        case 288:
	        case 289:
	        case 290:
	        case 291:
	        case 292:
	        case 293:
	        case 294:
	        case 295:
	        case 296:
	        case 297:
	        case 298:
	        case 299:
	        case 300:
	        case 301:
	        case 302:
	        case 303:
	        case 304:
	        case 305:
	        case 306:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 315:
	        case 316:
	        case 317:
	        case 318:
	        case 319:
	        case 320:
	        case 321:
	        case 322:
	        case 323:
	        case 324:
	        case 325:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4512;
	            this.regularIdentifier();
	            break;
	        case 4:
	        case 5:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4513;
	            this.delimitedBindingTableName();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	delimitedBindingTableName() {
	    let localctx = new DelimitedBindingTableNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1078, GQLParser.RULE_delimitedBindingTableName);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4516;
	        _la = this._input.LA(1);
	        if(!(_la===4 || _la===5)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	procedureName() {
	    let localctx = new ProcedureNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1080, GQLParser.RULE_procedureName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4518;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	labelName() {
	    let localctx = new LabelNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1082, GQLParser.RULE_labelName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4520;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	propertyName() {
	    let localctx = new PropertyNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1084, GQLParser.RULE_propertyName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4522;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fieldName() {
	    let localctx = new FieldNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1086, GQLParser.RULE_fieldName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4524;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elementVariable() {
	    let localctx = new ElementVariableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1088, GQLParser.RULE_elementVariable);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4526;
	        this.bindingVariable();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathVariable() {
	    let localctx = new PathVariableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1090, GQLParser.RULE_pathVariable);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4528;
	        this.bindingVariable();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	subpathVariable() {
	    let localctx = new SubpathVariableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1092, GQLParser.RULE_subpathVariable);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4530;
	        this.regularIdentifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bindingVariable() {
	    let localctx = new BindingVariableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1094, GQLParser.RULE_bindingVariable);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4532;
	        this.regularIdentifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unsignedLiteral() {
	    let localctx = new UnsignedLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1096, GQLParser.RULE_unsignedLiteral);
	    try {
	        this.state = 4536;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 8:
	        case 9:
	        case 10:
	        case 11:
	        case 12:
	        case 13:
	        case 14:
	        case 15:
	        case 16:
	        case 17:
	        case 18:
	        case 19:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4534;
	            this.unsignedNumericLiteral();
	            break;
	        case 2:
	        case 3:
	        case 4:
	        case 7:
	        case 26:
	        case 70:
	        case 71:
	        case 83:
	        case 102:
	        case 133:
	        case 154:
	        case 176:
	        case 207:
	        case 208:
	        case 369:
	        case 370:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4535;
	            this.generalLiteral();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	generalLiteral() {
	    let localctx = new GeneralLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1098, GQLParser.RULE_generalLiteral);
	    try {
	        this.state = 4546;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 2:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4538;
	            this.match(GQLParser.BOOLEAN_LITERAL);
	            break;
	        case 3:
	        case 4:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4539;
	            this.characterStringLiteral();
	            break;
	        case 7:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4540;
	            this.match(GQLParser.BYTE_STRING_LITERAL);
	            break;
	        case 70:
	        case 71:
	        case 207:
	        case 208:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 4541;
	            this.temporalLiteral();
	            break;
	        case 83:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 4542;
	            this.durationLiteral();
	            break;
	        case 154:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 4543;
	            this.nullLiteral();
	            break;
	        case 26:
	        case 102:
	        case 133:
	        case 370:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 4544;
	            this.listLiteral();
	            break;
	        case 176:
	        case 369:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 4545;
	            this.recordLiteral();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	temporalLiteral() {
	    let localctx = new TemporalLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1100, GQLParser.RULE_temporalLiteral);
	    try {
	        this.state = 4551;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 70:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4548;
	            this.dateLiteral();
	            break;
	        case 207:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4549;
	            this.timeLiteral();
	            break;
	        case 71:
	        case 208:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4550;
	            this.datetimeLiteral();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dateLiteral() {
	    let localctx = new DateLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1102, GQLParser.RULE_dateLiteral);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4553;
	        this.match(GQLParser.DATE);
	        this.state = 4554;
	        this.dateString();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	timeLiteral() {
	    let localctx = new TimeLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1104, GQLParser.RULE_timeLiteral);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4556;
	        this.match(GQLParser.TIME);
	        this.state = 4557;
	        this.timeString();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	datetimeLiteral() {
	    let localctx = new DatetimeLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1106, GQLParser.RULE_datetimeLiteral);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4559;
	        _la = this._input.LA(1);
	        if(!(_la===71 || _la===208)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 4560;
	        this.datetimeString();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	listLiteral() {
	    let localctx = new ListLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1108, GQLParser.RULE_listLiteral);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4562;
	        this.listValueConstructorByEnumeration();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	recordLiteral() {
	    let localctx = new RecordLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1110, GQLParser.RULE_recordLiteral);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4564;
	        this.recordConstructor();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	identifier() {
	    let localctx = new IdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1112, GQLParser.RULE_identifier);
	    try {
	        this.state = 4569;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 277:
	        case 278:
	        case 279:
	        case 280:
	        case 281:
	        case 282:
	        case 283:
	        case 284:
	        case 285:
	        case 286:
	        case 287:
	        case 288:
	        case 289:
	        case 290:
	        case 291:
	        case 292:
	        case 293:
	        case 294:
	        case 295:
	        case 296:
	        case 297:
	        case 298:
	        case 299:
	        case 300:
	        case 301:
	        case 302:
	        case 303:
	        case 304:
	        case 305:
	        case 306:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 315:
	        case 316:
	        case 317:
	        case 318:
	        case 319:
	        case 320:
	        case 321:
	        case 322:
	        case 323:
	        case 324:
	        case 325:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4566;
	            this.regularIdentifier();
	            break;
	        case 4:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4567;
	            this.match(GQLParser.DOUBLE_QUOTED_CHARACTER_SEQUENCE);
	            break;
	        case 5:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4568;
	            this.match(GQLParser.ACCENT_QUOTED_CHARACTER_SEQUENCE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	regularIdentifier() {
	    let localctx = new RegularIdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1114, GQLParser.RULE_regularIdentifier);
	    try {
	        this.state = 4573;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 325:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4571;
	            this.match(GQLParser.REGULAR_IDENTIFIER);
	            break;
	        case 277:
	        case 278:
	        case 279:
	        case 280:
	        case 281:
	        case 282:
	        case 283:
	        case 284:
	        case 285:
	        case 286:
	        case 287:
	        case 288:
	        case 289:
	        case 290:
	        case 291:
	        case 292:
	        case 293:
	        case 294:
	        case 295:
	        case 296:
	        case 297:
	        case 298:
	        case 299:
	        case 300:
	        case 301:
	        case 302:
	        case 303:
	        case 304:
	        case 305:
	        case 306:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 315:
	        case 316:
	        case 317:
	        case 318:
	        case 319:
	        case 320:
	        case 321:
	        case 322:
	        case 323:
	        case 324:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4572;
	            this.nonReservedWords();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	timeZoneString() {
	    let localctx = new TimeZoneStringContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1116, GQLParser.RULE_timeZoneString);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4575;
	        this.characterStringLiteral();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	characterStringLiteral() {
	    let localctx = new CharacterStringLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1118, GQLParser.RULE_characterStringLiteral);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4577;
	        _la = this._input.LA(1);
	        if(!(_la===3 || _la===4)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unsignedNumericLiteral() {
	    let localctx = new UnsignedNumericLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1120, GQLParser.RULE_unsignedNumericLiteral);
	    try {
	        this.state = 4581;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 8:
	        case 11:
	        case 12:
	        case 14:
	        case 16:
	        case 17:
	        case 18:
	        case 19:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4579;
	            this.exactNumericLiteral();
	            break;
	        case 9:
	        case 10:
	        case 13:
	        case 15:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4580;
	            this.approximateNumericLiteral();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	exactNumericLiteral() {
	    let localctx = new ExactNumericLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1122, GQLParser.RULE_exactNumericLiteral);
	    try {
	        this.state = 4588;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 8:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4583;
	            this.match(GQLParser.UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION_WITH_EXACT_NUMBER_SUFFIX);
	            break;
	        case 11:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4584;
	            this.match(GQLParser.UNSIGNED_DECIMAL_IN_COMMON_NOTATION_WITH_EXACT_NUMBER_SUFFIX);
	            break;
	        case 12:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4585;
	            this.match(GQLParser.UNSIGNED_DECIMAL_IN_COMMON_NOTATION_WITHOUT_SUFFIX);
	            break;
	        case 14:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 4586;
	            this.match(GQLParser.UNSIGNED_DECIMAL_INTEGER_WITH_EXACT_NUMBER_SUFFIX);
	            break;
	        case 16:
	        case 17:
	        case 18:
	        case 19:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 4587;
	            this.unsignedInteger();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	approximateNumericLiteral() {
	    let localctx = new ApproximateNumericLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1124, GQLParser.RULE_approximateNumericLiteral);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4590;
	        _la = this._input.LA(1);
	        if(!((((_la) & ~0x1f) === 0 && ((1 << _la) & 42496) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unsignedInteger() {
	    let localctx = new UnsignedIntegerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1126, GQLParser.RULE_unsignedInteger);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4592;
	        _la = this._input.LA(1);
	        if(!((((_la) & ~0x1f) === 0 && ((1 << _la) & 983040) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unsignedDecimalInteger() {
	    let localctx = new UnsignedDecimalIntegerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1128, GQLParser.RULE_unsignedDecimalInteger);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4594;
	        this.match(GQLParser.UNSIGNED_DECIMAL_INTEGER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nullLiteral() {
	    let localctx = new NullLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1130, GQLParser.RULE_nullLiteral);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4596;
	        this.match(GQLParser.NULL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dateString() {
	    let localctx = new DateStringContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1132, GQLParser.RULE_dateString);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4598;
	        this.characterStringLiteral();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	timeString() {
	    let localctx = new TimeStringContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1134, GQLParser.RULE_timeString);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4600;
	        this.characterStringLiteral();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	datetimeString() {
	    let localctx = new DatetimeStringContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1136, GQLParser.RULE_datetimeString);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4602;
	        this.characterStringLiteral();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	durationLiteral() {
	    let localctx = new DurationLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1138, GQLParser.RULE_durationLiteral);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4604;
	        this.match(GQLParser.DURATION);
	        this.state = 4605;
	        this.durationString();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	durationString() {
	    let localctx = new DurationStringContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1140, GQLParser.RULE_durationString);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4607;
	        this.characterStringLiteral();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nodeSynonym() {
	    let localctx = new NodeSynonymContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1142, GQLParser.RULE_nodeSynonym);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4609;
	        _la = this._input.LA(1);
	        if(!(_la===301 || _la===320)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	edgesSynonym() {
	    let localctx = new EdgesSynonymContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1144, GQLParser.RULE_edgesSynonym);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4611;
	        _la = this._input.LA(1);
	        if(!(_la===285 || _la===308)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	edgeSynonym() {
	    let localctx = new EdgeSynonymContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1146, GQLParser.RULE_edgeSynonym);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4613;
	        _la = this._input.LA(1);
	        if(!(_la===284 || _la===307)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nonReservedWords() {
	    let localctx = new NonReservedWordsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1148, GQLParser.RULE_nonReservedWords);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4615;
	        _la = this._input.LA(1);
	        if(!(((((_la - 277)) & ~0x1f) === 0 && ((1 << (_la - 277)) & 4294967295) !== 0) || ((((_la - 309)) & ~0x1f) === 0 && ((1 << (_la - 309)) & 65535) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


}

GQLParser.EOF = antlr4.Token.EOF;
GQLParser.IMPLIES = 1;
GQLParser.BOOLEAN_LITERAL = 2;
GQLParser.SINGLE_QUOTED_CHARACTER_SEQUENCE = 3;
GQLParser.DOUBLE_QUOTED_CHARACTER_SEQUENCE = 4;
GQLParser.ACCENT_QUOTED_CHARACTER_SEQUENCE = 5;
GQLParser.NO_ESCAPE = 6;
GQLParser.BYTE_STRING_LITERAL = 7;
GQLParser.UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION_WITH_EXACT_NUMBER_SUFFIX = 8;
GQLParser.UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION_WITHOUT_SUFFIX = 9;
GQLParser.UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION_WITH_APPROXIMATE_NUMBER_SUFFIX = 10;
GQLParser.UNSIGNED_DECIMAL_IN_COMMON_NOTATION_WITH_EXACT_NUMBER_SUFFIX = 11;
GQLParser.UNSIGNED_DECIMAL_IN_COMMON_NOTATION_WITHOUT_SUFFIX = 12;
GQLParser.UNSIGNED_DECIMAL_IN_COMMON_NOTATION_WITH_APPROXIMATE_NUMBER_SUFFIX = 13;
GQLParser.UNSIGNED_DECIMAL_INTEGER_WITH_EXACT_NUMBER_SUFFIX = 14;
GQLParser.UNSIGNED_DECIMAL_INTEGER_WITH_APPROXIMATE_NUMBER_SUFFIX = 15;
GQLParser.UNSIGNED_DECIMAL_INTEGER = 16;
GQLParser.UNSIGNED_HEXADECIMAL_INTEGER = 17;
GQLParser.UNSIGNED_OCTAL_INTEGER = 18;
GQLParser.UNSIGNED_BINARY_INTEGER = 19;
GQLParser.ABS = 20;
GQLParser.ACOS = 21;
GQLParser.ALL = 22;
GQLParser.ALL_DIFFERENT = 23;
GQLParser.AND = 24;
GQLParser.ANY = 25;
GQLParser.ARRAY = 26;
GQLParser.AS = 27;
GQLParser.ASC = 28;
GQLParser.ASCENDING = 29;
GQLParser.ASIN = 30;
GQLParser.AT = 31;
GQLParser.ATAN = 32;
GQLParser.AVG = 33;
GQLParser.BIG = 34;
GQLParser.BIGINT = 35;
GQLParser.BINARY = 36;
GQLParser.BOOL = 37;
GQLParser.BOOLEAN = 38;
GQLParser.BOTH = 39;
GQLParser.BTRIM = 40;
GQLParser.BY = 41;
GQLParser.BYTE_LENGTH = 42;
GQLParser.BYTES = 43;
GQLParser.CALL = 44;
GQLParser.CARDINALITY = 45;
GQLParser.CASE = 46;
GQLParser.CAST = 47;
GQLParser.CEIL = 48;
GQLParser.CEILING = 49;
GQLParser.CHAR = 50;
GQLParser.CHAR_LENGTH = 51;
GQLParser.CHARACTER_LENGTH = 52;
GQLParser.CHARACTERISTICS = 53;
GQLParser.CLOSE = 54;
GQLParser.COALESCE = 55;
GQLParser.COLLECT_LIST = 56;
GQLParser.COMMIT = 57;
GQLParser.COPY = 58;
GQLParser.COS = 59;
GQLParser.COSH = 60;
GQLParser.COT = 61;
GQLParser.COUNT = 62;
GQLParser.CREATE = 63;
GQLParser.CURRENT_DATE = 64;
GQLParser.CURRENT_GRAPH = 65;
GQLParser.CURRENT_PROPERTY_GRAPH = 66;
GQLParser.CURRENT_SCHEMA = 67;
GQLParser.CURRENT_TIME = 68;
GQLParser.CURRENT_TIMESTAMP = 69;
GQLParser.DATE = 70;
GQLParser.DATETIME = 71;
GQLParser.DAY = 72;
GQLParser.DEC = 73;
GQLParser.DECIMAL = 74;
GQLParser.DEGREES = 75;
GQLParser.DELETE = 76;
GQLParser.DESC = 77;
GQLParser.DESCENDING = 78;
GQLParser.DETACH = 79;
GQLParser.DISTINCT = 80;
GQLParser.DOUBLE = 81;
GQLParser.DROP = 82;
GQLParser.DURATION = 83;
GQLParser.DURATION_BETWEEN = 84;
GQLParser.ELEMENT_ID = 85;
GQLParser.ELSE = 86;
GQLParser.END = 87;
GQLParser.EXCEPT = 88;
GQLParser.EXISTS = 89;
GQLParser.EXP = 90;
GQLParser.FILTER = 91;
GQLParser.FINISH = 92;
GQLParser.FLOAT = 93;
GQLParser.FLOAT16 = 94;
GQLParser.FLOAT32 = 95;
GQLParser.FLOAT64 = 96;
GQLParser.FLOAT128 = 97;
GQLParser.FLOAT256 = 98;
GQLParser.FLOOR = 99;
GQLParser.FOR = 100;
GQLParser.FROM = 101;
GQLParser.GROUP = 102;
GQLParser.HAVING = 103;
GQLParser.HOME_GRAPH = 104;
GQLParser.HOME_PROPERTY_GRAPH = 105;
GQLParser.HOME_SCHEMA = 106;
GQLParser.HOUR = 107;
GQLParser.IF = 108;
GQLParser.IN = 109;
GQLParser.INSERT = 110;
GQLParser.INT = 111;
GQLParser.INTEGER = 112;
GQLParser.INT8 = 113;
GQLParser.INTEGER8 = 114;
GQLParser.INT16 = 115;
GQLParser.INTEGER16 = 116;
GQLParser.INT32 = 117;
GQLParser.INTEGER32 = 118;
GQLParser.INT64 = 119;
GQLParser.INTEGER64 = 120;
GQLParser.INT128 = 121;
GQLParser.INTEGER128 = 122;
GQLParser.INT256 = 123;
GQLParser.INTEGER256 = 124;
GQLParser.INTERSECT = 125;
GQLParser.INTERVAL = 126;
GQLParser.IS = 127;
GQLParser.LEADING = 128;
GQLParser.LEFT = 129;
GQLParser.LET = 130;
GQLParser.LIKE = 131;
GQLParser.LIMIT = 132;
GQLParser.LIST = 133;
GQLParser.LN = 134;
GQLParser.LOCAL = 135;
GQLParser.LOCAL_DATETIME = 136;
GQLParser.LOCAL_TIME = 137;
GQLParser.LOCAL_TIMESTAMP = 138;
GQLParser.LOG = 139;
GQLParser.LOG10 = 140;
GQLParser.LOWER = 141;
GQLParser.LTRIM = 142;
GQLParser.MATCH = 143;
GQLParser.MAX = 144;
GQLParser.MIN = 145;
GQLParser.MINUTE = 146;
GQLParser.MOD = 147;
GQLParser.MONTH = 148;
GQLParser.NEXT = 149;
GQLParser.NODETACH = 150;
GQLParser.NORMALIZE = 151;
GQLParser.NOT = 152;
GQLParser.NOTHING = 153;
GQLParser.NULL = 154;
GQLParser.NULLS = 155;
GQLParser.NULLIF = 156;
GQLParser.OCTET_LENGTH = 157;
GQLParser.OF = 158;
GQLParser.OFFSET = 159;
GQLParser.OPTIONAL = 160;
GQLParser.OR = 161;
GQLParser.ORDER = 162;
GQLParser.OTHERWISE = 163;
GQLParser.PARAMETER = 164;
GQLParser.PARAMETERS = 165;
GQLParser.PATH = 166;
GQLParser.PATH_LENGTH = 167;
GQLParser.PATHS = 168;
GQLParser.PERCENTILE_CONT = 169;
GQLParser.PERCENTILE_DISC = 170;
GQLParser.POWER = 171;
GQLParser.PRECISION = 172;
GQLParser.PROPERTY_EXISTS = 173;
GQLParser.RADIANS = 174;
GQLParser.REAL = 175;
GQLParser.RECORD = 176;
GQLParser.REMOVE = 177;
GQLParser.REPLACE = 178;
GQLParser.RESET = 179;
GQLParser.RETURN = 180;
GQLParser.RIGHT = 181;
GQLParser.ROLLBACK = 182;
GQLParser.RTRIM = 183;
GQLParser.SAME = 184;
GQLParser.SCHEMA = 185;
GQLParser.SECOND = 186;
GQLParser.SELECT = 187;
GQLParser.SESSION = 188;
GQLParser.SESSION_USER = 189;
GQLParser.SET = 190;
GQLParser.SIGNED = 191;
GQLParser.SIN = 192;
GQLParser.SINH = 193;
GQLParser.SIZE = 194;
GQLParser.SKIP_RESERVED_WORD = 195;
GQLParser.SMALL = 196;
GQLParser.SMALLINT = 197;
GQLParser.SQRT = 198;
GQLParser.START = 199;
GQLParser.STDDEV_POP = 200;
GQLParser.STDDEV_SAMP = 201;
GQLParser.STRING = 202;
GQLParser.SUM = 203;
GQLParser.TAN = 204;
GQLParser.TANH = 205;
GQLParser.THEN = 206;
GQLParser.TIME = 207;
GQLParser.TIMESTAMP = 208;
GQLParser.TRAILING = 209;
GQLParser.TRIM = 210;
GQLParser.TYPED = 211;
GQLParser.UBIGINT = 212;
GQLParser.UINT = 213;
GQLParser.UINT8 = 214;
GQLParser.UINT16 = 215;
GQLParser.UINT32 = 216;
GQLParser.UINT64 = 217;
GQLParser.UINT128 = 218;
GQLParser.UINT256 = 219;
GQLParser.UNION = 220;
GQLParser.UNSIGNED = 221;
GQLParser.UPPER = 222;
GQLParser.USE = 223;
GQLParser.USMALLINT = 224;
GQLParser.VALUE = 225;
GQLParser.VARBINARY = 226;
GQLParser.VARCHAR = 227;
GQLParser.VARIABLE = 228;
GQLParser.WHEN = 229;
GQLParser.WHERE = 230;
GQLParser.WITH = 231;
GQLParser.XOR = 232;
GQLParser.YEAR = 233;
GQLParser.YIELD = 234;
GQLParser.ZONED = 235;
GQLParser.ZONED_DATETIME = 236;
GQLParser.ZONED_TIME = 237;
GQLParser.ABSTRACT = 238;
GQLParser.AGGREGATE = 239;
GQLParser.AGGREGATES = 240;
GQLParser.ALTER = 241;
GQLParser.CATALOG = 242;
GQLParser.CLEAR = 243;
GQLParser.CLONE = 244;
GQLParser.CONSTRAINT = 245;
GQLParser.CURRENT_ROLE = 246;
GQLParser.CURRENT_USER = 247;
GQLParser.DATA = 248;
GQLParser.DIRECTORY = 249;
GQLParser.DRYRUN = 250;
GQLParser.EXACT = 251;
GQLParser.EXISTING = 252;
GQLParser.FUNCTION = 253;
GQLParser.GQLSTATUS = 254;
GQLParser.GRANT = 255;
GQLParser.INSTANT = 256;
GQLParser.INFINITY = 257;
GQLParser.NUMBER = 258;
GQLParser.NUMERIC = 259;
GQLParser.ON = 260;
GQLParser.OPEN = 261;
GQLParser.PARTITION = 262;
GQLParser.PROCEDURE = 263;
GQLParser.PRODUCT = 264;
GQLParser.PROJECT = 265;
GQLParser.QUERY = 266;
GQLParser.RECORDS = 267;
GQLParser.REFERENCE = 268;
GQLParser.RENAME = 269;
GQLParser.REVOKE = 270;
GQLParser.SUBSTRING = 271;
GQLParser.SYSTEM_USER = 272;
GQLParser.TEMPORAL = 273;
GQLParser.UNIQUE = 274;
GQLParser.UNIT = 275;
GQLParser.VALUES = 276;
GQLParser.ACYCLIC = 277;
GQLParser.BINDING = 278;
GQLParser.BINDINGS = 279;
GQLParser.CONNECTING = 280;
GQLParser.DESTINATION = 281;
GQLParser.DIFFERENT = 282;
GQLParser.DIRECTED = 283;
GQLParser.EDGE = 284;
GQLParser.EDGES = 285;
GQLParser.ELEMENT = 286;
GQLParser.ELEMENTS = 287;
GQLParser.FIRST = 288;
GQLParser.GRAPH = 289;
GQLParser.GROUPS = 290;
GQLParser.KEEP = 291;
GQLParser.LABEL = 292;
GQLParser.LABELED = 293;
GQLParser.LABELS = 294;
GQLParser.LAST = 295;
GQLParser.NFC = 296;
GQLParser.NFD = 297;
GQLParser.NFKC = 298;
GQLParser.NFKD = 299;
GQLParser.NO = 300;
GQLParser.NODE = 301;
GQLParser.NORMALIZED = 302;
GQLParser.ONLY = 303;
GQLParser.ORDINALITY = 304;
GQLParser.PROPERTY = 305;
GQLParser.READ = 306;
GQLParser.RELATIONSHIP = 307;
GQLParser.RELATIONSHIPS = 308;
GQLParser.REPEATABLE = 309;
GQLParser.SHORTEST = 310;
GQLParser.SIMPLE = 311;
GQLParser.SOURCE = 312;
GQLParser.TABLE = 313;
GQLParser.TEMP = 314;
GQLParser.TO = 315;
GQLParser.TRAIL = 316;
GQLParser.TRANSACTION = 317;
GQLParser.TYPE = 318;
GQLParser.UNDIRECTED = 319;
GQLParser.VERTEX = 320;
GQLParser.WALK = 321;
GQLParser.WITHOUT = 322;
GQLParser.WRITE = 323;
GQLParser.ZONE = 324;
GQLParser.REGULAR_IDENTIFIER = 325;
GQLParser.SUBSTITUTED_PARAMETER_REFERENCE = 326;
GQLParser.GENERAL_PARAMETER_REFERENCE = 327;
GQLParser.MULTISET_ALTERNATION_OPERATOR = 328;
GQLParser.BRACKET_RIGHT_ARROW = 329;
GQLParser.BRACKET_TILDE_RIGHT_ARROW = 330;
GQLParser.CONCATENATION_OPERATOR = 331;
GQLParser.DOUBLE_COLON = 332;
GQLParser.DOUBLE_DOLLAR_SIGN = 333;
GQLParser.DOUBLE_PERIOD = 334;
GQLParser.GREATER_THAN_OR_EQUALS_OPERATOR = 335;
GQLParser.LEFT_ARROW = 336;
GQLParser.LEFT_ARROW_TILDE = 337;
GQLParser.LEFT_ARROW_BRACKET = 338;
GQLParser.LEFT_ARROW_TILDE_BRACKET = 339;
GQLParser.LEFT_MINUS_RIGHT = 340;
GQLParser.LEFT_MINUS_SLASH = 341;
GQLParser.LEFT_TILDE_SLASH = 342;
GQLParser.LESS_THAN_OR_EQUALS_OPERATOR = 343;
GQLParser.MINUS_LEFT_BRACKET = 344;
GQLParser.MINUS_SLASH = 345;
GQLParser.NOT_EQUALS_OPERATOR = 346;
GQLParser.RIGHT_ARROW = 347;
GQLParser.RIGHT_BRACKET_MINUS = 348;
GQLParser.RIGHT_BRACKET_TILDE = 349;
GQLParser.RIGHT_DOUBLE_ARROW = 350;
GQLParser.SLASH_MINUS = 351;
GQLParser.SLASH_MINUS_RIGHT = 352;
GQLParser.SLASH_TILDE = 353;
GQLParser.SLASH_TILDE_RIGHT = 354;
GQLParser.TILDE_LEFT_BRACKET = 355;
GQLParser.TILDE_RIGHT_ARROW = 356;
GQLParser.TILDE_SLASH = 357;
GQLParser.AMPERSAND = 358;
GQLParser.ASTERISK = 359;
GQLParser.COLON = 360;
GQLParser.COMMA = 361;
GQLParser.COMMERCIAL_AT = 362;
GQLParser.DOLLAR_SIGN = 363;
GQLParser.DOUBLE_QUOTE = 364;
GQLParser.EQUALS_OPERATOR = 365;
GQLParser.EXCLAMATION_MARK = 366;
GQLParser.RIGHT_ANGLE_BRACKET = 367;
GQLParser.GRAVE_ACCENT = 368;
GQLParser.LEFT_BRACE = 369;
GQLParser.LEFT_BRACKET = 370;
GQLParser.LEFT_PAREN = 371;
GQLParser.LEFT_ANGLE_BRACKET = 372;
GQLParser.MINUS_SIGN = 373;
GQLParser.PERCENT = 374;
GQLParser.PERIOD = 375;
GQLParser.PLUS_SIGN = 376;
GQLParser.QUESTION_MARK = 377;
GQLParser.QUOTE = 378;
GQLParser.REVERSE_SOLIDUS = 379;
GQLParser.RIGHT_BRACE = 380;
GQLParser.RIGHT_BRACKET = 381;
GQLParser.RIGHT_PAREN = 382;
GQLParser.SOLIDUS = 383;
GQLParser.TILDE = 384;
GQLParser.UNDERSCORE = 385;
GQLParser.VERTICAL_BAR = 386;
GQLParser.SP = 387;
GQLParser.WHITESPACE = 388;
GQLParser.BRACKETED_COMMENT = 389;
GQLParser.SIMPLE_COMMENT_SOLIDUS = 390;
GQLParser.SIMPLE_COMMENT_MINUS = 391;

GQLParser.RULE_gqlProgram = 0;
GQLParser.RULE_programActivity = 1;
GQLParser.RULE_sessionActivity = 2;
GQLParser.RULE_transactionActivity = 3;
GQLParser.RULE_endTransactionCommand = 4;
GQLParser.RULE_sessionSetCommand = 5;
GQLParser.RULE_sessionSetSchemaClause = 6;
GQLParser.RULE_sessionSetGraphClause = 7;
GQLParser.RULE_sessionSetTimeZoneClause = 8;
GQLParser.RULE_setTimeZoneValue = 9;
GQLParser.RULE_sessionSetParameterClause = 10;
GQLParser.RULE_sessionSetGraphParameterClause = 11;
GQLParser.RULE_sessionSetBindingTableParameterClause = 12;
GQLParser.RULE_sessionSetValueParameterClause = 13;
GQLParser.RULE_sessionSetParameterName = 14;
GQLParser.RULE_sessionResetCommand = 15;
GQLParser.RULE_sessionResetArguments = 16;
GQLParser.RULE_sessionCloseCommand = 17;
GQLParser.RULE_sessionParameterSpecification = 18;
GQLParser.RULE_startTransactionCommand = 19;
GQLParser.RULE_transactionCharacteristics = 20;
GQLParser.RULE_transactionMode = 21;
GQLParser.RULE_transactionAccessMode = 22;
GQLParser.RULE_rollbackCommand = 23;
GQLParser.RULE_commitCommand = 24;
GQLParser.RULE_nestedProcedureSpecification = 25;
GQLParser.RULE_procedureSpecification = 26;
GQLParser.RULE_nestedDataModifyingProcedureSpecification = 27;
GQLParser.RULE_nestedQuerySpecification = 28;
GQLParser.RULE_procedureBody = 29;
GQLParser.RULE_bindingVariableDefinitionBlock = 30;
GQLParser.RULE_bindingVariableDefinition = 31;
GQLParser.RULE_statementBlock = 32;
GQLParser.RULE_statement = 33;
GQLParser.RULE_nextStatement = 34;
GQLParser.RULE_graphVariableDefinition = 35;
GQLParser.RULE_optTypedGraphInitializer = 36;
GQLParser.RULE_graphInitializer = 37;
GQLParser.RULE_bindingTableVariableDefinition = 38;
GQLParser.RULE_optTypedBindingTableInitializer = 39;
GQLParser.RULE_bindingTableInitializer = 40;
GQLParser.RULE_valueVariableDefinition = 41;
GQLParser.RULE_optTypedValueInitializer = 42;
GQLParser.RULE_valueInitializer = 43;
GQLParser.RULE_graphExpression = 44;
GQLParser.RULE_currentGraph = 45;
GQLParser.RULE_bindingTableExpression = 46;
GQLParser.RULE_nestedBindingTableQuerySpecification = 47;
GQLParser.RULE_objectExpressionPrimary = 48;
GQLParser.RULE_linearCatalogModifyingStatement = 49;
GQLParser.RULE_simpleCatalogModifyingStatement = 50;
GQLParser.RULE_primitiveCatalogModifyingStatement = 51;
GQLParser.RULE_createSchemaStatement = 52;
GQLParser.RULE_dropSchemaStatement = 53;
GQLParser.RULE_createGraphStatement = 54;
GQLParser.RULE_openGraphType = 55;
GQLParser.RULE_ofGraphType = 56;
GQLParser.RULE_graphTypeLikeGraph = 57;
GQLParser.RULE_graphSource = 58;
GQLParser.RULE_dropGraphStatement = 59;
GQLParser.RULE_createGraphTypeStatement = 60;
GQLParser.RULE_graphTypeSource = 61;
GQLParser.RULE_copyOfGraphType = 62;
GQLParser.RULE_dropGraphTypeStatement = 63;
GQLParser.RULE_callCatalogModifyingProcedureStatement = 64;
GQLParser.RULE_linearDataModifyingStatement = 65;
GQLParser.RULE_focusedLinearDataModifyingStatement = 66;
GQLParser.RULE_focusedLinearDataModifyingStatementBody = 67;
GQLParser.RULE_focusedNestedDataModifyingProcedureSpecification = 68;
GQLParser.RULE_ambientLinearDataModifyingStatement = 69;
GQLParser.RULE_ambientLinearDataModifyingStatementBody = 70;
GQLParser.RULE_simpleLinearDataAccessingStatement = 71;
GQLParser.RULE_simpleDataAccessingStatement = 72;
GQLParser.RULE_simpleDataModifyingStatement = 73;
GQLParser.RULE_primitiveDataModifyingStatement = 74;
GQLParser.RULE_insertStatement = 75;
GQLParser.RULE_setStatement = 76;
GQLParser.RULE_setItemList = 77;
GQLParser.RULE_setItem = 78;
GQLParser.RULE_setPropertyItem = 79;
GQLParser.RULE_setAllPropertiesItem = 80;
GQLParser.RULE_setLabelItem = 81;
GQLParser.RULE_removeStatement = 82;
GQLParser.RULE_removeItemList = 83;
GQLParser.RULE_removeItem = 84;
GQLParser.RULE_removePropertyItem = 85;
GQLParser.RULE_removeLabelItem = 86;
GQLParser.RULE_deleteStatement = 87;
GQLParser.RULE_deleteItemList = 88;
GQLParser.RULE_deleteItem = 89;
GQLParser.RULE_callDataModifyingProcedureStatement = 90;
GQLParser.RULE_compositeQueryStatement = 91;
GQLParser.RULE_compositeQueryExpression = 92;
GQLParser.RULE_queryConjunction = 93;
GQLParser.RULE_setOperator = 94;
GQLParser.RULE_compositeQueryPrimary = 95;
GQLParser.RULE_linearQueryStatement = 96;
GQLParser.RULE_focusedLinearQueryStatement = 97;
GQLParser.RULE_focusedLinearQueryStatementPart = 98;
GQLParser.RULE_focusedLinearQueryAndPrimitiveResultStatementPart = 99;
GQLParser.RULE_focusedPrimitiveResultStatement = 100;
GQLParser.RULE_focusedNestedQuerySpecification = 101;
GQLParser.RULE_ambientLinearQueryStatement = 102;
GQLParser.RULE_simpleLinearQueryStatement = 103;
GQLParser.RULE_simpleQueryStatement = 104;
GQLParser.RULE_primitiveQueryStatement = 105;
GQLParser.RULE_matchStatement = 106;
GQLParser.RULE_simpleMatchStatement = 107;
GQLParser.RULE_optionalMatchStatement = 108;
GQLParser.RULE_optionalOperand = 109;
GQLParser.RULE_matchStatementBlock = 110;
GQLParser.RULE_callQueryStatement = 111;
GQLParser.RULE_filterStatement = 112;
GQLParser.RULE_letStatement = 113;
GQLParser.RULE_letVariableDefinitionList = 114;
GQLParser.RULE_letVariableDefinition = 115;
GQLParser.RULE_forStatement = 116;
GQLParser.RULE_forItem = 117;
GQLParser.RULE_forItemAlias = 118;
GQLParser.RULE_forItemSource = 119;
GQLParser.RULE_forOrdinalityOrOffset = 120;
GQLParser.RULE_orderByAndPageStatement = 121;
GQLParser.RULE_primitiveResultStatement = 122;
GQLParser.RULE_returnStatement = 123;
GQLParser.RULE_returnStatementBody = 124;
GQLParser.RULE_returnItemList = 125;
GQLParser.RULE_returnItem = 126;
GQLParser.RULE_returnItemAlias = 127;
GQLParser.RULE_selectStatement = 128;
GQLParser.RULE_selectItemList = 129;
GQLParser.RULE_selectItem = 130;
GQLParser.RULE_selectItemAlias = 131;
GQLParser.RULE_havingClause = 132;
GQLParser.RULE_selectStatementBody = 133;
GQLParser.RULE_selectGraphMatchList = 134;
GQLParser.RULE_selectGraphMatch = 135;
GQLParser.RULE_selectQuerySpecification = 136;
GQLParser.RULE_callProcedureStatement = 137;
GQLParser.RULE_procedureCall = 138;
GQLParser.RULE_inlineProcedureCall = 139;
GQLParser.RULE_variableScopeClause = 140;
GQLParser.RULE_bindingVariableReferenceList = 141;
GQLParser.RULE_namedProcedureCall = 142;
GQLParser.RULE_procedureArgumentList = 143;
GQLParser.RULE_procedureArgument = 144;
GQLParser.RULE_atSchemaClause = 145;
GQLParser.RULE_useGraphClause = 146;
GQLParser.RULE_graphPatternBindingTable = 147;
GQLParser.RULE_graphPatternYieldClause = 148;
GQLParser.RULE_graphPatternYieldItemList = 149;
GQLParser.RULE_graphPatternYieldItem = 150;
GQLParser.RULE_graphPattern = 151;
GQLParser.RULE_matchMode = 152;
GQLParser.RULE_repeatableElementsMatchMode = 153;
GQLParser.RULE_differentEdgesMatchMode = 154;
GQLParser.RULE_elementBindingsOrElements = 155;
GQLParser.RULE_edgeBindingsOrEdges = 156;
GQLParser.RULE_pathPatternList = 157;
GQLParser.RULE_pathPattern = 158;
GQLParser.RULE_pathVariableDeclaration = 159;
GQLParser.RULE_keepClause = 160;
GQLParser.RULE_graphPatternWhereClause = 161;
GQLParser.RULE_insertGraphPattern = 162;
GQLParser.RULE_insertPathPatternList = 163;
GQLParser.RULE_insertPathPattern = 164;
GQLParser.RULE_insertNodePattern = 165;
GQLParser.RULE_insertEdgePattern = 166;
GQLParser.RULE_insertEdgePointingLeft = 167;
GQLParser.RULE_insertEdgePointingRight = 168;
GQLParser.RULE_insertEdgeUndirected = 169;
GQLParser.RULE_insertElementPatternFiller = 170;
GQLParser.RULE_labelAndPropertySetSpecification = 171;
GQLParser.RULE_pathPatternPrefix = 172;
GQLParser.RULE_pathModePrefix = 173;
GQLParser.RULE_pathMode = 174;
GQLParser.RULE_pathSearchPrefix = 175;
GQLParser.RULE_allPathSearch = 176;
GQLParser.RULE_pathOrPaths = 177;
GQLParser.RULE_anyPathSearch = 178;
GQLParser.RULE_numberOfPaths = 179;
GQLParser.RULE_shortestPathSearch = 180;
GQLParser.RULE_allShortestPathSearch = 181;
GQLParser.RULE_anyShortestPathSearch = 182;
GQLParser.RULE_countedShortestPathSearch = 183;
GQLParser.RULE_countedShortestGroupSearch = 184;
GQLParser.RULE_numberOfGroups = 185;
GQLParser.RULE_pathPatternExpression = 186;
GQLParser.RULE_pathTerm = 187;
GQLParser.RULE_pathFactor = 188;
GQLParser.RULE_pathPrimary = 189;
GQLParser.RULE_elementPattern = 190;
GQLParser.RULE_nodePattern = 191;
GQLParser.RULE_elementPatternFiller = 192;
GQLParser.RULE_elementVariableDeclaration = 193;
GQLParser.RULE_isLabelExpression = 194;
GQLParser.RULE_isOrColon = 195;
GQLParser.RULE_elementPatternPredicate = 196;
GQLParser.RULE_elementPatternWhereClause = 197;
GQLParser.RULE_elementPropertySpecification = 198;
GQLParser.RULE_propertyKeyValuePairList = 199;
GQLParser.RULE_propertyKeyValuePair = 200;
GQLParser.RULE_edgePattern = 201;
GQLParser.RULE_fullEdgePattern = 202;
GQLParser.RULE_fullEdgePointingLeft = 203;
GQLParser.RULE_fullEdgeUndirected = 204;
GQLParser.RULE_fullEdgePointingRight = 205;
GQLParser.RULE_fullEdgeLeftOrUndirected = 206;
GQLParser.RULE_fullEdgeUndirectedOrRight = 207;
GQLParser.RULE_fullEdgeLeftOrRight = 208;
GQLParser.RULE_fullEdgeAnyDirection = 209;
GQLParser.RULE_abbreviatedEdgePattern = 210;
GQLParser.RULE_parenthesizedPathPatternExpression = 211;
GQLParser.RULE_subpathVariableDeclaration = 212;
GQLParser.RULE_parenthesizedPathPatternWhereClause = 213;
GQLParser.RULE_labelExpression = 214;
GQLParser.RULE_pathVariableReference = 215;
GQLParser.RULE_elementVariableReference = 216;
GQLParser.RULE_graphPatternQuantifier = 217;
GQLParser.RULE_fixedQuantifier = 218;
GQLParser.RULE_generalQuantifier = 219;
GQLParser.RULE_lowerBound = 220;
GQLParser.RULE_upperBound = 221;
GQLParser.RULE_simplifiedPathPatternExpression = 222;
GQLParser.RULE_simplifiedDefaultingLeft = 223;
GQLParser.RULE_simplifiedDefaultingUndirected = 224;
GQLParser.RULE_simplifiedDefaultingRight = 225;
GQLParser.RULE_simplifiedDefaultingLeftOrUndirected = 226;
GQLParser.RULE_simplifiedDefaultingUndirectedOrRight = 227;
GQLParser.RULE_simplifiedDefaultingLeftOrRight = 228;
GQLParser.RULE_simplifiedDefaultingAnyDirection = 229;
GQLParser.RULE_simplifiedContents = 230;
GQLParser.RULE_simplifiedPathUnion = 231;
GQLParser.RULE_simplifiedMultisetAlternation = 232;
GQLParser.RULE_simplifiedTerm = 233;
GQLParser.RULE_simplifiedFactorLow = 234;
GQLParser.RULE_simplifiedFactorHigh = 235;
GQLParser.RULE_simplifiedQuantified = 236;
GQLParser.RULE_simplifiedQuestioned = 237;
GQLParser.RULE_simplifiedTertiary = 238;
GQLParser.RULE_simplifiedDirectionOverride = 239;
GQLParser.RULE_simplifiedOverrideLeft = 240;
GQLParser.RULE_simplifiedOverrideUndirected = 241;
GQLParser.RULE_simplifiedOverrideRight = 242;
GQLParser.RULE_simplifiedOverrideLeftOrUndirected = 243;
GQLParser.RULE_simplifiedOverrideUndirectedOrRight = 244;
GQLParser.RULE_simplifiedOverrideLeftOrRight = 245;
GQLParser.RULE_simplifiedOverrideAnyDirection = 246;
GQLParser.RULE_simplifiedSecondary = 247;
GQLParser.RULE_simplifiedNegation = 248;
GQLParser.RULE_simplifiedPrimary = 249;
GQLParser.RULE_whereClause = 250;
GQLParser.RULE_yieldClause = 251;
GQLParser.RULE_yieldItemList = 252;
GQLParser.RULE_yieldItem = 253;
GQLParser.RULE_yieldItemName = 254;
GQLParser.RULE_yieldItemAlias = 255;
GQLParser.RULE_groupByClause = 256;
GQLParser.RULE_groupingElementList = 257;
GQLParser.RULE_groupingElement = 258;
GQLParser.RULE_emptyGroupingSet = 259;
GQLParser.RULE_orderByClause = 260;
GQLParser.RULE_sortSpecificationList = 261;
GQLParser.RULE_sortSpecification = 262;
GQLParser.RULE_sortKey = 263;
GQLParser.RULE_orderingSpecification = 264;
GQLParser.RULE_nullOrdering = 265;
GQLParser.RULE_limitClause = 266;
GQLParser.RULE_offsetClause = 267;
GQLParser.RULE_offsetSynonym = 268;
GQLParser.RULE_schemaReference = 269;
GQLParser.RULE_absoluteCatalogSchemaReference = 270;
GQLParser.RULE_catalogSchemaParentAndName = 271;
GQLParser.RULE_relativeCatalogSchemaReference = 272;
GQLParser.RULE_predefinedSchemaReference = 273;
GQLParser.RULE_absoluteDirectoryPath = 274;
GQLParser.RULE_relativeDirectoryPath = 275;
GQLParser.RULE_simpleDirectoryPath = 276;
GQLParser.RULE_graphReference = 277;
GQLParser.RULE_catalogGraphParentAndName = 278;
GQLParser.RULE_homeGraph = 279;
GQLParser.RULE_graphTypeReference = 280;
GQLParser.RULE_catalogGraphTypeParentAndName = 281;
GQLParser.RULE_bindingTableReference = 282;
GQLParser.RULE_procedureReference = 283;
GQLParser.RULE_catalogProcedureParentAndName = 284;
GQLParser.RULE_catalogObjectParentReference = 285;
GQLParser.RULE_referenceParameterSpecification = 286;
GQLParser.RULE_nestedGraphTypeSpecification = 287;
GQLParser.RULE_graphTypeSpecificationBody = 288;
GQLParser.RULE_elementTypeList = 289;
GQLParser.RULE_elementTypeSpecification = 290;
GQLParser.RULE_nodeTypeSpecification = 291;
GQLParser.RULE_nodeTypePattern = 292;
GQLParser.RULE_nodeTypePhrase = 293;
GQLParser.RULE_nodeTypePhraseFiller = 294;
GQLParser.RULE_nodeTypeFiller = 295;
GQLParser.RULE_localNodeTypeAlias = 296;
GQLParser.RULE_nodeTypeImpliedContent = 297;
GQLParser.RULE_nodeTypeKeyLabelSet = 298;
GQLParser.RULE_nodeTypeLabelSet = 299;
GQLParser.RULE_nodeTypePropertyTypes = 300;
GQLParser.RULE_edgeTypeSpecification = 301;
GQLParser.RULE_edgeTypePattern = 302;
GQLParser.RULE_edgeTypePhrase = 303;
GQLParser.RULE_edgeTypePhraseFiller = 304;
GQLParser.RULE_edgeTypeFiller = 305;
GQLParser.RULE_edgeTypeImpliedContent = 306;
GQLParser.RULE_edgeTypeKeyLabelSet = 307;
GQLParser.RULE_edgeTypeLabelSet = 308;
GQLParser.RULE_edgeTypePropertyTypes = 309;
GQLParser.RULE_edgeTypePatternDirected = 310;
GQLParser.RULE_edgeTypePatternPointingRight = 311;
GQLParser.RULE_edgeTypePatternPointingLeft = 312;
GQLParser.RULE_edgeTypePatternUndirected = 313;
GQLParser.RULE_arcTypePointingRight = 314;
GQLParser.RULE_arcTypePointingLeft = 315;
GQLParser.RULE_arcTypeUndirected = 316;
GQLParser.RULE_sourceNodeTypeReference = 317;
GQLParser.RULE_destinationNodeTypeReference = 318;
GQLParser.RULE_edgeKind = 319;
GQLParser.RULE_endpointPairPhrase = 320;
GQLParser.RULE_endpointPair = 321;
GQLParser.RULE_endpointPairDirected = 322;
GQLParser.RULE_endpointPairPointingRight = 323;
GQLParser.RULE_endpointPairPointingLeft = 324;
GQLParser.RULE_endpointPairUndirected = 325;
GQLParser.RULE_connectorPointingRight = 326;
GQLParser.RULE_connectorUndirected = 327;
GQLParser.RULE_sourceNodeTypeAlias = 328;
GQLParser.RULE_destinationNodeTypeAlias = 329;
GQLParser.RULE_labelSetPhrase = 330;
GQLParser.RULE_labelSetSpecification = 331;
GQLParser.RULE_propertyTypesSpecification = 332;
GQLParser.RULE_propertyTypeList = 333;
GQLParser.RULE_propertyType = 334;
GQLParser.RULE_propertyValueType = 335;
GQLParser.RULE_bindingTableType = 336;
GQLParser.RULE_valueType = 337;
GQLParser.RULE_typed = 338;
GQLParser.RULE_predefinedType = 339;
GQLParser.RULE_booleanType = 340;
GQLParser.RULE_characterStringType = 341;
GQLParser.RULE_byteStringType = 342;
GQLParser.RULE_minLength = 343;
GQLParser.RULE_maxLength = 344;
GQLParser.RULE_fixedLength = 345;
GQLParser.RULE_numericType = 346;
GQLParser.RULE_exactNumericType = 347;
GQLParser.RULE_binaryExactNumericType = 348;
GQLParser.RULE_signedBinaryExactNumericType = 349;
GQLParser.RULE_unsignedBinaryExactNumericType = 350;
GQLParser.RULE_verboseBinaryExactNumericType = 351;
GQLParser.RULE_decimalExactNumericType = 352;
GQLParser.RULE_precision = 353;
GQLParser.RULE_scale = 354;
GQLParser.RULE_approximateNumericType = 355;
GQLParser.RULE_temporalType = 356;
GQLParser.RULE_temporalInstantType = 357;
GQLParser.RULE_datetimeType = 358;
GQLParser.RULE_localdatetimeType = 359;
GQLParser.RULE_dateType = 360;
GQLParser.RULE_timeType = 361;
GQLParser.RULE_localtimeType = 362;
GQLParser.RULE_temporalDurationType = 363;
GQLParser.RULE_temporalDurationQualifier = 364;
GQLParser.RULE_referenceValueType = 365;
GQLParser.RULE_immaterialValueType = 366;
GQLParser.RULE_nullType = 367;
GQLParser.RULE_emptyType = 368;
GQLParser.RULE_graphReferenceValueType = 369;
GQLParser.RULE_closedGraphReferenceValueType = 370;
GQLParser.RULE_openGraphReferenceValueType = 371;
GQLParser.RULE_bindingTableReferenceValueType = 372;
GQLParser.RULE_nodeReferenceValueType = 373;
GQLParser.RULE_closedNodeReferenceValueType = 374;
GQLParser.RULE_openNodeReferenceValueType = 375;
GQLParser.RULE_edgeReferenceValueType = 376;
GQLParser.RULE_closedEdgeReferenceValueType = 377;
GQLParser.RULE_openEdgeReferenceValueType = 378;
GQLParser.RULE_pathValueType = 379;
GQLParser.RULE_listValueTypeName = 380;
GQLParser.RULE_listValueTypeNameSynonym = 381;
GQLParser.RULE_recordType = 382;
GQLParser.RULE_fieldTypesSpecification = 383;
GQLParser.RULE_fieldTypeList = 384;
GQLParser.RULE_notNull = 385;
GQLParser.RULE_fieldType = 386;
GQLParser.RULE_searchCondition = 387;
GQLParser.RULE_predicate = 388;
GQLParser.RULE_comparisonPredicatePart2 = 389;
GQLParser.RULE_compOp = 390;
GQLParser.RULE_existsPredicate = 391;
GQLParser.RULE_nullPredicate = 392;
GQLParser.RULE_nullPredicatePart2 = 393;
GQLParser.RULE_valueTypePredicate = 394;
GQLParser.RULE_valueTypePredicatePart2 = 395;
GQLParser.RULE_normalizedPredicatePart2 = 396;
GQLParser.RULE_directedPredicate = 397;
GQLParser.RULE_directedPredicatePart2 = 398;
GQLParser.RULE_labeledPredicate = 399;
GQLParser.RULE_labeledPredicatePart2 = 400;
GQLParser.RULE_isLabeledOrColon = 401;
GQLParser.RULE_sourceDestinationPredicate = 402;
GQLParser.RULE_nodeReference = 403;
GQLParser.RULE_sourcePredicatePart2 = 404;
GQLParser.RULE_destinationPredicatePart2 = 405;
GQLParser.RULE_edgeReference = 406;
GQLParser.RULE_all_differentPredicate = 407;
GQLParser.RULE_samePredicate = 408;
GQLParser.RULE_property_existsPredicate = 409;
GQLParser.RULE_valueExpression = 410;
GQLParser.RULE_valueFunction = 411;
GQLParser.RULE_booleanValueExpression = 412;
GQLParser.RULE_characterOrByteStringFunction = 413;
GQLParser.RULE_subCharacterOrByteString = 414;
GQLParser.RULE_trimSingleCharacterOrByteString = 415;
GQLParser.RULE_foldCharacterString = 416;
GQLParser.RULE_trimMultiCharacterCharacterString = 417;
GQLParser.RULE_normalizeCharacterString = 418;
GQLParser.RULE_nodeReferenceValueExpression = 419;
GQLParser.RULE_edgeReferenceValueExpression = 420;
GQLParser.RULE_aggregatingValueExpression = 421;
GQLParser.RULE_valueExpressionPrimary = 422;
GQLParser.RULE_parenthesizedValueExpression = 423;
GQLParser.RULE_nonParenthesizedValueExpressionPrimary = 424;
GQLParser.RULE_nonParenthesizedValueExpressionPrimarySpecialCase = 425;
GQLParser.RULE_unsignedValueSpecification = 426;
GQLParser.RULE_nonNegativeIntegerSpecification = 427;
GQLParser.RULE_generalValueSpecification = 428;
GQLParser.RULE_dynamicParameterSpecification = 429;
GQLParser.RULE_letValueExpression = 430;
GQLParser.RULE_valueQueryExpression = 431;
GQLParser.RULE_caseExpression = 432;
GQLParser.RULE_caseAbbreviation = 433;
GQLParser.RULE_caseSpecification = 434;
GQLParser.RULE_simpleCase = 435;
GQLParser.RULE_searchedCase = 436;
GQLParser.RULE_simpleWhenClause = 437;
GQLParser.RULE_searchedWhenClause = 438;
GQLParser.RULE_elseClause = 439;
GQLParser.RULE_caseOperand = 440;
GQLParser.RULE_whenOperandList = 441;
GQLParser.RULE_whenOperand = 442;
GQLParser.RULE_result = 443;
GQLParser.RULE_resultExpression = 444;
GQLParser.RULE_castSpecification = 445;
GQLParser.RULE_castOperand = 446;
GQLParser.RULE_castTarget = 447;
GQLParser.RULE_aggregateFunction = 448;
GQLParser.RULE_generalSetFunction = 449;
GQLParser.RULE_binarySetFunction = 450;
GQLParser.RULE_generalSetFunctionType = 451;
GQLParser.RULE_setQuantifier = 452;
GQLParser.RULE_binarySetFunctionType = 453;
GQLParser.RULE_dependentValueExpression = 454;
GQLParser.RULE_independentValueExpression = 455;
GQLParser.RULE_element_idFunction = 456;
GQLParser.RULE_bindingVariableReference = 457;
GQLParser.RULE_pathValueExpression = 458;
GQLParser.RULE_pathValueConstructor = 459;
GQLParser.RULE_pathValueConstructorByEnumeration = 460;
GQLParser.RULE_pathElementList = 461;
GQLParser.RULE_pathElementListStart = 462;
GQLParser.RULE_pathElementListStep = 463;
GQLParser.RULE_listValueExpression = 464;
GQLParser.RULE_listValueFunction = 465;
GQLParser.RULE_trimListFunction = 466;
GQLParser.RULE_elementsFunction = 467;
GQLParser.RULE_listValueConstructor = 468;
GQLParser.RULE_listValueConstructorByEnumeration = 469;
GQLParser.RULE_listElementList = 470;
GQLParser.RULE_listElement = 471;
GQLParser.RULE_recordConstructor = 472;
GQLParser.RULE_fieldsSpecification = 473;
GQLParser.RULE_fieldList = 474;
GQLParser.RULE_field = 475;
GQLParser.RULE_truthValue = 476;
GQLParser.RULE_numericValueExpression = 477;
GQLParser.RULE_numericValueFunction = 478;
GQLParser.RULE_lengthExpression = 479;
GQLParser.RULE_cardinalityExpression = 480;
GQLParser.RULE_cardinalityExpressionArgument = 481;
GQLParser.RULE_charLengthExpression = 482;
GQLParser.RULE_byteLengthExpression = 483;
GQLParser.RULE_pathLengthExpression = 484;
GQLParser.RULE_absoluteValueExpression = 485;
GQLParser.RULE_modulusExpression = 486;
GQLParser.RULE_numericValueExpressionDividend = 487;
GQLParser.RULE_numericValueExpressionDivisor = 488;
GQLParser.RULE_trigonometricFunction = 489;
GQLParser.RULE_trigonometricFunctionName = 490;
GQLParser.RULE_generalLogarithmFunction = 491;
GQLParser.RULE_generalLogarithmBase = 492;
GQLParser.RULE_generalLogarithmArgument = 493;
GQLParser.RULE_commonLogarithm = 494;
GQLParser.RULE_naturalLogarithm = 495;
GQLParser.RULE_exponentialFunction = 496;
GQLParser.RULE_powerFunction = 497;
GQLParser.RULE_numericValueExpressionBase = 498;
GQLParser.RULE_numericValueExpressionExponent = 499;
GQLParser.RULE_squareRoot = 500;
GQLParser.RULE_floorFunction = 501;
GQLParser.RULE_ceilingFunction = 502;
GQLParser.RULE_characterStringValueExpression = 503;
GQLParser.RULE_byteStringValueExpression = 504;
GQLParser.RULE_trimOperands = 505;
GQLParser.RULE_trimCharacterOrByteStringSource = 506;
GQLParser.RULE_trimSpecification = 507;
GQLParser.RULE_trimCharacterOrByteString = 508;
GQLParser.RULE_normalForm = 509;
GQLParser.RULE_stringLength = 510;
GQLParser.RULE_datetimeValueExpression = 511;
GQLParser.RULE_datetimeValueFunction = 512;
GQLParser.RULE_dateFunction = 513;
GQLParser.RULE_timeFunction = 514;
GQLParser.RULE_localtimeFunction = 515;
GQLParser.RULE_datetimeFunction = 516;
GQLParser.RULE_localdatetimeFunction = 517;
GQLParser.RULE_dateFunctionParameters = 518;
GQLParser.RULE_timeFunctionParameters = 519;
GQLParser.RULE_datetimeFunctionParameters = 520;
GQLParser.RULE_durationValueExpression = 521;
GQLParser.RULE_datetimeSubtraction = 522;
GQLParser.RULE_datetimeSubtractionParameters = 523;
GQLParser.RULE_datetimeValueExpression1 = 524;
GQLParser.RULE_datetimeValueExpression2 = 525;
GQLParser.RULE_durationValueFunction = 526;
GQLParser.RULE_durationFunction = 527;
GQLParser.RULE_durationFunctionParameters = 528;
GQLParser.RULE_objectName = 529;
GQLParser.RULE_objectNameOrBindingVariable = 530;
GQLParser.RULE_directoryName = 531;
GQLParser.RULE_schemaName = 532;
GQLParser.RULE_graphName = 533;
GQLParser.RULE_delimitedGraphName = 534;
GQLParser.RULE_graphTypeName = 535;
GQLParser.RULE_nodeTypeName = 536;
GQLParser.RULE_edgeTypeName = 537;
GQLParser.RULE_bindingTableName = 538;
GQLParser.RULE_delimitedBindingTableName = 539;
GQLParser.RULE_procedureName = 540;
GQLParser.RULE_labelName = 541;
GQLParser.RULE_propertyName = 542;
GQLParser.RULE_fieldName = 543;
GQLParser.RULE_elementVariable = 544;
GQLParser.RULE_pathVariable = 545;
GQLParser.RULE_subpathVariable = 546;
GQLParser.RULE_bindingVariable = 547;
GQLParser.RULE_unsignedLiteral = 548;
GQLParser.RULE_generalLiteral = 549;
GQLParser.RULE_temporalLiteral = 550;
GQLParser.RULE_dateLiteral = 551;
GQLParser.RULE_timeLiteral = 552;
GQLParser.RULE_datetimeLiteral = 553;
GQLParser.RULE_listLiteral = 554;
GQLParser.RULE_recordLiteral = 555;
GQLParser.RULE_identifier = 556;
GQLParser.RULE_regularIdentifier = 557;
GQLParser.RULE_timeZoneString = 558;
GQLParser.RULE_characterStringLiteral = 559;
GQLParser.RULE_unsignedNumericLiteral = 560;
GQLParser.RULE_exactNumericLiteral = 561;
GQLParser.RULE_approximateNumericLiteral = 562;
GQLParser.RULE_unsignedInteger = 563;
GQLParser.RULE_unsignedDecimalInteger = 564;
GQLParser.RULE_nullLiteral = 565;
GQLParser.RULE_dateString = 566;
GQLParser.RULE_timeString = 567;
GQLParser.RULE_datetimeString = 568;
GQLParser.RULE_durationLiteral = 569;
GQLParser.RULE_durationString = 570;
GQLParser.RULE_nodeSynonym = 571;
GQLParser.RULE_edgesSynonym = 572;
GQLParser.RULE_edgeSynonym = 573;
GQLParser.RULE_nonReservedWords = 574;

class GqlProgramContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_gqlProgram;
    }

	programActivity() {
	    return this.getTypedRuleContext(ProgramActivityContext,0);
	};

	EOF() {
	    return this.getToken(GQLParser.EOF, 0);
	};

	sessionCloseCommand() {
	    return this.getTypedRuleContext(SessionCloseCommandContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterGqlProgram(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitGqlProgram(this);
		}
	}


}



class ProgramActivityContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_programActivity;
    }

	sessionActivity() {
	    return this.getTypedRuleContext(SessionActivityContext,0);
	};

	transactionActivity() {
	    return this.getTypedRuleContext(TransactionActivityContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterProgramActivity(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitProgramActivity(this);
		}
	}


}



class SessionActivityContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_sessionActivity;
    }

	sessionResetCommand = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SessionResetCommandContext);
	    } else {
	        return this.getTypedRuleContext(SessionResetCommandContext,i);
	    }
	};

	sessionSetCommand = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SessionSetCommandContext);
	    } else {
	        return this.getTypedRuleContext(SessionSetCommandContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterSessionActivity(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitSessionActivity(this);
		}
	}


}



class TransactionActivityContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_transactionActivity;
    }

	startTransactionCommand() {
	    return this.getTypedRuleContext(StartTransactionCommandContext,0);
	};

	procedureSpecification() {
	    return this.getTypedRuleContext(ProcedureSpecificationContext,0);
	};

	endTransactionCommand() {
	    return this.getTypedRuleContext(EndTransactionCommandContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterTransactionActivity(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitTransactionActivity(this);
		}
	}


}



class EndTransactionCommandContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_endTransactionCommand;
    }

	rollbackCommand() {
	    return this.getTypedRuleContext(RollbackCommandContext,0);
	};

	commitCommand() {
	    return this.getTypedRuleContext(CommitCommandContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterEndTransactionCommand(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitEndTransactionCommand(this);
		}
	}


}



class SessionSetCommandContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_sessionSetCommand;
    }

	SESSION() {
	    return this.getToken(GQLParser.SESSION, 0);
	};

	SET() {
	    return this.getToken(GQLParser.SET, 0);
	};

	sessionSetSchemaClause() {
	    return this.getTypedRuleContext(SessionSetSchemaClauseContext,0);
	};

	sessionSetGraphClause() {
	    return this.getTypedRuleContext(SessionSetGraphClauseContext,0);
	};

	sessionSetTimeZoneClause() {
	    return this.getTypedRuleContext(SessionSetTimeZoneClauseContext,0);
	};

	sessionSetParameterClause() {
	    return this.getTypedRuleContext(SessionSetParameterClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterSessionSetCommand(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitSessionSetCommand(this);
		}
	}


}



class SessionSetSchemaClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_sessionSetSchemaClause;
    }

	SCHEMA() {
	    return this.getToken(GQLParser.SCHEMA, 0);
	};

	schemaReference() {
	    return this.getTypedRuleContext(SchemaReferenceContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterSessionSetSchemaClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitSessionSetSchemaClause(this);
		}
	}


}



class SessionSetGraphClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_sessionSetGraphClause;
    }

	GRAPH() {
	    return this.getToken(GQLParser.GRAPH, 0);
	};

	graphExpression() {
	    return this.getTypedRuleContext(GraphExpressionContext,0);
	};

	PROPERTY() {
	    return this.getToken(GQLParser.PROPERTY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterSessionSetGraphClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitSessionSetGraphClause(this);
		}
	}


}



class SessionSetTimeZoneClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_sessionSetTimeZoneClause;
    }

	TIME() {
	    return this.getToken(GQLParser.TIME, 0);
	};

	ZONE() {
	    return this.getToken(GQLParser.ZONE, 0);
	};

	setTimeZoneValue() {
	    return this.getTypedRuleContext(SetTimeZoneValueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterSessionSetTimeZoneClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitSessionSetTimeZoneClause(this);
		}
	}


}



class SetTimeZoneValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_setTimeZoneValue;
    }

	timeZoneString() {
	    return this.getTypedRuleContext(TimeZoneStringContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterSetTimeZoneValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitSetTimeZoneValue(this);
		}
	}


}



class SessionSetParameterClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_sessionSetParameterClause;
    }

	sessionSetGraphParameterClause() {
	    return this.getTypedRuleContext(SessionSetGraphParameterClauseContext,0);
	};

	sessionSetBindingTableParameterClause() {
	    return this.getTypedRuleContext(SessionSetBindingTableParameterClauseContext,0);
	};

	sessionSetValueParameterClause() {
	    return this.getTypedRuleContext(SessionSetValueParameterClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterSessionSetParameterClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitSessionSetParameterClause(this);
		}
	}


}



class SessionSetGraphParameterClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_sessionSetGraphParameterClause;
    }

	GRAPH() {
	    return this.getToken(GQLParser.GRAPH, 0);
	};

	sessionSetParameterName() {
	    return this.getTypedRuleContext(SessionSetParameterNameContext,0);
	};

	optTypedGraphInitializer() {
	    return this.getTypedRuleContext(OptTypedGraphInitializerContext,0);
	};

	PROPERTY() {
	    return this.getToken(GQLParser.PROPERTY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterSessionSetGraphParameterClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitSessionSetGraphParameterClause(this);
		}
	}


}



class SessionSetBindingTableParameterClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_sessionSetBindingTableParameterClause;
    }

	TABLE() {
	    return this.getToken(GQLParser.TABLE, 0);
	};

	sessionSetParameterName() {
	    return this.getTypedRuleContext(SessionSetParameterNameContext,0);
	};

	optTypedBindingTableInitializer() {
	    return this.getTypedRuleContext(OptTypedBindingTableInitializerContext,0);
	};

	BINDING() {
	    return this.getToken(GQLParser.BINDING, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterSessionSetBindingTableParameterClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitSessionSetBindingTableParameterClause(this);
		}
	}


}



class SessionSetValueParameterClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_sessionSetValueParameterClause;
    }

	VALUE() {
	    return this.getToken(GQLParser.VALUE, 0);
	};

	sessionSetParameterName() {
	    return this.getTypedRuleContext(SessionSetParameterNameContext,0);
	};

	optTypedValueInitializer() {
	    return this.getTypedRuleContext(OptTypedValueInitializerContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterSessionSetValueParameterClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitSessionSetValueParameterClause(this);
		}
	}


}



class SessionSetParameterNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_sessionSetParameterName;
    }

	sessionParameterSpecification() {
	    return this.getTypedRuleContext(SessionParameterSpecificationContext,0);
	};

	IF() {
	    return this.getToken(GQLParser.IF, 0);
	};

	NOT() {
	    return this.getToken(GQLParser.NOT, 0);
	};

	EXISTS() {
	    return this.getToken(GQLParser.EXISTS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterSessionSetParameterName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitSessionSetParameterName(this);
		}
	}


}



class SessionResetCommandContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_sessionResetCommand;
    }

	SESSION() {
	    return this.getToken(GQLParser.SESSION, 0);
	};

	RESET() {
	    return this.getToken(GQLParser.RESET, 0);
	};

	sessionResetArguments() {
	    return this.getTypedRuleContext(SessionResetArgumentsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterSessionResetCommand(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitSessionResetCommand(this);
		}
	}


}



class SessionResetArgumentsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_sessionResetArguments;
    }

	PARAMETERS() {
	    return this.getToken(GQLParser.PARAMETERS, 0);
	};

	CHARACTERISTICS() {
	    return this.getToken(GQLParser.CHARACTERISTICS, 0);
	};

	ALL() {
	    return this.getToken(GQLParser.ALL, 0);
	};

	SCHEMA() {
	    return this.getToken(GQLParser.SCHEMA, 0);
	};

	GRAPH() {
	    return this.getToken(GQLParser.GRAPH, 0);
	};

	PROPERTY() {
	    return this.getToken(GQLParser.PROPERTY, 0);
	};

	TIME() {
	    return this.getToken(GQLParser.TIME, 0);
	};

	ZONE() {
	    return this.getToken(GQLParser.ZONE, 0);
	};

	sessionParameterSpecification() {
	    return this.getTypedRuleContext(SessionParameterSpecificationContext,0);
	};

	PARAMETER() {
	    return this.getToken(GQLParser.PARAMETER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterSessionResetArguments(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitSessionResetArguments(this);
		}
	}


}



class SessionCloseCommandContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_sessionCloseCommand;
    }

	SESSION() {
	    return this.getToken(GQLParser.SESSION, 0);
	};

	CLOSE() {
	    return this.getToken(GQLParser.CLOSE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterSessionCloseCommand(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitSessionCloseCommand(this);
		}
	}


}



class SessionParameterSpecificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_sessionParameterSpecification;
    }

	GENERAL_PARAMETER_REFERENCE() {
	    return this.getToken(GQLParser.GENERAL_PARAMETER_REFERENCE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterSessionParameterSpecification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitSessionParameterSpecification(this);
		}
	}


}



class StartTransactionCommandContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_startTransactionCommand;
    }

	START() {
	    return this.getToken(GQLParser.START, 0);
	};

	TRANSACTION() {
	    return this.getToken(GQLParser.TRANSACTION, 0);
	};

	transactionCharacteristics() {
	    return this.getTypedRuleContext(TransactionCharacteristicsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterStartTransactionCommand(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitStartTransactionCommand(this);
		}
	}


}



class TransactionCharacteristicsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_transactionCharacteristics;
    }

	transactionMode = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TransactionModeContext);
	    } else {
	        return this.getTypedRuleContext(TransactionModeContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GQLParser.COMMA);
	    } else {
	        return this.getToken(GQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterTransactionCharacteristics(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitTransactionCharacteristics(this);
		}
	}


}



class TransactionModeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_transactionMode;
    }

	transactionAccessMode() {
	    return this.getTypedRuleContext(TransactionAccessModeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterTransactionMode(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitTransactionMode(this);
		}
	}


}



class TransactionAccessModeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_transactionAccessMode;
    }

	READ() {
	    return this.getToken(GQLParser.READ, 0);
	};

	ONLY() {
	    return this.getToken(GQLParser.ONLY, 0);
	};

	WRITE() {
	    return this.getToken(GQLParser.WRITE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterTransactionAccessMode(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitTransactionAccessMode(this);
		}
	}


}



class RollbackCommandContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_rollbackCommand;
    }

	ROLLBACK() {
	    return this.getToken(GQLParser.ROLLBACK, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterRollbackCommand(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitRollbackCommand(this);
		}
	}


}



class CommitCommandContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_commitCommand;
    }

	COMMIT() {
	    return this.getToken(GQLParser.COMMIT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterCommitCommand(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitCommitCommand(this);
		}
	}


}



class NestedProcedureSpecificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_nestedProcedureSpecification;
    }

	LEFT_BRACE() {
	    return this.getToken(GQLParser.LEFT_BRACE, 0);
	};

	procedureSpecification() {
	    return this.getTypedRuleContext(ProcedureSpecificationContext,0);
	};

	RIGHT_BRACE() {
	    return this.getToken(GQLParser.RIGHT_BRACE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterNestedProcedureSpecification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitNestedProcedureSpecification(this);
		}
	}


}



class ProcedureSpecificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_procedureSpecification;
    }

	procedureBody() {
	    return this.getTypedRuleContext(ProcedureBodyContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterProcedureSpecification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitProcedureSpecification(this);
		}
	}


}



class NestedDataModifyingProcedureSpecificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_nestedDataModifyingProcedureSpecification;
    }

	LEFT_BRACE() {
	    return this.getToken(GQLParser.LEFT_BRACE, 0);
	};

	procedureBody() {
	    return this.getTypedRuleContext(ProcedureBodyContext,0);
	};

	RIGHT_BRACE() {
	    return this.getToken(GQLParser.RIGHT_BRACE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterNestedDataModifyingProcedureSpecification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitNestedDataModifyingProcedureSpecification(this);
		}
	}


}



class NestedQuerySpecificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_nestedQuerySpecification;
    }

	LEFT_BRACE() {
	    return this.getToken(GQLParser.LEFT_BRACE, 0);
	};

	procedureBody() {
	    return this.getTypedRuleContext(ProcedureBodyContext,0);
	};

	RIGHT_BRACE() {
	    return this.getToken(GQLParser.RIGHT_BRACE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterNestedQuerySpecification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitNestedQuerySpecification(this);
		}
	}


}



class ProcedureBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_procedureBody;
    }

	statementBlock() {
	    return this.getTypedRuleContext(StatementBlockContext,0);
	};

	atSchemaClause() {
	    return this.getTypedRuleContext(AtSchemaClauseContext,0);
	};

	bindingVariableDefinitionBlock() {
	    return this.getTypedRuleContext(BindingVariableDefinitionBlockContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterProcedureBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitProcedureBody(this);
		}
	}


}



class BindingVariableDefinitionBlockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_bindingVariableDefinitionBlock;
    }

	bindingVariableDefinition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BindingVariableDefinitionContext);
	    } else {
	        return this.getTypedRuleContext(BindingVariableDefinitionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterBindingVariableDefinitionBlock(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitBindingVariableDefinitionBlock(this);
		}
	}


}



class BindingVariableDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_bindingVariableDefinition;
    }

	graphVariableDefinition() {
	    return this.getTypedRuleContext(GraphVariableDefinitionContext,0);
	};

	bindingTableVariableDefinition() {
	    return this.getTypedRuleContext(BindingTableVariableDefinitionContext,0);
	};

	valueVariableDefinition() {
	    return this.getTypedRuleContext(ValueVariableDefinitionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterBindingVariableDefinition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitBindingVariableDefinition(this);
		}
	}


}



class StatementBlockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_statementBlock;
    }

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	nextStatement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NextStatementContext);
	    } else {
	        return this.getTypedRuleContext(NextStatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterStatementBlock(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitStatementBlock(this);
		}
	}


}



class StatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_statement;
    }

	linearCatalogModifyingStatement() {
	    return this.getTypedRuleContext(LinearCatalogModifyingStatementContext,0);
	};

	linearDataModifyingStatement() {
	    return this.getTypedRuleContext(LinearDataModifyingStatementContext,0);
	};

	compositeQueryStatement() {
	    return this.getTypedRuleContext(CompositeQueryStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitStatement(this);
		}
	}


}



class NextStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_nextStatement;
    }

	NEXT() {
	    return this.getToken(GQLParser.NEXT, 0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	yieldClause() {
	    return this.getTypedRuleContext(YieldClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterNextStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitNextStatement(this);
		}
	}


}



class GraphVariableDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_graphVariableDefinition;
    }

	GRAPH() {
	    return this.getToken(GQLParser.GRAPH, 0);
	};

	bindingVariable() {
	    return this.getTypedRuleContext(BindingVariableContext,0);
	};

	optTypedGraphInitializer() {
	    return this.getTypedRuleContext(OptTypedGraphInitializerContext,0);
	};

	PROPERTY() {
	    return this.getToken(GQLParser.PROPERTY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterGraphVariableDefinition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitGraphVariableDefinition(this);
		}
	}


}



class OptTypedGraphInitializerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_optTypedGraphInitializer;
    }

	graphInitializer() {
	    return this.getTypedRuleContext(GraphInitializerContext,0);
	};

	graphReferenceValueType() {
	    return this.getTypedRuleContext(GraphReferenceValueTypeContext,0);
	};

	typed() {
	    return this.getTypedRuleContext(TypedContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterOptTypedGraphInitializer(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitOptTypedGraphInitializer(this);
		}
	}


}



class GraphInitializerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_graphInitializer;
    }

	EQUALS_OPERATOR() {
	    return this.getToken(GQLParser.EQUALS_OPERATOR, 0);
	};

	graphExpression() {
	    return this.getTypedRuleContext(GraphExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterGraphInitializer(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitGraphInitializer(this);
		}
	}


}



class BindingTableVariableDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_bindingTableVariableDefinition;
    }

	TABLE() {
	    return this.getToken(GQLParser.TABLE, 0);
	};

	bindingVariable() {
	    return this.getTypedRuleContext(BindingVariableContext,0);
	};

	optTypedBindingTableInitializer() {
	    return this.getTypedRuleContext(OptTypedBindingTableInitializerContext,0);
	};

	BINDING() {
	    return this.getToken(GQLParser.BINDING, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterBindingTableVariableDefinition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitBindingTableVariableDefinition(this);
		}
	}


}



class OptTypedBindingTableInitializerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_optTypedBindingTableInitializer;
    }

	bindingTableInitializer() {
	    return this.getTypedRuleContext(BindingTableInitializerContext,0);
	};

	bindingTableReferenceValueType() {
	    return this.getTypedRuleContext(BindingTableReferenceValueTypeContext,0);
	};

	typed() {
	    return this.getTypedRuleContext(TypedContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterOptTypedBindingTableInitializer(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitOptTypedBindingTableInitializer(this);
		}
	}


}



class BindingTableInitializerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_bindingTableInitializer;
    }

	EQUALS_OPERATOR() {
	    return this.getToken(GQLParser.EQUALS_OPERATOR, 0);
	};

	bindingTableExpression() {
	    return this.getTypedRuleContext(BindingTableExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterBindingTableInitializer(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitBindingTableInitializer(this);
		}
	}


}



class ValueVariableDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_valueVariableDefinition;
    }

	VALUE() {
	    return this.getToken(GQLParser.VALUE, 0);
	};

	bindingVariable() {
	    return this.getTypedRuleContext(BindingVariableContext,0);
	};

	optTypedValueInitializer() {
	    return this.getTypedRuleContext(OptTypedValueInitializerContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterValueVariableDefinition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitValueVariableDefinition(this);
		}
	}


}



class OptTypedValueInitializerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_optTypedValueInitializer;
    }

	valueInitializer() {
	    return this.getTypedRuleContext(ValueInitializerContext,0);
	};

	valueType() {
	    return this.getTypedRuleContext(ValueTypeContext,0);
	};

	typed() {
	    return this.getTypedRuleContext(TypedContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterOptTypedValueInitializer(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitOptTypedValueInitializer(this);
		}
	}


}



class ValueInitializerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_valueInitializer;
    }

	EQUALS_OPERATOR() {
	    return this.getToken(GQLParser.EQUALS_OPERATOR, 0);
	};

	valueExpression() {
	    return this.getTypedRuleContext(ValueExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterValueInitializer(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitValueInitializer(this);
		}
	}


}



class GraphExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_graphExpression;
    }

	objectExpressionPrimary() {
	    return this.getTypedRuleContext(ObjectExpressionPrimaryContext,0);
	};

	graphReference() {
	    return this.getTypedRuleContext(GraphReferenceContext,0);
	};

	objectNameOrBindingVariable() {
	    return this.getTypedRuleContext(ObjectNameOrBindingVariableContext,0);
	};

	currentGraph() {
	    return this.getTypedRuleContext(CurrentGraphContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterGraphExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitGraphExpression(this);
		}
	}


}



class CurrentGraphContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_currentGraph;
    }

	CURRENT_PROPERTY_GRAPH() {
	    return this.getToken(GQLParser.CURRENT_PROPERTY_GRAPH, 0);
	};

	CURRENT_GRAPH() {
	    return this.getToken(GQLParser.CURRENT_GRAPH, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterCurrentGraph(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitCurrentGraph(this);
		}
	}


}



class BindingTableExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_bindingTableExpression;
    }

	nestedBindingTableQuerySpecification() {
	    return this.getTypedRuleContext(NestedBindingTableQuerySpecificationContext,0);
	};

	objectExpressionPrimary() {
	    return this.getTypedRuleContext(ObjectExpressionPrimaryContext,0);
	};

	bindingTableReference() {
	    return this.getTypedRuleContext(BindingTableReferenceContext,0);
	};

	objectNameOrBindingVariable() {
	    return this.getTypedRuleContext(ObjectNameOrBindingVariableContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterBindingTableExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitBindingTableExpression(this);
		}
	}


}



class NestedBindingTableQuerySpecificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_nestedBindingTableQuerySpecification;
    }

	nestedQuerySpecification() {
	    return this.getTypedRuleContext(NestedQuerySpecificationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterNestedBindingTableQuerySpecification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitNestedBindingTableQuerySpecification(this);
		}
	}


}



class ObjectExpressionPrimaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_objectExpressionPrimary;
    }

	VARIABLE() {
	    return this.getToken(GQLParser.VARIABLE, 0);
	};

	valueExpressionPrimary() {
	    return this.getTypedRuleContext(ValueExpressionPrimaryContext,0);
	};

	parenthesizedValueExpression() {
	    return this.getTypedRuleContext(ParenthesizedValueExpressionContext,0);
	};

	nonParenthesizedValueExpressionPrimarySpecialCase() {
	    return this.getTypedRuleContext(NonParenthesizedValueExpressionPrimarySpecialCaseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterObjectExpressionPrimary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitObjectExpressionPrimary(this);
		}
	}


}



class LinearCatalogModifyingStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_linearCatalogModifyingStatement;
    }

	simpleCatalogModifyingStatement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SimpleCatalogModifyingStatementContext);
	    } else {
	        return this.getTypedRuleContext(SimpleCatalogModifyingStatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterLinearCatalogModifyingStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitLinearCatalogModifyingStatement(this);
		}
	}


}



class SimpleCatalogModifyingStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_simpleCatalogModifyingStatement;
    }

	primitiveCatalogModifyingStatement() {
	    return this.getTypedRuleContext(PrimitiveCatalogModifyingStatementContext,0);
	};

	callCatalogModifyingProcedureStatement() {
	    return this.getTypedRuleContext(CallCatalogModifyingProcedureStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterSimpleCatalogModifyingStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitSimpleCatalogModifyingStatement(this);
		}
	}


}



class PrimitiveCatalogModifyingStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_primitiveCatalogModifyingStatement;
    }

	createSchemaStatement() {
	    return this.getTypedRuleContext(CreateSchemaStatementContext,0);
	};

	dropSchemaStatement() {
	    return this.getTypedRuleContext(DropSchemaStatementContext,0);
	};

	createGraphStatement() {
	    return this.getTypedRuleContext(CreateGraphStatementContext,0);
	};

	dropGraphStatement() {
	    return this.getTypedRuleContext(DropGraphStatementContext,0);
	};

	createGraphTypeStatement() {
	    return this.getTypedRuleContext(CreateGraphTypeStatementContext,0);
	};

	dropGraphTypeStatement() {
	    return this.getTypedRuleContext(DropGraphTypeStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterPrimitiveCatalogModifyingStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitPrimitiveCatalogModifyingStatement(this);
		}
	}


}



class CreateSchemaStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_createSchemaStatement;
    }

	CREATE() {
	    return this.getToken(GQLParser.CREATE, 0);
	};

	SCHEMA() {
	    return this.getToken(GQLParser.SCHEMA, 0);
	};

	catalogSchemaParentAndName() {
	    return this.getTypedRuleContext(CatalogSchemaParentAndNameContext,0);
	};

	IF() {
	    return this.getToken(GQLParser.IF, 0);
	};

	NOT() {
	    return this.getToken(GQLParser.NOT, 0);
	};

	EXISTS() {
	    return this.getToken(GQLParser.EXISTS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterCreateSchemaStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitCreateSchemaStatement(this);
		}
	}


}



class DropSchemaStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_dropSchemaStatement;
    }

	DROP() {
	    return this.getToken(GQLParser.DROP, 0);
	};

	SCHEMA() {
	    return this.getToken(GQLParser.SCHEMA, 0);
	};

	catalogSchemaParentAndName() {
	    return this.getTypedRuleContext(CatalogSchemaParentAndNameContext,0);
	};

	IF() {
	    return this.getToken(GQLParser.IF, 0);
	};

	EXISTS() {
	    return this.getToken(GQLParser.EXISTS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterDropSchemaStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitDropSchemaStatement(this);
		}
	}


}



class CreateGraphStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_createGraphStatement;
    }

	CREATE() {
	    return this.getToken(GQLParser.CREATE, 0);
	};

	catalogGraphParentAndName() {
	    return this.getTypedRuleContext(CatalogGraphParentAndNameContext,0);
	};

	GRAPH() {
	    return this.getToken(GQLParser.GRAPH, 0);
	};

	OR() {
	    return this.getToken(GQLParser.OR, 0);
	};

	REPLACE() {
	    return this.getToken(GQLParser.REPLACE, 0);
	};

	openGraphType() {
	    return this.getTypedRuleContext(OpenGraphTypeContext,0);
	};

	ofGraphType() {
	    return this.getTypedRuleContext(OfGraphTypeContext,0);
	};

	graphSource() {
	    return this.getTypedRuleContext(GraphSourceContext,0);
	};

	PROPERTY() {
	    return this.getToken(GQLParser.PROPERTY, 0);
	};

	IF() {
	    return this.getToken(GQLParser.IF, 0);
	};

	NOT() {
	    return this.getToken(GQLParser.NOT, 0);
	};

	EXISTS() {
	    return this.getToken(GQLParser.EXISTS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterCreateGraphStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitCreateGraphStatement(this);
		}
	}


}



class OpenGraphTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_openGraphType;
    }

	ANY() {
	    return this.getToken(GQLParser.ANY, 0);
	};

	typed() {
	    return this.getTypedRuleContext(TypedContext,0);
	};

	GRAPH() {
	    return this.getToken(GQLParser.GRAPH, 0);
	};

	PROPERTY() {
	    return this.getToken(GQLParser.PROPERTY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterOpenGraphType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitOpenGraphType(this);
		}
	}


}



class OfGraphTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_ofGraphType;
    }

	graphTypeLikeGraph() {
	    return this.getTypedRuleContext(GraphTypeLikeGraphContext,0);
	};

	graphTypeReference() {
	    return this.getTypedRuleContext(GraphTypeReferenceContext,0);
	};

	typed() {
	    return this.getTypedRuleContext(TypedContext,0);
	};

	nestedGraphTypeSpecification() {
	    return this.getTypedRuleContext(NestedGraphTypeSpecificationContext,0);
	};

	GRAPH() {
	    return this.getToken(GQLParser.GRAPH, 0);
	};

	PROPERTY() {
	    return this.getToken(GQLParser.PROPERTY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterOfGraphType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitOfGraphType(this);
		}
	}


}



class GraphTypeLikeGraphContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_graphTypeLikeGraph;
    }

	LIKE() {
	    return this.getToken(GQLParser.LIKE, 0);
	};

	graphExpression() {
	    return this.getTypedRuleContext(GraphExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterGraphTypeLikeGraph(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitGraphTypeLikeGraph(this);
		}
	}


}



class GraphSourceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_graphSource;
    }

	AS() {
	    return this.getToken(GQLParser.AS, 0);
	};

	COPY() {
	    return this.getToken(GQLParser.COPY, 0);
	};

	OF() {
	    return this.getToken(GQLParser.OF, 0);
	};

	graphExpression() {
	    return this.getTypedRuleContext(GraphExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterGraphSource(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitGraphSource(this);
		}
	}


}



class DropGraphStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_dropGraphStatement;
    }

	DROP() {
	    return this.getToken(GQLParser.DROP, 0);
	};

	GRAPH() {
	    return this.getToken(GQLParser.GRAPH, 0);
	};

	catalogGraphParentAndName() {
	    return this.getTypedRuleContext(CatalogGraphParentAndNameContext,0);
	};

	PROPERTY() {
	    return this.getToken(GQLParser.PROPERTY, 0);
	};

	IF() {
	    return this.getToken(GQLParser.IF, 0);
	};

	EXISTS() {
	    return this.getToken(GQLParser.EXISTS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterDropGraphStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitDropGraphStatement(this);
		}
	}


}



class CreateGraphTypeStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_createGraphTypeStatement;
    }

	CREATE() {
	    return this.getToken(GQLParser.CREATE, 0);
	};

	catalogGraphTypeParentAndName() {
	    return this.getTypedRuleContext(CatalogGraphTypeParentAndNameContext,0);
	};

	graphTypeSource() {
	    return this.getTypedRuleContext(GraphTypeSourceContext,0);
	};

	GRAPH() {
	    return this.getToken(GQLParser.GRAPH, 0);
	};

	TYPE() {
	    return this.getToken(GQLParser.TYPE, 0);
	};

	OR() {
	    return this.getToken(GQLParser.OR, 0);
	};

	REPLACE() {
	    return this.getToken(GQLParser.REPLACE, 0);
	};

	PROPERTY() {
	    return this.getToken(GQLParser.PROPERTY, 0);
	};

	IF() {
	    return this.getToken(GQLParser.IF, 0);
	};

	NOT() {
	    return this.getToken(GQLParser.NOT, 0);
	};

	EXISTS() {
	    return this.getToken(GQLParser.EXISTS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterCreateGraphTypeStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitCreateGraphTypeStatement(this);
		}
	}


}



class GraphTypeSourceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_graphTypeSource;
    }

	copyOfGraphType() {
	    return this.getTypedRuleContext(CopyOfGraphTypeContext,0);
	};

	AS() {
	    return this.getToken(GQLParser.AS, 0);
	};

	graphTypeLikeGraph() {
	    return this.getTypedRuleContext(GraphTypeLikeGraphContext,0);
	};

	nestedGraphTypeSpecification() {
	    return this.getTypedRuleContext(NestedGraphTypeSpecificationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterGraphTypeSource(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitGraphTypeSource(this);
		}
	}


}



class CopyOfGraphTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_copyOfGraphType;
    }

	COPY() {
	    return this.getToken(GQLParser.COPY, 0);
	};

	OF() {
	    return this.getToken(GQLParser.OF, 0);
	};

	graphTypeReference() {
	    return this.getTypedRuleContext(GraphTypeReferenceContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterCopyOfGraphType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitCopyOfGraphType(this);
		}
	}


}



class DropGraphTypeStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_dropGraphTypeStatement;
    }

	DROP() {
	    return this.getToken(GQLParser.DROP, 0);
	};

	GRAPH() {
	    return this.getToken(GQLParser.GRAPH, 0);
	};

	TYPE() {
	    return this.getToken(GQLParser.TYPE, 0);
	};

	catalogGraphTypeParentAndName() {
	    return this.getTypedRuleContext(CatalogGraphTypeParentAndNameContext,0);
	};

	PROPERTY() {
	    return this.getToken(GQLParser.PROPERTY, 0);
	};

	IF() {
	    return this.getToken(GQLParser.IF, 0);
	};

	EXISTS() {
	    return this.getToken(GQLParser.EXISTS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterDropGraphTypeStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitDropGraphTypeStatement(this);
		}
	}


}



class CallCatalogModifyingProcedureStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_callCatalogModifyingProcedureStatement;
    }

	callProcedureStatement() {
	    return this.getTypedRuleContext(CallProcedureStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterCallCatalogModifyingProcedureStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitCallCatalogModifyingProcedureStatement(this);
		}
	}


}



class LinearDataModifyingStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_linearDataModifyingStatement;
    }

	focusedLinearDataModifyingStatement() {
	    return this.getTypedRuleContext(FocusedLinearDataModifyingStatementContext,0);
	};

	ambientLinearDataModifyingStatement() {
	    return this.getTypedRuleContext(AmbientLinearDataModifyingStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterLinearDataModifyingStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitLinearDataModifyingStatement(this);
		}
	}


}



class FocusedLinearDataModifyingStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_focusedLinearDataModifyingStatement;
    }

	focusedLinearDataModifyingStatementBody() {
	    return this.getTypedRuleContext(FocusedLinearDataModifyingStatementBodyContext,0);
	};

	focusedNestedDataModifyingProcedureSpecification() {
	    return this.getTypedRuleContext(FocusedNestedDataModifyingProcedureSpecificationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterFocusedLinearDataModifyingStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitFocusedLinearDataModifyingStatement(this);
		}
	}


}



class FocusedLinearDataModifyingStatementBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_focusedLinearDataModifyingStatementBody;
    }

	useGraphClause() {
	    return this.getTypedRuleContext(UseGraphClauseContext,0);
	};

	simpleLinearDataAccessingStatement() {
	    return this.getTypedRuleContext(SimpleLinearDataAccessingStatementContext,0);
	};

	primitiveResultStatement() {
	    return this.getTypedRuleContext(PrimitiveResultStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterFocusedLinearDataModifyingStatementBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitFocusedLinearDataModifyingStatementBody(this);
		}
	}


}



class FocusedNestedDataModifyingProcedureSpecificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_focusedNestedDataModifyingProcedureSpecification;
    }

	useGraphClause() {
	    return this.getTypedRuleContext(UseGraphClauseContext,0);
	};

	nestedDataModifyingProcedureSpecification() {
	    return this.getTypedRuleContext(NestedDataModifyingProcedureSpecificationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterFocusedNestedDataModifyingProcedureSpecification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitFocusedNestedDataModifyingProcedureSpecification(this);
		}
	}


}



class AmbientLinearDataModifyingStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_ambientLinearDataModifyingStatement;
    }

	ambientLinearDataModifyingStatementBody() {
	    return this.getTypedRuleContext(AmbientLinearDataModifyingStatementBodyContext,0);
	};

	nestedDataModifyingProcedureSpecification() {
	    return this.getTypedRuleContext(NestedDataModifyingProcedureSpecificationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterAmbientLinearDataModifyingStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitAmbientLinearDataModifyingStatement(this);
		}
	}


}



class AmbientLinearDataModifyingStatementBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_ambientLinearDataModifyingStatementBody;
    }

	simpleLinearDataAccessingStatement() {
	    return this.getTypedRuleContext(SimpleLinearDataAccessingStatementContext,0);
	};

	primitiveResultStatement() {
	    return this.getTypedRuleContext(PrimitiveResultStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterAmbientLinearDataModifyingStatementBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitAmbientLinearDataModifyingStatementBody(this);
		}
	}


}



class SimpleLinearDataAccessingStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_simpleLinearDataAccessingStatement;
    }

	simpleDataAccessingStatement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SimpleDataAccessingStatementContext);
	    } else {
	        return this.getTypedRuleContext(SimpleDataAccessingStatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterSimpleLinearDataAccessingStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitSimpleLinearDataAccessingStatement(this);
		}
	}


}



class SimpleDataAccessingStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_simpleDataAccessingStatement;
    }

	simpleQueryStatement() {
	    return this.getTypedRuleContext(SimpleQueryStatementContext,0);
	};

	simpleDataModifyingStatement() {
	    return this.getTypedRuleContext(SimpleDataModifyingStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterSimpleDataAccessingStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitSimpleDataAccessingStatement(this);
		}
	}


}



class SimpleDataModifyingStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_simpleDataModifyingStatement;
    }

	primitiveDataModifyingStatement() {
	    return this.getTypedRuleContext(PrimitiveDataModifyingStatementContext,0);
	};

	callDataModifyingProcedureStatement() {
	    return this.getTypedRuleContext(CallDataModifyingProcedureStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterSimpleDataModifyingStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitSimpleDataModifyingStatement(this);
		}
	}


}



class PrimitiveDataModifyingStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_primitiveDataModifyingStatement;
    }

	insertStatement() {
	    return this.getTypedRuleContext(InsertStatementContext,0);
	};

	setStatement() {
	    return this.getTypedRuleContext(SetStatementContext,0);
	};

	removeStatement() {
	    return this.getTypedRuleContext(RemoveStatementContext,0);
	};

	deleteStatement() {
	    return this.getTypedRuleContext(DeleteStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterPrimitiveDataModifyingStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitPrimitiveDataModifyingStatement(this);
		}
	}


}



class InsertStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_insertStatement;
    }

	INSERT() {
	    return this.getToken(GQLParser.INSERT, 0);
	};

	insertGraphPattern() {
	    return this.getTypedRuleContext(InsertGraphPatternContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterInsertStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitInsertStatement(this);
		}
	}


}



class SetStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_setStatement;
    }

	SET() {
	    return this.getToken(GQLParser.SET, 0);
	};

	setItemList() {
	    return this.getTypedRuleContext(SetItemListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterSetStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitSetStatement(this);
		}
	}


}



class SetItemListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_setItemList;
    }

	setItem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SetItemContext);
	    } else {
	        return this.getTypedRuleContext(SetItemContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GQLParser.COMMA);
	    } else {
	        return this.getToken(GQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterSetItemList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitSetItemList(this);
		}
	}


}



class SetItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_setItem;
    }

	setPropertyItem() {
	    return this.getTypedRuleContext(SetPropertyItemContext,0);
	};

	setAllPropertiesItem() {
	    return this.getTypedRuleContext(SetAllPropertiesItemContext,0);
	};

	setLabelItem() {
	    return this.getTypedRuleContext(SetLabelItemContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterSetItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitSetItem(this);
		}
	}


}



class SetPropertyItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_setPropertyItem;
    }

	bindingVariableReference() {
	    return this.getTypedRuleContext(BindingVariableReferenceContext,0);
	};

	PERIOD() {
	    return this.getToken(GQLParser.PERIOD, 0);
	};

	propertyName() {
	    return this.getTypedRuleContext(PropertyNameContext,0);
	};

	EQUALS_OPERATOR() {
	    return this.getToken(GQLParser.EQUALS_OPERATOR, 0);
	};

	valueExpression() {
	    return this.getTypedRuleContext(ValueExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterSetPropertyItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitSetPropertyItem(this);
		}
	}


}



class SetAllPropertiesItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_setAllPropertiesItem;
    }

	bindingVariableReference() {
	    return this.getTypedRuleContext(BindingVariableReferenceContext,0);
	};

	EQUALS_OPERATOR() {
	    return this.getToken(GQLParser.EQUALS_OPERATOR, 0);
	};

	LEFT_BRACE() {
	    return this.getToken(GQLParser.LEFT_BRACE, 0);
	};

	RIGHT_BRACE() {
	    return this.getToken(GQLParser.RIGHT_BRACE, 0);
	};

	propertyKeyValuePairList() {
	    return this.getTypedRuleContext(PropertyKeyValuePairListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterSetAllPropertiesItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitSetAllPropertiesItem(this);
		}
	}


}



class SetLabelItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_setLabelItem;
    }

	bindingVariableReference() {
	    return this.getTypedRuleContext(BindingVariableReferenceContext,0);
	};

	isOrColon() {
	    return this.getTypedRuleContext(IsOrColonContext,0);
	};

	labelName() {
	    return this.getTypedRuleContext(LabelNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterSetLabelItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitSetLabelItem(this);
		}
	}


}



class RemoveStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_removeStatement;
    }

	REMOVE() {
	    return this.getToken(GQLParser.REMOVE, 0);
	};

	removeItemList() {
	    return this.getTypedRuleContext(RemoveItemListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterRemoveStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitRemoveStatement(this);
		}
	}


}



class RemoveItemListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_removeItemList;
    }

	removeItem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(RemoveItemContext);
	    } else {
	        return this.getTypedRuleContext(RemoveItemContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GQLParser.COMMA);
	    } else {
	        return this.getToken(GQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterRemoveItemList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitRemoveItemList(this);
		}
	}


}



class RemoveItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_removeItem;
    }

	removePropertyItem() {
	    return this.getTypedRuleContext(RemovePropertyItemContext,0);
	};

	removeLabelItem() {
	    return this.getTypedRuleContext(RemoveLabelItemContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterRemoveItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitRemoveItem(this);
		}
	}


}



class RemovePropertyItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_removePropertyItem;
    }

	bindingVariableReference() {
	    return this.getTypedRuleContext(BindingVariableReferenceContext,0);
	};

	PERIOD() {
	    return this.getToken(GQLParser.PERIOD, 0);
	};

	propertyName() {
	    return this.getTypedRuleContext(PropertyNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterRemovePropertyItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitRemovePropertyItem(this);
		}
	}


}



class RemoveLabelItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_removeLabelItem;
    }

	bindingVariableReference() {
	    return this.getTypedRuleContext(BindingVariableReferenceContext,0);
	};

	isOrColon() {
	    return this.getTypedRuleContext(IsOrColonContext,0);
	};

	labelName() {
	    return this.getTypedRuleContext(LabelNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterRemoveLabelItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitRemoveLabelItem(this);
		}
	}


}



class DeleteStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_deleteStatement;
    }

	DELETE() {
	    return this.getToken(GQLParser.DELETE, 0);
	};

	deleteItemList() {
	    return this.getTypedRuleContext(DeleteItemListContext,0);
	};

	DETACH() {
	    return this.getToken(GQLParser.DETACH, 0);
	};

	NODETACH() {
	    return this.getToken(GQLParser.NODETACH, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterDeleteStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitDeleteStatement(this);
		}
	}


}



class DeleteItemListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_deleteItemList;
    }

	deleteItem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DeleteItemContext);
	    } else {
	        return this.getTypedRuleContext(DeleteItemContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GQLParser.COMMA);
	    } else {
	        return this.getToken(GQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterDeleteItemList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitDeleteItemList(this);
		}
	}


}



class DeleteItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_deleteItem;
    }

	valueExpression() {
	    return this.getTypedRuleContext(ValueExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterDeleteItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitDeleteItem(this);
		}
	}


}



class CallDataModifyingProcedureStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_callDataModifyingProcedureStatement;
    }

	callProcedureStatement() {
	    return this.getTypedRuleContext(CallProcedureStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterCallDataModifyingProcedureStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitCallDataModifyingProcedureStatement(this);
		}
	}


}



class CompositeQueryStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_compositeQueryStatement;
    }

	compositeQueryExpression() {
	    return this.getTypedRuleContext(CompositeQueryExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterCompositeQueryStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitCompositeQueryStatement(this);
		}
	}


}



class CompositeQueryExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_compositeQueryExpression;
    }

	compositeQueryPrimary() {
	    return this.getTypedRuleContext(CompositeQueryPrimaryContext,0);
	};

	compositeQueryExpression() {
	    return this.getTypedRuleContext(CompositeQueryExpressionContext,0);
	};

	queryConjunction() {
	    return this.getTypedRuleContext(QueryConjunctionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterCompositeQueryExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitCompositeQueryExpression(this);
		}
	}


}



class QueryConjunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_queryConjunction;
    }

	setOperator() {
	    return this.getTypedRuleContext(SetOperatorContext,0);
	};

	OTHERWISE() {
	    return this.getToken(GQLParser.OTHERWISE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterQueryConjunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitQueryConjunction(this);
		}
	}


}



class SetOperatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_setOperator;
    }

	UNION() {
	    return this.getToken(GQLParser.UNION, 0);
	};

	setQuantifier() {
	    return this.getTypedRuleContext(SetQuantifierContext,0);
	};

	EXCEPT() {
	    return this.getToken(GQLParser.EXCEPT, 0);
	};

	INTERSECT() {
	    return this.getToken(GQLParser.INTERSECT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterSetOperator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitSetOperator(this);
		}
	}


}



class CompositeQueryPrimaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_compositeQueryPrimary;
    }

	linearQueryStatement() {
	    return this.getTypedRuleContext(LinearQueryStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterCompositeQueryPrimary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitCompositeQueryPrimary(this);
		}
	}


}



class LinearQueryStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_linearQueryStatement;
    }

	focusedLinearQueryStatement() {
	    return this.getTypedRuleContext(FocusedLinearQueryStatementContext,0);
	};

	ambientLinearQueryStatement() {
	    return this.getTypedRuleContext(AmbientLinearQueryStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterLinearQueryStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitLinearQueryStatement(this);
		}
	}


}



class FocusedLinearQueryStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_focusedLinearQueryStatement;
    }

	focusedLinearQueryAndPrimitiveResultStatementPart() {
	    return this.getTypedRuleContext(FocusedLinearQueryAndPrimitiveResultStatementPartContext,0);
	};

	focusedLinearQueryStatementPart = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FocusedLinearQueryStatementPartContext);
	    } else {
	        return this.getTypedRuleContext(FocusedLinearQueryStatementPartContext,i);
	    }
	};

	focusedPrimitiveResultStatement() {
	    return this.getTypedRuleContext(FocusedPrimitiveResultStatementContext,0);
	};

	focusedNestedQuerySpecification() {
	    return this.getTypedRuleContext(FocusedNestedQuerySpecificationContext,0);
	};

	selectStatement() {
	    return this.getTypedRuleContext(SelectStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterFocusedLinearQueryStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitFocusedLinearQueryStatement(this);
		}
	}


}



class FocusedLinearQueryStatementPartContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_focusedLinearQueryStatementPart;
    }

	useGraphClause() {
	    return this.getTypedRuleContext(UseGraphClauseContext,0);
	};

	simpleLinearQueryStatement() {
	    return this.getTypedRuleContext(SimpleLinearQueryStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterFocusedLinearQueryStatementPart(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitFocusedLinearQueryStatementPart(this);
		}
	}


}



class FocusedLinearQueryAndPrimitiveResultStatementPartContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_focusedLinearQueryAndPrimitiveResultStatementPart;
    }

	useGraphClause() {
	    return this.getTypedRuleContext(UseGraphClauseContext,0);
	};

	simpleLinearQueryStatement() {
	    return this.getTypedRuleContext(SimpleLinearQueryStatementContext,0);
	};

	primitiveResultStatement() {
	    return this.getTypedRuleContext(PrimitiveResultStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterFocusedLinearQueryAndPrimitiveResultStatementPart(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitFocusedLinearQueryAndPrimitiveResultStatementPart(this);
		}
	}


}



class FocusedPrimitiveResultStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_focusedPrimitiveResultStatement;
    }

	useGraphClause() {
	    return this.getTypedRuleContext(UseGraphClauseContext,0);
	};

	primitiveResultStatement() {
	    return this.getTypedRuleContext(PrimitiveResultStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterFocusedPrimitiveResultStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitFocusedPrimitiveResultStatement(this);
		}
	}


}



class FocusedNestedQuerySpecificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_focusedNestedQuerySpecification;
    }

	useGraphClause() {
	    return this.getTypedRuleContext(UseGraphClauseContext,0);
	};

	nestedQuerySpecification() {
	    return this.getTypedRuleContext(NestedQuerySpecificationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterFocusedNestedQuerySpecification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitFocusedNestedQuerySpecification(this);
		}
	}


}



class AmbientLinearQueryStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_ambientLinearQueryStatement;
    }

	primitiveResultStatement() {
	    return this.getTypedRuleContext(PrimitiveResultStatementContext,0);
	};

	simpleLinearQueryStatement() {
	    return this.getTypedRuleContext(SimpleLinearQueryStatementContext,0);
	};

	nestedQuerySpecification() {
	    return this.getTypedRuleContext(NestedQuerySpecificationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterAmbientLinearQueryStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitAmbientLinearQueryStatement(this);
		}
	}


}



class SimpleLinearQueryStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_simpleLinearQueryStatement;
    }

	simpleQueryStatement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SimpleQueryStatementContext);
	    } else {
	        return this.getTypedRuleContext(SimpleQueryStatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterSimpleLinearQueryStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitSimpleLinearQueryStatement(this);
		}
	}


}



class SimpleQueryStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_simpleQueryStatement;
    }

	primitiveQueryStatement() {
	    return this.getTypedRuleContext(PrimitiveQueryStatementContext,0);
	};

	callQueryStatement() {
	    return this.getTypedRuleContext(CallQueryStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterSimpleQueryStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitSimpleQueryStatement(this);
		}
	}


}



class PrimitiveQueryStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_primitiveQueryStatement;
    }

	matchStatement() {
	    return this.getTypedRuleContext(MatchStatementContext,0);
	};

	letStatement() {
	    return this.getTypedRuleContext(LetStatementContext,0);
	};

	forStatement() {
	    return this.getTypedRuleContext(ForStatementContext,0);
	};

	filterStatement() {
	    return this.getTypedRuleContext(FilterStatementContext,0);
	};

	orderByAndPageStatement() {
	    return this.getTypedRuleContext(OrderByAndPageStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterPrimitiveQueryStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitPrimitiveQueryStatement(this);
		}
	}


}



class MatchStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_matchStatement;
    }

	simpleMatchStatement() {
	    return this.getTypedRuleContext(SimpleMatchStatementContext,0);
	};

	optionalMatchStatement() {
	    return this.getTypedRuleContext(OptionalMatchStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterMatchStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitMatchStatement(this);
		}
	}


}



class SimpleMatchStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_simpleMatchStatement;
    }

	MATCH() {
	    return this.getToken(GQLParser.MATCH, 0);
	};

	graphPatternBindingTable() {
	    return this.getTypedRuleContext(GraphPatternBindingTableContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterSimpleMatchStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitSimpleMatchStatement(this);
		}
	}


}



class OptionalMatchStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_optionalMatchStatement;
    }

	OPTIONAL() {
	    return this.getToken(GQLParser.OPTIONAL, 0);
	};

	optionalOperand() {
	    return this.getTypedRuleContext(OptionalOperandContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterOptionalMatchStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitOptionalMatchStatement(this);
		}
	}


}



class OptionalOperandContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_optionalOperand;
    }

	simpleMatchStatement() {
	    return this.getTypedRuleContext(SimpleMatchStatementContext,0);
	};

	LEFT_BRACE() {
	    return this.getToken(GQLParser.LEFT_BRACE, 0);
	};

	matchStatementBlock() {
	    return this.getTypedRuleContext(MatchStatementBlockContext,0);
	};

	RIGHT_BRACE() {
	    return this.getToken(GQLParser.RIGHT_BRACE, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterOptionalOperand(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitOptionalOperand(this);
		}
	}


}



class MatchStatementBlockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_matchStatementBlock;
    }

	matchStatement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(MatchStatementContext);
	    } else {
	        return this.getTypedRuleContext(MatchStatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterMatchStatementBlock(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitMatchStatementBlock(this);
		}
	}


}



class CallQueryStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_callQueryStatement;
    }

	callProcedureStatement() {
	    return this.getTypedRuleContext(CallProcedureStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterCallQueryStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitCallQueryStatement(this);
		}
	}


}



class FilterStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_filterStatement;
    }

	FILTER() {
	    return this.getToken(GQLParser.FILTER, 0);
	};

	whereClause() {
	    return this.getTypedRuleContext(WhereClauseContext,0);
	};

	searchCondition() {
	    return this.getTypedRuleContext(SearchConditionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterFilterStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitFilterStatement(this);
		}
	}


}



class LetStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_letStatement;
    }

	LET() {
	    return this.getToken(GQLParser.LET, 0);
	};

	letVariableDefinitionList() {
	    return this.getTypedRuleContext(LetVariableDefinitionListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterLetStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitLetStatement(this);
		}
	}


}



class LetVariableDefinitionListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_letVariableDefinitionList;
    }

	letVariableDefinition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LetVariableDefinitionContext);
	    } else {
	        return this.getTypedRuleContext(LetVariableDefinitionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GQLParser.COMMA);
	    } else {
	        return this.getToken(GQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterLetVariableDefinitionList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitLetVariableDefinitionList(this);
		}
	}


}



class LetVariableDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_letVariableDefinition;
    }

	valueVariableDefinition() {
	    return this.getTypedRuleContext(ValueVariableDefinitionContext,0);
	};

	bindingVariable() {
	    return this.getTypedRuleContext(BindingVariableContext,0);
	};

	EQUALS_OPERATOR() {
	    return this.getToken(GQLParser.EQUALS_OPERATOR, 0);
	};

	valueExpression() {
	    return this.getTypedRuleContext(ValueExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterLetVariableDefinition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitLetVariableDefinition(this);
		}
	}


}



class ForStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_forStatement;
    }

	FOR() {
	    return this.getToken(GQLParser.FOR, 0);
	};

	forItem() {
	    return this.getTypedRuleContext(ForItemContext,0);
	};

	forOrdinalityOrOffset() {
	    return this.getTypedRuleContext(ForOrdinalityOrOffsetContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterForStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitForStatement(this);
		}
	}


}



class ForItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_forItem;
    }

	forItemAlias() {
	    return this.getTypedRuleContext(ForItemAliasContext,0);
	};

	forItemSource() {
	    return this.getTypedRuleContext(ForItemSourceContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterForItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitForItem(this);
		}
	}


}



class ForItemAliasContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_forItemAlias;
    }

	bindingVariable() {
	    return this.getTypedRuleContext(BindingVariableContext,0);
	};

	IN() {
	    return this.getToken(GQLParser.IN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterForItemAlias(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitForItemAlias(this);
		}
	}


}



class ForItemSourceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_forItemSource;
    }

	valueExpression() {
	    return this.getTypedRuleContext(ValueExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterForItemSource(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitForItemSource(this);
		}
	}


}



class ForOrdinalityOrOffsetContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_forOrdinalityOrOffset;
    }

	WITH() {
	    return this.getToken(GQLParser.WITH, 0);
	};

	bindingVariable() {
	    return this.getTypedRuleContext(BindingVariableContext,0);
	};

	ORDINALITY() {
	    return this.getToken(GQLParser.ORDINALITY, 0);
	};

	OFFSET() {
	    return this.getToken(GQLParser.OFFSET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterForOrdinalityOrOffset(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitForOrdinalityOrOffset(this);
		}
	}


}



class OrderByAndPageStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_orderByAndPageStatement;
    }

	orderByClause() {
	    return this.getTypedRuleContext(OrderByClauseContext,0);
	};

	offsetClause() {
	    return this.getTypedRuleContext(OffsetClauseContext,0);
	};

	limitClause() {
	    return this.getTypedRuleContext(LimitClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterOrderByAndPageStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitOrderByAndPageStatement(this);
		}
	}


}



class PrimitiveResultStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_primitiveResultStatement;
    }

	returnStatement() {
	    return this.getTypedRuleContext(ReturnStatementContext,0);
	};

	orderByAndPageStatement() {
	    return this.getTypedRuleContext(OrderByAndPageStatementContext,0);
	};

	FINISH() {
	    return this.getToken(GQLParser.FINISH, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterPrimitiveResultStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitPrimitiveResultStatement(this);
		}
	}


}



class ReturnStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_returnStatement;
    }

	RETURN() {
	    return this.getToken(GQLParser.RETURN, 0);
	};

	returnStatementBody() {
	    return this.getTypedRuleContext(ReturnStatementBodyContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterReturnStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitReturnStatement(this);
		}
	}


}



class ReturnStatementBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_returnStatementBody;
    }

	ASTERISK() {
	    return this.getToken(GQLParser.ASTERISK, 0);
	};

	returnItemList() {
	    return this.getTypedRuleContext(ReturnItemListContext,0);
	};

	setQuantifier() {
	    return this.getTypedRuleContext(SetQuantifierContext,0);
	};

	groupByClause() {
	    return this.getTypedRuleContext(GroupByClauseContext,0);
	};

	NO() {
	    return this.getToken(GQLParser.NO, 0);
	};

	BINDINGS() {
	    return this.getToken(GQLParser.BINDINGS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterReturnStatementBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitReturnStatementBody(this);
		}
	}


}



class ReturnItemListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_returnItemList;
    }

	returnItem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ReturnItemContext);
	    } else {
	        return this.getTypedRuleContext(ReturnItemContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GQLParser.COMMA);
	    } else {
	        return this.getToken(GQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterReturnItemList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitReturnItemList(this);
		}
	}


}



class ReturnItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_returnItem;
    }

	aggregatingValueExpression() {
	    return this.getTypedRuleContext(AggregatingValueExpressionContext,0);
	};

	returnItemAlias() {
	    return this.getTypedRuleContext(ReturnItemAliasContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterReturnItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitReturnItem(this);
		}
	}


}



class ReturnItemAliasContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_returnItemAlias;
    }

	AS() {
	    return this.getToken(GQLParser.AS, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterReturnItemAlias(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitReturnItemAlias(this);
		}
	}


}



class SelectStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_selectStatement;
    }

	SELECT() {
	    return this.getToken(GQLParser.SELECT, 0);
	};

	ASTERISK() {
	    return this.getToken(GQLParser.ASTERISK, 0);
	};

	selectItemList() {
	    return this.getTypedRuleContext(SelectItemListContext,0);
	};

	setQuantifier() {
	    return this.getTypedRuleContext(SetQuantifierContext,0);
	};

	selectStatementBody() {
	    return this.getTypedRuleContext(SelectStatementBodyContext,0);
	};

	whereClause() {
	    return this.getTypedRuleContext(WhereClauseContext,0);
	};

	groupByClause() {
	    return this.getTypedRuleContext(GroupByClauseContext,0);
	};

	havingClause() {
	    return this.getTypedRuleContext(HavingClauseContext,0);
	};

	orderByClause() {
	    return this.getTypedRuleContext(OrderByClauseContext,0);
	};

	offsetClause() {
	    return this.getTypedRuleContext(OffsetClauseContext,0);
	};

	limitClause() {
	    return this.getTypedRuleContext(LimitClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterSelectStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitSelectStatement(this);
		}
	}


}



class SelectItemListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_selectItemList;
    }

	selectItem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SelectItemContext);
	    } else {
	        return this.getTypedRuleContext(SelectItemContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GQLParser.COMMA);
	    } else {
	        return this.getToken(GQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterSelectItemList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitSelectItemList(this);
		}
	}


}



class SelectItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_selectItem;
    }

	aggregatingValueExpression() {
	    return this.getTypedRuleContext(AggregatingValueExpressionContext,0);
	};

	selectItemAlias() {
	    return this.getTypedRuleContext(SelectItemAliasContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterSelectItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitSelectItem(this);
		}
	}


}



class SelectItemAliasContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_selectItemAlias;
    }

	AS() {
	    return this.getToken(GQLParser.AS, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterSelectItemAlias(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitSelectItemAlias(this);
		}
	}


}



class HavingClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_havingClause;
    }

	HAVING() {
	    return this.getToken(GQLParser.HAVING, 0);
	};

	searchCondition() {
	    return this.getTypedRuleContext(SearchConditionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterHavingClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitHavingClause(this);
		}
	}


}



class SelectStatementBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_selectStatementBody;
    }

	FROM() {
	    return this.getToken(GQLParser.FROM, 0);
	};

	selectGraphMatchList() {
	    return this.getTypedRuleContext(SelectGraphMatchListContext,0);
	};

	selectQuerySpecification() {
	    return this.getTypedRuleContext(SelectQuerySpecificationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterSelectStatementBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitSelectStatementBody(this);
		}
	}


}



class SelectGraphMatchListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_selectGraphMatchList;
    }

	selectGraphMatch = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SelectGraphMatchContext);
	    } else {
	        return this.getTypedRuleContext(SelectGraphMatchContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GQLParser.COMMA);
	    } else {
	        return this.getToken(GQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterSelectGraphMatchList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitSelectGraphMatchList(this);
		}
	}


}



class SelectGraphMatchContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_selectGraphMatch;
    }

	graphExpression() {
	    return this.getTypedRuleContext(GraphExpressionContext,0);
	};

	matchStatement() {
	    return this.getTypedRuleContext(MatchStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterSelectGraphMatch(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitSelectGraphMatch(this);
		}
	}


}



class SelectQuerySpecificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_selectQuerySpecification;
    }

	nestedQuerySpecification() {
	    return this.getTypedRuleContext(NestedQuerySpecificationContext,0);
	};

	graphExpression() {
	    return this.getTypedRuleContext(GraphExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterSelectQuerySpecification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitSelectQuerySpecification(this);
		}
	}


}



class CallProcedureStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_callProcedureStatement;
    }

	CALL() {
	    return this.getToken(GQLParser.CALL, 0);
	};

	procedureCall() {
	    return this.getTypedRuleContext(ProcedureCallContext,0);
	};

	OPTIONAL() {
	    return this.getToken(GQLParser.OPTIONAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterCallProcedureStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitCallProcedureStatement(this);
		}
	}


}



class ProcedureCallContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_procedureCall;
    }

	inlineProcedureCall() {
	    return this.getTypedRuleContext(InlineProcedureCallContext,0);
	};

	namedProcedureCall() {
	    return this.getTypedRuleContext(NamedProcedureCallContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterProcedureCall(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitProcedureCall(this);
		}
	}


}



class InlineProcedureCallContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_inlineProcedureCall;
    }

	nestedProcedureSpecification() {
	    return this.getTypedRuleContext(NestedProcedureSpecificationContext,0);
	};

	variableScopeClause() {
	    return this.getTypedRuleContext(VariableScopeClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterInlineProcedureCall(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitInlineProcedureCall(this);
		}
	}


}



class VariableScopeClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_variableScopeClause;
    }

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	bindingVariableReferenceList() {
	    return this.getTypedRuleContext(BindingVariableReferenceListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterVariableScopeClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitVariableScopeClause(this);
		}
	}


}



class BindingVariableReferenceListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_bindingVariableReferenceList;
    }

	bindingVariableReference = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BindingVariableReferenceContext);
	    } else {
	        return this.getTypedRuleContext(BindingVariableReferenceContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GQLParser.COMMA);
	    } else {
	        return this.getToken(GQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterBindingVariableReferenceList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitBindingVariableReferenceList(this);
		}
	}


}



class NamedProcedureCallContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_namedProcedureCall;
    }

	procedureReference() {
	    return this.getTypedRuleContext(ProcedureReferenceContext,0);
	};

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	procedureArgumentList() {
	    return this.getTypedRuleContext(ProcedureArgumentListContext,0);
	};

	yieldClause() {
	    return this.getTypedRuleContext(YieldClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterNamedProcedureCall(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitNamedProcedureCall(this);
		}
	}


}



class ProcedureArgumentListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_procedureArgumentList;
    }

	procedureArgument = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ProcedureArgumentContext);
	    } else {
	        return this.getTypedRuleContext(ProcedureArgumentContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GQLParser.COMMA);
	    } else {
	        return this.getToken(GQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterProcedureArgumentList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitProcedureArgumentList(this);
		}
	}


}



class ProcedureArgumentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_procedureArgument;
    }

	valueExpression() {
	    return this.getTypedRuleContext(ValueExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterProcedureArgument(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitProcedureArgument(this);
		}
	}


}



class AtSchemaClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_atSchemaClause;
    }

	AT() {
	    return this.getToken(GQLParser.AT, 0);
	};

	schemaReference() {
	    return this.getTypedRuleContext(SchemaReferenceContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterAtSchemaClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitAtSchemaClause(this);
		}
	}


}



class UseGraphClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_useGraphClause;
    }

	USE() {
	    return this.getToken(GQLParser.USE, 0);
	};

	graphExpression() {
	    return this.getTypedRuleContext(GraphExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterUseGraphClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitUseGraphClause(this);
		}
	}


}



class GraphPatternBindingTableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_graphPatternBindingTable;
    }

	graphPattern() {
	    return this.getTypedRuleContext(GraphPatternContext,0);
	};

	graphPatternYieldClause() {
	    return this.getTypedRuleContext(GraphPatternYieldClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterGraphPatternBindingTable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitGraphPatternBindingTable(this);
		}
	}


}



class GraphPatternYieldClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_graphPatternYieldClause;
    }

	YIELD() {
	    return this.getToken(GQLParser.YIELD, 0);
	};

	graphPatternYieldItemList() {
	    return this.getTypedRuleContext(GraphPatternYieldItemListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterGraphPatternYieldClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitGraphPatternYieldClause(this);
		}
	}


}



class GraphPatternYieldItemListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_graphPatternYieldItemList;
    }

	graphPatternYieldItem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(GraphPatternYieldItemContext);
	    } else {
	        return this.getTypedRuleContext(GraphPatternYieldItemContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GQLParser.COMMA);
	    } else {
	        return this.getToken(GQLParser.COMMA, i);
	    }
	};


	NO() {
	    return this.getToken(GQLParser.NO, 0);
	};

	BINDINGS() {
	    return this.getToken(GQLParser.BINDINGS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterGraphPatternYieldItemList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitGraphPatternYieldItemList(this);
		}
	}


}



class GraphPatternYieldItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_graphPatternYieldItem;
    }

	bindingVariableReference() {
	    return this.getTypedRuleContext(BindingVariableReferenceContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterGraphPatternYieldItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitGraphPatternYieldItem(this);
		}
	}


}



class GraphPatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_graphPattern;
    }

	pathPatternList() {
	    return this.getTypedRuleContext(PathPatternListContext,0);
	};

	matchMode() {
	    return this.getTypedRuleContext(MatchModeContext,0);
	};

	keepClause() {
	    return this.getTypedRuleContext(KeepClauseContext,0);
	};

	graphPatternWhereClause() {
	    return this.getTypedRuleContext(GraphPatternWhereClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterGraphPattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitGraphPattern(this);
		}
	}


}



class MatchModeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_matchMode;
    }

	repeatableElementsMatchMode() {
	    return this.getTypedRuleContext(RepeatableElementsMatchModeContext,0);
	};

	differentEdgesMatchMode() {
	    return this.getTypedRuleContext(DifferentEdgesMatchModeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterMatchMode(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitMatchMode(this);
		}
	}


}



class RepeatableElementsMatchModeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_repeatableElementsMatchMode;
    }

	REPEATABLE() {
	    return this.getToken(GQLParser.REPEATABLE, 0);
	};

	elementBindingsOrElements() {
	    return this.getTypedRuleContext(ElementBindingsOrElementsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterRepeatableElementsMatchMode(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitRepeatableElementsMatchMode(this);
		}
	}


}



class DifferentEdgesMatchModeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_differentEdgesMatchMode;
    }

	DIFFERENT() {
	    return this.getToken(GQLParser.DIFFERENT, 0);
	};

	edgeBindingsOrEdges() {
	    return this.getTypedRuleContext(EdgeBindingsOrEdgesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterDifferentEdgesMatchMode(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitDifferentEdgesMatchMode(this);
		}
	}


}



class ElementBindingsOrElementsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_elementBindingsOrElements;
    }

	ELEMENT() {
	    return this.getToken(GQLParser.ELEMENT, 0);
	};

	BINDINGS() {
	    return this.getToken(GQLParser.BINDINGS, 0);
	};

	ELEMENTS() {
	    return this.getToken(GQLParser.ELEMENTS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterElementBindingsOrElements(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitElementBindingsOrElements(this);
		}
	}


}



class EdgeBindingsOrEdgesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_edgeBindingsOrEdges;
    }

	edgeSynonym() {
	    return this.getTypedRuleContext(EdgeSynonymContext,0);
	};

	BINDINGS() {
	    return this.getToken(GQLParser.BINDINGS, 0);
	};

	edgesSynonym() {
	    return this.getTypedRuleContext(EdgesSynonymContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterEdgeBindingsOrEdges(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitEdgeBindingsOrEdges(this);
		}
	}


}



class PathPatternListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_pathPatternList;
    }

	pathPattern = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PathPatternContext);
	    } else {
	        return this.getTypedRuleContext(PathPatternContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GQLParser.COMMA);
	    } else {
	        return this.getToken(GQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterPathPatternList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitPathPatternList(this);
		}
	}


}



class PathPatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_pathPattern;
    }

	pathPatternExpression() {
	    return this.getTypedRuleContext(PathPatternExpressionContext,0);
	};

	pathVariableDeclaration() {
	    return this.getTypedRuleContext(PathVariableDeclarationContext,0);
	};

	pathPatternPrefix() {
	    return this.getTypedRuleContext(PathPatternPrefixContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterPathPattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitPathPattern(this);
		}
	}


}



class PathVariableDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_pathVariableDeclaration;
    }

	pathVariable() {
	    return this.getTypedRuleContext(PathVariableContext,0);
	};

	EQUALS_OPERATOR() {
	    return this.getToken(GQLParser.EQUALS_OPERATOR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterPathVariableDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitPathVariableDeclaration(this);
		}
	}


}



class KeepClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_keepClause;
    }

	KEEP() {
	    return this.getToken(GQLParser.KEEP, 0);
	};

	pathPatternPrefix() {
	    return this.getTypedRuleContext(PathPatternPrefixContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterKeepClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitKeepClause(this);
		}
	}


}



class GraphPatternWhereClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_graphPatternWhereClause;
    }

	WHERE() {
	    return this.getToken(GQLParser.WHERE, 0);
	};

	searchCondition() {
	    return this.getTypedRuleContext(SearchConditionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterGraphPatternWhereClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitGraphPatternWhereClause(this);
		}
	}


}



class InsertGraphPatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_insertGraphPattern;
    }

	insertPathPatternList() {
	    return this.getTypedRuleContext(InsertPathPatternListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterInsertGraphPattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitInsertGraphPattern(this);
		}
	}


}



class InsertPathPatternListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_insertPathPatternList;
    }

	insertPathPattern = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(InsertPathPatternContext);
	    } else {
	        return this.getTypedRuleContext(InsertPathPatternContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GQLParser.COMMA);
	    } else {
	        return this.getToken(GQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterInsertPathPatternList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitInsertPathPatternList(this);
		}
	}


}



class InsertPathPatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_insertPathPattern;
    }

	insertNodePattern = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(InsertNodePatternContext);
	    } else {
	        return this.getTypedRuleContext(InsertNodePatternContext,i);
	    }
	};

	insertEdgePattern = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(InsertEdgePatternContext);
	    } else {
	        return this.getTypedRuleContext(InsertEdgePatternContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterInsertPathPattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitInsertPathPattern(this);
		}
	}


}



class InsertNodePatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_insertNodePattern;
    }

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	insertElementPatternFiller() {
	    return this.getTypedRuleContext(InsertElementPatternFillerContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterInsertNodePattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitInsertNodePattern(this);
		}
	}


}



class InsertEdgePatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_insertEdgePattern;
    }

	insertEdgePointingLeft() {
	    return this.getTypedRuleContext(InsertEdgePointingLeftContext,0);
	};

	insertEdgePointingRight() {
	    return this.getTypedRuleContext(InsertEdgePointingRightContext,0);
	};

	insertEdgeUndirected() {
	    return this.getTypedRuleContext(InsertEdgeUndirectedContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterInsertEdgePattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitInsertEdgePattern(this);
		}
	}


}



class InsertEdgePointingLeftContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_insertEdgePointingLeft;
    }

	LEFT_ARROW_BRACKET() {
	    return this.getToken(GQLParser.LEFT_ARROW_BRACKET, 0);
	};

	RIGHT_BRACKET_MINUS() {
	    return this.getToken(GQLParser.RIGHT_BRACKET_MINUS, 0);
	};

	insertElementPatternFiller() {
	    return this.getTypedRuleContext(InsertElementPatternFillerContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterInsertEdgePointingLeft(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitInsertEdgePointingLeft(this);
		}
	}


}



class InsertEdgePointingRightContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_insertEdgePointingRight;
    }

	MINUS_LEFT_BRACKET() {
	    return this.getToken(GQLParser.MINUS_LEFT_BRACKET, 0);
	};

	BRACKET_RIGHT_ARROW() {
	    return this.getToken(GQLParser.BRACKET_RIGHT_ARROW, 0);
	};

	insertElementPatternFiller() {
	    return this.getTypedRuleContext(InsertElementPatternFillerContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterInsertEdgePointingRight(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitInsertEdgePointingRight(this);
		}
	}


}



class InsertEdgeUndirectedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_insertEdgeUndirected;
    }

	TILDE_LEFT_BRACKET() {
	    return this.getToken(GQLParser.TILDE_LEFT_BRACKET, 0);
	};

	RIGHT_BRACKET_TILDE() {
	    return this.getToken(GQLParser.RIGHT_BRACKET_TILDE, 0);
	};

	insertElementPatternFiller() {
	    return this.getTypedRuleContext(InsertElementPatternFillerContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterInsertEdgeUndirected(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitInsertEdgeUndirected(this);
		}
	}


}



class InsertElementPatternFillerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_insertElementPatternFiller;
    }

	elementVariableDeclaration() {
	    return this.getTypedRuleContext(ElementVariableDeclarationContext,0);
	};

	labelAndPropertySetSpecification() {
	    return this.getTypedRuleContext(LabelAndPropertySetSpecificationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterInsertElementPatternFiller(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitInsertElementPatternFiller(this);
		}
	}


}



class LabelAndPropertySetSpecificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_labelAndPropertySetSpecification;
    }

	isOrColon() {
	    return this.getTypedRuleContext(IsOrColonContext,0);
	};

	labelSetSpecification() {
	    return this.getTypedRuleContext(LabelSetSpecificationContext,0);
	};

	elementPropertySpecification() {
	    return this.getTypedRuleContext(ElementPropertySpecificationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterLabelAndPropertySetSpecification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitLabelAndPropertySetSpecification(this);
		}
	}


}



class PathPatternPrefixContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_pathPatternPrefix;
    }

	pathModePrefix() {
	    return this.getTypedRuleContext(PathModePrefixContext,0);
	};

	pathSearchPrefix() {
	    return this.getTypedRuleContext(PathSearchPrefixContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterPathPatternPrefix(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitPathPatternPrefix(this);
		}
	}


}



class PathModePrefixContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_pathModePrefix;
    }

	pathMode() {
	    return this.getTypedRuleContext(PathModeContext,0);
	};

	pathOrPaths() {
	    return this.getTypedRuleContext(PathOrPathsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterPathModePrefix(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitPathModePrefix(this);
		}
	}


}



class PathModeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_pathMode;
    }

	WALK() {
	    return this.getToken(GQLParser.WALK, 0);
	};

	TRAIL() {
	    return this.getToken(GQLParser.TRAIL, 0);
	};

	SIMPLE() {
	    return this.getToken(GQLParser.SIMPLE, 0);
	};

	ACYCLIC() {
	    return this.getToken(GQLParser.ACYCLIC, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterPathMode(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitPathMode(this);
		}
	}


}



class PathSearchPrefixContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_pathSearchPrefix;
    }

	allPathSearch() {
	    return this.getTypedRuleContext(AllPathSearchContext,0);
	};

	anyPathSearch() {
	    return this.getTypedRuleContext(AnyPathSearchContext,0);
	};

	shortestPathSearch() {
	    return this.getTypedRuleContext(ShortestPathSearchContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterPathSearchPrefix(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitPathSearchPrefix(this);
		}
	}


}



class AllPathSearchContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_allPathSearch;
    }

	ALL() {
	    return this.getToken(GQLParser.ALL, 0);
	};

	pathMode() {
	    return this.getTypedRuleContext(PathModeContext,0);
	};

	pathOrPaths() {
	    return this.getTypedRuleContext(PathOrPathsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterAllPathSearch(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitAllPathSearch(this);
		}
	}


}



class PathOrPathsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_pathOrPaths;
    }

	PATH() {
	    return this.getToken(GQLParser.PATH, 0);
	};

	PATHS() {
	    return this.getToken(GQLParser.PATHS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterPathOrPaths(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitPathOrPaths(this);
		}
	}


}



class AnyPathSearchContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_anyPathSearch;
    }

	ANY() {
	    return this.getToken(GQLParser.ANY, 0);
	};

	numberOfPaths() {
	    return this.getTypedRuleContext(NumberOfPathsContext,0);
	};

	pathMode() {
	    return this.getTypedRuleContext(PathModeContext,0);
	};

	pathOrPaths() {
	    return this.getTypedRuleContext(PathOrPathsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterAnyPathSearch(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitAnyPathSearch(this);
		}
	}


}



class NumberOfPathsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_numberOfPaths;
    }

	nonNegativeIntegerSpecification() {
	    return this.getTypedRuleContext(NonNegativeIntegerSpecificationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterNumberOfPaths(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitNumberOfPaths(this);
		}
	}


}



class ShortestPathSearchContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_shortestPathSearch;
    }

	allShortestPathSearch() {
	    return this.getTypedRuleContext(AllShortestPathSearchContext,0);
	};

	anyShortestPathSearch() {
	    return this.getTypedRuleContext(AnyShortestPathSearchContext,0);
	};

	countedShortestPathSearch() {
	    return this.getTypedRuleContext(CountedShortestPathSearchContext,0);
	};

	countedShortestGroupSearch() {
	    return this.getTypedRuleContext(CountedShortestGroupSearchContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterShortestPathSearch(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitShortestPathSearch(this);
		}
	}


}



class AllShortestPathSearchContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_allShortestPathSearch;
    }

	ALL() {
	    return this.getToken(GQLParser.ALL, 0);
	};

	SHORTEST() {
	    return this.getToken(GQLParser.SHORTEST, 0);
	};

	pathMode() {
	    return this.getTypedRuleContext(PathModeContext,0);
	};

	pathOrPaths() {
	    return this.getTypedRuleContext(PathOrPathsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterAllShortestPathSearch(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitAllShortestPathSearch(this);
		}
	}


}



class AnyShortestPathSearchContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_anyShortestPathSearch;
    }

	ANY() {
	    return this.getToken(GQLParser.ANY, 0);
	};

	SHORTEST() {
	    return this.getToken(GQLParser.SHORTEST, 0);
	};

	pathMode() {
	    return this.getTypedRuleContext(PathModeContext,0);
	};

	pathOrPaths() {
	    return this.getTypedRuleContext(PathOrPathsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterAnyShortestPathSearch(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitAnyShortestPathSearch(this);
		}
	}


}



class CountedShortestPathSearchContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_countedShortestPathSearch;
    }

	SHORTEST() {
	    return this.getToken(GQLParser.SHORTEST, 0);
	};

	numberOfPaths() {
	    return this.getTypedRuleContext(NumberOfPathsContext,0);
	};

	pathMode() {
	    return this.getTypedRuleContext(PathModeContext,0);
	};

	pathOrPaths() {
	    return this.getTypedRuleContext(PathOrPathsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterCountedShortestPathSearch(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitCountedShortestPathSearch(this);
		}
	}


}



class CountedShortestGroupSearchContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_countedShortestGroupSearch;
    }

	SHORTEST() {
	    return this.getToken(GQLParser.SHORTEST, 0);
	};

	GROUP() {
	    return this.getToken(GQLParser.GROUP, 0);
	};

	GROUPS() {
	    return this.getToken(GQLParser.GROUPS, 0);
	};

	numberOfGroups() {
	    return this.getTypedRuleContext(NumberOfGroupsContext,0);
	};

	pathMode() {
	    return this.getTypedRuleContext(PathModeContext,0);
	};

	pathOrPaths() {
	    return this.getTypedRuleContext(PathOrPathsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterCountedShortestGroupSearch(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitCountedShortestGroupSearch(this);
		}
	}


}



class NumberOfGroupsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_numberOfGroups;
    }

	nonNegativeIntegerSpecification() {
	    return this.getTypedRuleContext(NonNegativeIntegerSpecificationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterNumberOfGroups(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitNumberOfGroups(this);
		}
	}


}



class PathPatternExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_pathPatternExpression;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class PpePatternUnionContext extends PathPatternExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	pathTerm = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PathTermContext);
	    } else {
	        return this.getTypedRuleContext(PathTermContext,i);
	    }
	};

	VERTICAL_BAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GQLParser.VERTICAL_BAR);
	    } else {
	        return this.getToken(GQLParser.VERTICAL_BAR, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterPpePatternUnion(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitPpePatternUnion(this);
		}
	}


}

GQLParser.PpePatternUnionContext = PpePatternUnionContext;

class PpePathTermContext extends PathPatternExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	pathTerm() {
	    return this.getTypedRuleContext(PathTermContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterPpePathTerm(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitPpePathTerm(this);
		}
	}


}

GQLParser.PpePathTermContext = PpePathTermContext;

class PpeMultisetAlternationContext extends PathPatternExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	pathTerm = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PathTermContext);
	    } else {
	        return this.getTypedRuleContext(PathTermContext,i);
	    }
	};

	MULTISET_ALTERNATION_OPERATOR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GQLParser.MULTISET_ALTERNATION_OPERATOR);
	    } else {
	        return this.getToken(GQLParser.MULTISET_ALTERNATION_OPERATOR, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterPpeMultisetAlternation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitPpeMultisetAlternation(this);
		}
	}


}

GQLParser.PpeMultisetAlternationContext = PpeMultisetAlternationContext;

class PathTermContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_pathTerm;
    }

	pathFactor = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PathFactorContext);
	    } else {
	        return this.getTypedRuleContext(PathFactorContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterPathTerm(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitPathTerm(this);
		}
	}


}



class PathFactorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_pathFactor;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class PfQuantifiedPathPrimaryContext extends PathFactorContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	pathPrimary() {
	    return this.getTypedRuleContext(PathPrimaryContext,0);
	};

	graphPatternQuantifier() {
	    return this.getTypedRuleContext(GraphPatternQuantifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterPfQuantifiedPathPrimary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitPfQuantifiedPathPrimary(this);
		}
	}


}

GQLParser.PfQuantifiedPathPrimaryContext = PfQuantifiedPathPrimaryContext;

class PfQuestionedPathPrimaryContext extends PathFactorContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	pathPrimary() {
	    return this.getTypedRuleContext(PathPrimaryContext,0);
	};

	QUESTION_MARK() {
	    return this.getToken(GQLParser.QUESTION_MARK, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterPfQuestionedPathPrimary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitPfQuestionedPathPrimary(this);
		}
	}


}

GQLParser.PfQuestionedPathPrimaryContext = PfQuestionedPathPrimaryContext;

class PfPathPrimaryContext extends PathFactorContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	pathPrimary() {
	    return this.getTypedRuleContext(PathPrimaryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterPfPathPrimary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitPfPathPrimary(this);
		}
	}


}

GQLParser.PfPathPrimaryContext = PfPathPrimaryContext;

class PathPrimaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_pathPrimary;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class PpParenthesizedPathPatternExpressionContext extends PathPrimaryContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	parenthesizedPathPatternExpression() {
	    return this.getTypedRuleContext(ParenthesizedPathPatternExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterPpParenthesizedPathPatternExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitPpParenthesizedPathPatternExpression(this);
		}
	}


}

GQLParser.PpParenthesizedPathPatternExpressionContext = PpParenthesizedPathPatternExpressionContext;

class PpElementPatternContext extends PathPrimaryContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	elementPattern() {
	    return this.getTypedRuleContext(ElementPatternContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterPpElementPattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitPpElementPattern(this);
		}
	}


}

GQLParser.PpElementPatternContext = PpElementPatternContext;

class PpSimplifiedPathPatternExpressionContext extends PathPrimaryContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	simplifiedPathPatternExpression() {
	    return this.getTypedRuleContext(SimplifiedPathPatternExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterPpSimplifiedPathPatternExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitPpSimplifiedPathPatternExpression(this);
		}
	}


}

GQLParser.PpSimplifiedPathPatternExpressionContext = PpSimplifiedPathPatternExpressionContext;

class ElementPatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_elementPattern;
    }

	nodePattern() {
	    return this.getTypedRuleContext(NodePatternContext,0);
	};

	edgePattern() {
	    return this.getTypedRuleContext(EdgePatternContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterElementPattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitElementPattern(this);
		}
	}


}



class NodePatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_nodePattern;
    }

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	elementPatternFiller() {
	    return this.getTypedRuleContext(ElementPatternFillerContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterNodePattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitNodePattern(this);
		}
	}


}



class ElementPatternFillerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_elementPatternFiller;
    }

	elementVariableDeclaration() {
	    return this.getTypedRuleContext(ElementVariableDeclarationContext,0);
	};

	isLabelExpression() {
	    return this.getTypedRuleContext(IsLabelExpressionContext,0);
	};

	elementPatternPredicate() {
	    return this.getTypedRuleContext(ElementPatternPredicateContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterElementPatternFiller(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitElementPatternFiller(this);
		}
	}


}



class ElementVariableDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_elementVariableDeclaration;
    }

	elementVariable() {
	    return this.getTypedRuleContext(ElementVariableContext,0);
	};

	TEMP() {
	    return this.getToken(GQLParser.TEMP, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterElementVariableDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitElementVariableDeclaration(this);
		}
	}


}



class IsLabelExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_isLabelExpression;
    }

	isOrColon() {
	    return this.getTypedRuleContext(IsOrColonContext,0);
	};

	labelExpression() {
	    return this.getTypedRuleContext(LabelExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterIsLabelExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitIsLabelExpression(this);
		}
	}


}



class IsOrColonContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_isOrColon;
    }

	IS() {
	    return this.getToken(GQLParser.IS, 0);
	};

	COLON() {
	    return this.getToken(GQLParser.COLON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterIsOrColon(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitIsOrColon(this);
		}
	}


}



class ElementPatternPredicateContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_elementPatternPredicate;
    }

	elementPatternWhereClause() {
	    return this.getTypedRuleContext(ElementPatternWhereClauseContext,0);
	};

	elementPropertySpecification() {
	    return this.getTypedRuleContext(ElementPropertySpecificationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterElementPatternPredicate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitElementPatternPredicate(this);
		}
	}


}



class ElementPatternWhereClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_elementPatternWhereClause;
    }

	WHERE() {
	    return this.getToken(GQLParser.WHERE, 0);
	};

	searchCondition() {
	    return this.getTypedRuleContext(SearchConditionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterElementPatternWhereClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitElementPatternWhereClause(this);
		}
	}


}



class ElementPropertySpecificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_elementPropertySpecification;
    }

	LEFT_BRACE() {
	    return this.getToken(GQLParser.LEFT_BRACE, 0);
	};

	propertyKeyValuePairList() {
	    return this.getTypedRuleContext(PropertyKeyValuePairListContext,0);
	};

	RIGHT_BRACE() {
	    return this.getToken(GQLParser.RIGHT_BRACE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterElementPropertySpecification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitElementPropertySpecification(this);
		}
	}


}



class PropertyKeyValuePairListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_propertyKeyValuePairList;
    }

	propertyKeyValuePair = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PropertyKeyValuePairContext);
	    } else {
	        return this.getTypedRuleContext(PropertyKeyValuePairContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GQLParser.COMMA);
	    } else {
	        return this.getToken(GQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterPropertyKeyValuePairList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitPropertyKeyValuePairList(this);
		}
	}


}



class PropertyKeyValuePairContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_propertyKeyValuePair;
    }

	propertyName() {
	    return this.getTypedRuleContext(PropertyNameContext,0);
	};

	COLON() {
	    return this.getToken(GQLParser.COLON, 0);
	};

	valueExpression() {
	    return this.getTypedRuleContext(ValueExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterPropertyKeyValuePair(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitPropertyKeyValuePair(this);
		}
	}


}



class EdgePatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_edgePattern;
    }

	fullEdgePattern() {
	    return this.getTypedRuleContext(FullEdgePatternContext,0);
	};

	abbreviatedEdgePattern() {
	    return this.getTypedRuleContext(AbbreviatedEdgePatternContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterEdgePattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitEdgePattern(this);
		}
	}


}



class FullEdgePatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_fullEdgePattern;
    }

	fullEdgePointingLeft() {
	    return this.getTypedRuleContext(FullEdgePointingLeftContext,0);
	};

	fullEdgeUndirected() {
	    return this.getTypedRuleContext(FullEdgeUndirectedContext,0);
	};

	fullEdgePointingRight() {
	    return this.getTypedRuleContext(FullEdgePointingRightContext,0);
	};

	fullEdgeLeftOrUndirected() {
	    return this.getTypedRuleContext(FullEdgeLeftOrUndirectedContext,0);
	};

	fullEdgeUndirectedOrRight() {
	    return this.getTypedRuleContext(FullEdgeUndirectedOrRightContext,0);
	};

	fullEdgeLeftOrRight() {
	    return this.getTypedRuleContext(FullEdgeLeftOrRightContext,0);
	};

	fullEdgeAnyDirection() {
	    return this.getTypedRuleContext(FullEdgeAnyDirectionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterFullEdgePattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitFullEdgePattern(this);
		}
	}


}



class FullEdgePointingLeftContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_fullEdgePointingLeft;
    }

	LEFT_ARROW_BRACKET() {
	    return this.getToken(GQLParser.LEFT_ARROW_BRACKET, 0);
	};

	elementPatternFiller() {
	    return this.getTypedRuleContext(ElementPatternFillerContext,0);
	};

	RIGHT_BRACKET_MINUS() {
	    return this.getToken(GQLParser.RIGHT_BRACKET_MINUS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterFullEdgePointingLeft(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitFullEdgePointingLeft(this);
		}
	}


}



class FullEdgeUndirectedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_fullEdgeUndirected;
    }

	TILDE_LEFT_BRACKET() {
	    return this.getToken(GQLParser.TILDE_LEFT_BRACKET, 0);
	};

	elementPatternFiller() {
	    return this.getTypedRuleContext(ElementPatternFillerContext,0);
	};

	RIGHT_BRACKET_TILDE() {
	    return this.getToken(GQLParser.RIGHT_BRACKET_TILDE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterFullEdgeUndirected(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitFullEdgeUndirected(this);
		}
	}


}



class FullEdgePointingRightContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_fullEdgePointingRight;
    }

	MINUS_LEFT_BRACKET() {
	    return this.getToken(GQLParser.MINUS_LEFT_BRACKET, 0);
	};

	elementPatternFiller() {
	    return this.getTypedRuleContext(ElementPatternFillerContext,0);
	};

	BRACKET_RIGHT_ARROW() {
	    return this.getToken(GQLParser.BRACKET_RIGHT_ARROW, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterFullEdgePointingRight(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitFullEdgePointingRight(this);
		}
	}


}



class FullEdgeLeftOrUndirectedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_fullEdgeLeftOrUndirected;
    }

	LEFT_ARROW_TILDE_BRACKET() {
	    return this.getToken(GQLParser.LEFT_ARROW_TILDE_BRACKET, 0);
	};

	elementPatternFiller() {
	    return this.getTypedRuleContext(ElementPatternFillerContext,0);
	};

	RIGHT_BRACKET_TILDE() {
	    return this.getToken(GQLParser.RIGHT_BRACKET_TILDE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterFullEdgeLeftOrUndirected(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitFullEdgeLeftOrUndirected(this);
		}
	}


}



class FullEdgeUndirectedOrRightContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_fullEdgeUndirectedOrRight;
    }

	TILDE_LEFT_BRACKET() {
	    return this.getToken(GQLParser.TILDE_LEFT_BRACKET, 0);
	};

	elementPatternFiller() {
	    return this.getTypedRuleContext(ElementPatternFillerContext,0);
	};

	BRACKET_TILDE_RIGHT_ARROW() {
	    return this.getToken(GQLParser.BRACKET_TILDE_RIGHT_ARROW, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterFullEdgeUndirectedOrRight(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitFullEdgeUndirectedOrRight(this);
		}
	}


}



class FullEdgeLeftOrRightContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_fullEdgeLeftOrRight;
    }

	LEFT_ARROW_BRACKET() {
	    return this.getToken(GQLParser.LEFT_ARROW_BRACKET, 0);
	};

	elementPatternFiller() {
	    return this.getTypedRuleContext(ElementPatternFillerContext,0);
	};

	BRACKET_RIGHT_ARROW() {
	    return this.getToken(GQLParser.BRACKET_RIGHT_ARROW, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterFullEdgeLeftOrRight(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitFullEdgeLeftOrRight(this);
		}
	}


}



class FullEdgeAnyDirectionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_fullEdgeAnyDirection;
    }

	MINUS_LEFT_BRACKET() {
	    return this.getToken(GQLParser.MINUS_LEFT_BRACKET, 0);
	};

	elementPatternFiller() {
	    return this.getTypedRuleContext(ElementPatternFillerContext,0);
	};

	RIGHT_BRACKET_MINUS() {
	    return this.getToken(GQLParser.RIGHT_BRACKET_MINUS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterFullEdgeAnyDirection(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitFullEdgeAnyDirection(this);
		}
	}


}



class AbbreviatedEdgePatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_abbreviatedEdgePattern;
    }

	LEFT_ARROW() {
	    return this.getToken(GQLParser.LEFT_ARROW, 0);
	};

	TILDE() {
	    return this.getToken(GQLParser.TILDE, 0);
	};

	RIGHT_ARROW() {
	    return this.getToken(GQLParser.RIGHT_ARROW, 0);
	};

	LEFT_ARROW_TILDE() {
	    return this.getToken(GQLParser.LEFT_ARROW_TILDE, 0);
	};

	TILDE_RIGHT_ARROW() {
	    return this.getToken(GQLParser.TILDE_RIGHT_ARROW, 0);
	};

	LEFT_MINUS_RIGHT() {
	    return this.getToken(GQLParser.LEFT_MINUS_RIGHT, 0);
	};

	MINUS_SIGN() {
	    return this.getToken(GQLParser.MINUS_SIGN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterAbbreviatedEdgePattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitAbbreviatedEdgePattern(this);
		}
	}


}



class ParenthesizedPathPatternExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_parenthesizedPathPatternExpression;
    }

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	pathPatternExpression() {
	    return this.getTypedRuleContext(PathPatternExpressionContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	subpathVariableDeclaration() {
	    return this.getTypedRuleContext(SubpathVariableDeclarationContext,0);
	};

	pathModePrefix() {
	    return this.getTypedRuleContext(PathModePrefixContext,0);
	};

	parenthesizedPathPatternWhereClause() {
	    return this.getTypedRuleContext(ParenthesizedPathPatternWhereClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterParenthesizedPathPatternExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitParenthesizedPathPatternExpression(this);
		}
	}


}



class SubpathVariableDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_subpathVariableDeclaration;
    }

	subpathVariable() {
	    return this.getTypedRuleContext(SubpathVariableContext,0);
	};

	EQUALS_OPERATOR() {
	    return this.getToken(GQLParser.EQUALS_OPERATOR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterSubpathVariableDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitSubpathVariableDeclaration(this);
		}
	}


}



class ParenthesizedPathPatternWhereClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_parenthesizedPathPatternWhereClause;
    }

	WHERE() {
	    return this.getToken(GQLParser.WHERE, 0);
	};

	searchCondition() {
	    return this.getTypedRuleContext(SearchConditionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterParenthesizedPathPatternWhereClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitParenthesizedPathPatternWhereClause(this);
		}
	}


}



class LabelExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_labelExpression;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class LabelExpressionNegationContext extends LabelExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	EXCLAMATION_MARK() {
	    return this.getToken(GQLParser.EXCLAMATION_MARK, 0);
	};

	labelExpression() {
	    return this.getTypedRuleContext(LabelExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterLabelExpressionNegation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitLabelExpressionNegation(this);
		}
	}


}

GQLParser.LabelExpressionNegationContext = LabelExpressionNegationContext;

class LabelExpressionDisjunctionContext extends LabelExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	labelExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LabelExpressionContext);
	    } else {
	        return this.getTypedRuleContext(LabelExpressionContext,i);
	    }
	};

	VERTICAL_BAR() {
	    return this.getToken(GQLParser.VERTICAL_BAR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterLabelExpressionDisjunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitLabelExpressionDisjunction(this);
		}
	}


}

GQLParser.LabelExpressionDisjunctionContext = LabelExpressionDisjunctionContext;

class LabelExpressionParenthesizedContext extends LabelExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	labelExpression() {
	    return this.getTypedRuleContext(LabelExpressionContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterLabelExpressionParenthesized(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitLabelExpressionParenthesized(this);
		}
	}


}

GQLParser.LabelExpressionParenthesizedContext = LabelExpressionParenthesizedContext;

class LabelExpressionWildcardContext extends LabelExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	PERCENT() {
	    return this.getToken(GQLParser.PERCENT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterLabelExpressionWildcard(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitLabelExpressionWildcard(this);
		}
	}


}

GQLParser.LabelExpressionWildcardContext = LabelExpressionWildcardContext;

class LabelExpressionConjunctionContext extends LabelExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	labelExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LabelExpressionContext);
	    } else {
	        return this.getTypedRuleContext(LabelExpressionContext,i);
	    }
	};

	AMPERSAND() {
	    return this.getToken(GQLParser.AMPERSAND, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterLabelExpressionConjunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitLabelExpressionConjunction(this);
		}
	}


}

GQLParser.LabelExpressionConjunctionContext = LabelExpressionConjunctionContext;

class LabelExpressionNameContext extends LabelExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	labelName() {
	    return this.getTypedRuleContext(LabelNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterLabelExpressionName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitLabelExpressionName(this);
		}
	}


}

GQLParser.LabelExpressionNameContext = LabelExpressionNameContext;

class PathVariableReferenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_pathVariableReference;
    }

	bindingVariableReference() {
	    return this.getTypedRuleContext(BindingVariableReferenceContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterPathVariableReference(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitPathVariableReference(this);
		}
	}


}



class ElementVariableReferenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_elementVariableReference;
    }

	bindingVariableReference() {
	    return this.getTypedRuleContext(BindingVariableReferenceContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterElementVariableReference(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitElementVariableReference(this);
		}
	}


}



class GraphPatternQuantifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_graphPatternQuantifier;
    }

	ASTERISK() {
	    return this.getToken(GQLParser.ASTERISK, 0);
	};

	PLUS_SIGN() {
	    return this.getToken(GQLParser.PLUS_SIGN, 0);
	};

	fixedQuantifier() {
	    return this.getTypedRuleContext(FixedQuantifierContext,0);
	};

	generalQuantifier() {
	    return this.getTypedRuleContext(GeneralQuantifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterGraphPatternQuantifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitGraphPatternQuantifier(this);
		}
	}


}



class FixedQuantifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_fixedQuantifier;
    }

	LEFT_BRACE() {
	    return this.getToken(GQLParser.LEFT_BRACE, 0);
	};

	unsignedInteger() {
	    return this.getTypedRuleContext(UnsignedIntegerContext,0);
	};

	RIGHT_BRACE() {
	    return this.getToken(GQLParser.RIGHT_BRACE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterFixedQuantifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitFixedQuantifier(this);
		}
	}


}



class GeneralQuantifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_generalQuantifier;
    }

	LEFT_BRACE() {
	    return this.getToken(GQLParser.LEFT_BRACE, 0);
	};

	COMMA() {
	    return this.getToken(GQLParser.COMMA, 0);
	};

	RIGHT_BRACE() {
	    return this.getToken(GQLParser.RIGHT_BRACE, 0);
	};

	lowerBound() {
	    return this.getTypedRuleContext(LowerBoundContext,0);
	};

	upperBound() {
	    return this.getTypedRuleContext(UpperBoundContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterGeneralQuantifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitGeneralQuantifier(this);
		}
	}


}



class LowerBoundContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_lowerBound;
    }

	unsignedInteger() {
	    return this.getTypedRuleContext(UnsignedIntegerContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterLowerBound(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitLowerBound(this);
		}
	}


}



class UpperBoundContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_upperBound;
    }

	unsignedInteger() {
	    return this.getTypedRuleContext(UnsignedIntegerContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterUpperBound(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitUpperBound(this);
		}
	}


}



class SimplifiedPathPatternExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_simplifiedPathPatternExpression;
    }

	simplifiedDefaultingLeft() {
	    return this.getTypedRuleContext(SimplifiedDefaultingLeftContext,0);
	};

	simplifiedDefaultingUndirected() {
	    return this.getTypedRuleContext(SimplifiedDefaultingUndirectedContext,0);
	};

	simplifiedDefaultingRight() {
	    return this.getTypedRuleContext(SimplifiedDefaultingRightContext,0);
	};

	simplifiedDefaultingLeftOrUndirected() {
	    return this.getTypedRuleContext(SimplifiedDefaultingLeftOrUndirectedContext,0);
	};

	simplifiedDefaultingUndirectedOrRight() {
	    return this.getTypedRuleContext(SimplifiedDefaultingUndirectedOrRightContext,0);
	};

	simplifiedDefaultingLeftOrRight() {
	    return this.getTypedRuleContext(SimplifiedDefaultingLeftOrRightContext,0);
	};

	simplifiedDefaultingAnyDirection() {
	    return this.getTypedRuleContext(SimplifiedDefaultingAnyDirectionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterSimplifiedPathPatternExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitSimplifiedPathPatternExpression(this);
		}
	}


}



class SimplifiedDefaultingLeftContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_simplifiedDefaultingLeft;
    }

	LEFT_MINUS_SLASH() {
	    return this.getToken(GQLParser.LEFT_MINUS_SLASH, 0);
	};

	simplifiedContents() {
	    return this.getTypedRuleContext(SimplifiedContentsContext,0);
	};

	SLASH_MINUS() {
	    return this.getToken(GQLParser.SLASH_MINUS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterSimplifiedDefaultingLeft(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitSimplifiedDefaultingLeft(this);
		}
	}


}



class SimplifiedDefaultingUndirectedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_simplifiedDefaultingUndirected;
    }

	TILDE_SLASH() {
	    return this.getToken(GQLParser.TILDE_SLASH, 0);
	};

	simplifiedContents() {
	    return this.getTypedRuleContext(SimplifiedContentsContext,0);
	};

	SLASH_TILDE() {
	    return this.getToken(GQLParser.SLASH_TILDE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterSimplifiedDefaultingUndirected(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitSimplifiedDefaultingUndirected(this);
		}
	}


}



class SimplifiedDefaultingRightContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_simplifiedDefaultingRight;
    }

	MINUS_SLASH() {
	    return this.getToken(GQLParser.MINUS_SLASH, 0);
	};

	simplifiedContents() {
	    return this.getTypedRuleContext(SimplifiedContentsContext,0);
	};

	SLASH_MINUS_RIGHT() {
	    return this.getToken(GQLParser.SLASH_MINUS_RIGHT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterSimplifiedDefaultingRight(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitSimplifiedDefaultingRight(this);
		}
	}


}



class SimplifiedDefaultingLeftOrUndirectedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_simplifiedDefaultingLeftOrUndirected;
    }

	LEFT_TILDE_SLASH() {
	    return this.getToken(GQLParser.LEFT_TILDE_SLASH, 0);
	};

	simplifiedContents() {
	    return this.getTypedRuleContext(SimplifiedContentsContext,0);
	};

	SLASH_TILDE() {
	    return this.getToken(GQLParser.SLASH_TILDE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterSimplifiedDefaultingLeftOrUndirected(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitSimplifiedDefaultingLeftOrUndirected(this);
		}
	}


}



class SimplifiedDefaultingUndirectedOrRightContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_simplifiedDefaultingUndirectedOrRight;
    }

	TILDE_SLASH() {
	    return this.getToken(GQLParser.TILDE_SLASH, 0);
	};

	simplifiedContents() {
	    return this.getTypedRuleContext(SimplifiedContentsContext,0);
	};

	SLASH_TILDE_RIGHT() {
	    return this.getToken(GQLParser.SLASH_TILDE_RIGHT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterSimplifiedDefaultingUndirectedOrRight(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitSimplifiedDefaultingUndirectedOrRight(this);
		}
	}


}



class SimplifiedDefaultingLeftOrRightContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_simplifiedDefaultingLeftOrRight;
    }

	LEFT_MINUS_SLASH() {
	    return this.getToken(GQLParser.LEFT_MINUS_SLASH, 0);
	};

	simplifiedContents() {
	    return this.getTypedRuleContext(SimplifiedContentsContext,0);
	};

	SLASH_MINUS_RIGHT() {
	    return this.getToken(GQLParser.SLASH_MINUS_RIGHT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterSimplifiedDefaultingLeftOrRight(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitSimplifiedDefaultingLeftOrRight(this);
		}
	}


}



class SimplifiedDefaultingAnyDirectionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_simplifiedDefaultingAnyDirection;
    }

	MINUS_SLASH() {
	    return this.getToken(GQLParser.MINUS_SLASH, 0);
	};

	simplifiedContents() {
	    return this.getTypedRuleContext(SimplifiedContentsContext,0);
	};

	SLASH_MINUS() {
	    return this.getToken(GQLParser.SLASH_MINUS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterSimplifiedDefaultingAnyDirection(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitSimplifiedDefaultingAnyDirection(this);
		}
	}


}



class SimplifiedContentsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_simplifiedContents;
    }

	simplifiedTerm() {
	    return this.getTypedRuleContext(SimplifiedTermContext,0);
	};

	simplifiedPathUnion() {
	    return this.getTypedRuleContext(SimplifiedPathUnionContext,0);
	};

	simplifiedMultisetAlternation() {
	    return this.getTypedRuleContext(SimplifiedMultisetAlternationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterSimplifiedContents(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitSimplifiedContents(this);
		}
	}


}



class SimplifiedPathUnionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_simplifiedPathUnion;
    }

	simplifiedTerm = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SimplifiedTermContext);
	    } else {
	        return this.getTypedRuleContext(SimplifiedTermContext,i);
	    }
	};

	VERTICAL_BAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GQLParser.VERTICAL_BAR);
	    } else {
	        return this.getToken(GQLParser.VERTICAL_BAR, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterSimplifiedPathUnion(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitSimplifiedPathUnion(this);
		}
	}


}



class SimplifiedMultisetAlternationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_simplifiedMultisetAlternation;
    }

	simplifiedTerm = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SimplifiedTermContext);
	    } else {
	        return this.getTypedRuleContext(SimplifiedTermContext,i);
	    }
	};

	MULTISET_ALTERNATION_OPERATOR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GQLParser.MULTISET_ALTERNATION_OPERATOR);
	    } else {
	        return this.getToken(GQLParser.MULTISET_ALTERNATION_OPERATOR, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterSimplifiedMultisetAlternation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitSimplifiedMultisetAlternation(this);
		}
	}


}



class SimplifiedTermContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_simplifiedTerm;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class SimplifiedFactorLowLabelContext extends SimplifiedTermContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	simplifiedFactorLow() {
	    return this.getTypedRuleContext(SimplifiedFactorLowContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterSimplifiedFactorLowLabel(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitSimplifiedFactorLowLabel(this);
		}
	}


}

GQLParser.SimplifiedFactorLowLabelContext = SimplifiedFactorLowLabelContext;

class SimplifiedConcatenationLabelContext extends SimplifiedTermContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	simplifiedTerm() {
	    return this.getTypedRuleContext(SimplifiedTermContext,0);
	};

	simplifiedFactorLow() {
	    return this.getTypedRuleContext(SimplifiedFactorLowContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterSimplifiedConcatenationLabel(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitSimplifiedConcatenationLabel(this);
		}
	}


}

GQLParser.SimplifiedConcatenationLabelContext = SimplifiedConcatenationLabelContext;

class SimplifiedFactorLowContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_simplifiedFactorLow;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class SimplifiedConjunctionLabelContext extends SimplifiedFactorLowContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	simplifiedFactorLow() {
	    return this.getTypedRuleContext(SimplifiedFactorLowContext,0);
	};

	AMPERSAND() {
	    return this.getToken(GQLParser.AMPERSAND, 0);
	};

	simplifiedFactorHigh() {
	    return this.getTypedRuleContext(SimplifiedFactorHighContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterSimplifiedConjunctionLabel(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitSimplifiedConjunctionLabel(this);
		}
	}


}

GQLParser.SimplifiedConjunctionLabelContext = SimplifiedConjunctionLabelContext;

class SimplifiedFactorHighLabelContext extends SimplifiedFactorLowContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	simplifiedFactorHigh() {
	    return this.getTypedRuleContext(SimplifiedFactorHighContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterSimplifiedFactorHighLabel(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitSimplifiedFactorHighLabel(this);
		}
	}


}

GQLParser.SimplifiedFactorHighLabelContext = SimplifiedFactorHighLabelContext;

class SimplifiedFactorHighContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_simplifiedFactorHigh;
    }

	simplifiedTertiary() {
	    return this.getTypedRuleContext(SimplifiedTertiaryContext,0);
	};

	simplifiedQuantified() {
	    return this.getTypedRuleContext(SimplifiedQuantifiedContext,0);
	};

	simplifiedQuestioned() {
	    return this.getTypedRuleContext(SimplifiedQuestionedContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterSimplifiedFactorHigh(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitSimplifiedFactorHigh(this);
		}
	}


}



class SimplifiedQuantifiedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_simplifiedQuantified;
    }

	simplifiedTertiary() {
	    return this.getTypedRuleContext(SimplifiedTertiaryContext,0);
	};

	graphPatternQuantifier() {
	    return this.getTypedRuleContext(GraphPatternQuantifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterSimplifiedQuantified(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitSimplifiedQuantified(this);
		}
	}


}



class SimplifiedQuestionedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_simplifiedQuestioned;
    }

	simplifiedTertiary() {
	    return this.getTypedRuleContext(SimplifiedTertiaryContext,0);
	};

	QUESTION_MARK() {
	    return this.getToken(GQLParser.QUESTION_MARK, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterSimplifiedQuestioned(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitSimplifiedQuestioned(this);
		}
	}


}



class SimplifiedTertiaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_simplifiedTertiary;
    }

	simplifiedDirectionOverride() {
	    return this.getTypedRuleContext(SimplifiedDirectionOverrideContext,0);
	};

	simplifiedSecondary() {
	    return this.getTypedRuleContext(SimplifiedSecondaryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterSimplifiedTertiary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitSimplifiedTertiary(this);
		}
	}


}



class SimplifiedDirectionOverrideContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_simplifiedDirectionOverride;
    }

	simplifiedOverrideLeft() {
	    return this.getTypedRuleContext(SimplifiedOverrideLeftContext,0);
	};

	simplifiedOverrideUndirected() {
	    return this.getTypedRuleContext(SimplifiedOverrideUndirectedContext,0);
	};

	simplifiedOverrideRight() {
	    return this.getTypedRuleContext(SimplifiedOverrideRightContext,0);
	};

	simplifiedOverrideLeftOrUndirected() {
	    return this.getTypedRuleContext(SimplifiedOverrideLeftOrUndirectedContext,0);
	};

	simplifiedOverrideUndirectedOrRight() {
	    return this.getTypedRuleContext(SimplifiedOverrideUndirectedOrRightContext,0);
	};

	simplifiedOverrideLeftOrRight() {
	    return this.getTypedRuleContext(SimplifiedOverrideLeftOrRightContext,0);
	};

	simplifiedOverrideAnyDirection() {
	    return this.getTypedRuleContext(SimplifiedOverrideAnyDirectionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterSimplifiedDirectionOverride(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitSimplifiedDirectionOverride(this);
		}
	}


}



class SimplifiedOverrideLeftContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_simplifiedOverrideLeft;
    }

	LEFT_ANGLE_BRACKET() {
	    return this.getToken(GQLParser.LEFT_ANGLE_BRACKET, 0);
	};

	simplifiedSecondary() {
	    return this.getTypedRuleContext(SimplifiedSecondaryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterSimplifiedOverrideLeft(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitSimplifiedOverrideLeft(this);
		}
	}


}



class SimplifiedOverrideUndirectedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_simplifiedOverrideUndirected;
    }

	TILDE() {
	    return this.getToken(GQLParser.TILDE, 0);
	};

	simplifiedSecondary() {
	    return this.getTypedRuleContext(SimplifiedSecondaryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterSimplifiedOverrideUndirected(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitSimplifiedOverrideUndirected(this);
		}
	}


}



class SimplifiedOverrideRightContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_simplifiedOverrideRight;
    }

	simplifiedSecondary() {
	    return this.getTypedRuleContext(SimplifiedSecondaryContext,0);
	};

	RIGHT_ANGLE_BRACKET() {
	    return this.getToken(GQLParser.RIGHT_ANGLE_BRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterSimplifiedOverrideRight(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitSimplifiedOverrideRight(this);
		}
	}


}



class SimplifiedOverrideLeftOrUndirectedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_simplifiedOverrideLeftOrUndirected;
    }

	LEFT_ARROW_TILDE() {
	    return this.getToken(GQLParser.LEFT_ARROW_TILDE, 0);
	};

	simplifiedSecondary() {
	    return this.getTypedRuleContext(SimplifiedSecondaryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterSimplifiedOverrideLeftOrUndirected(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitSimplifiedOverrideLeftOrUndirected(this);
		}
	}


}



class SimplifiedOverrideUndirectedOrRightContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_simplifiedOverrideUndirectedOrRight;
    }

	TILDE() {
	    return this.getToken(GQLParser.TILDE, 0);
	};

	simplifiedSecondary() {
	    return this.getTypedRuleContext(SimplifiedSecondaryContext,0);
	};

	RIGHT_ANGLE_BRACKET() {
	    return this.getToken(GQLParser.RIGHT_ANGLE_BRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterSimplifiedOverrideUndirectedOrRight(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitSimplifiedOverrideUndirectedOrRight(this);
		}
	}


}



class SimplifiedOverrideLeftOrRightContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_simplifiedOverrideLeftOrRight;
    }

	LEFT_ANGLE_BRACKET() {
	    return this.getToken(GQLParser.LEFT_ANGLE_BRACKET, 0);
	};

	simplifiedSecondary() {
	    return this.getTypedRuleContext(SimplifiedSecondaryContext,0);
	};

	RIGHT_ANGLE_BRACKET() {
	    return this.getToken(GQLParser.RIGHT_ANGLE_BRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterSimplifiedOverrideLeftOrRight(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitSimplifiedOverrideLeftOrRight(this);
		}
	}


}



class SimplifiedOverrideAnyDirectionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_simplifiedOverrideAnyDirection;
    }

	MINUS_SIGN() {
	    return this.getToken(GQLParser.MINUS_SIGN, 0);
	};

	simplifiedSecondary() {
	    return this.getTypedRuleContext(SimplifiedSecondaryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterSimplifiedOverrideAnyDirection(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitSimplifiedOverrideAnyDirection(this);
		}
	}


}



class SimplifiedSecondaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_simplifiedSecondary;
    }

	simplifiedPrimary() {
	    return this.getTypedRuleContext(SimplifiedPrimaryContext,0);
	};

	simplifiedNegation() {
	    return this.getTypedRuleContext(SimplifiedNegationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterSimplifiedSecondary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitSimplifiedSecondary(this);
		}
	}


}



class SimplifiedNegationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_simplifiedNegation;
    }

	EXCLAMATION_MARK() {
	    return this.getToken(GQLParser.EXCLAMATION_MARK, 0);
	};

	simplifiedPrimary() {
	    return this.getTypedRuleContext(SimplifiedPrimaryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterSimplifiedNegation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitSimplifiedNegation(this);
		}
	}


}



class SimplifiedPrimaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_simplifiedPrimary;
    }

	labelName() {
	    return this.getTypedRuleContext(LabelNameContext,0);
	};

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	simplifiedContents() {
	    return this.getTypedRuleContext(SimplifiedContentsContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterSimplifiedPrimary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitSimplifiedPrimary(this);
		}
	}


}



class WhereClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_whereClause;
    }

	WHERE() {
	    return this.getToken(GQLParser.WHERE, 0);
	};

	searchCondition() {
	    return this.getTypedRuleContext(SearchConditionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterWhereClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitWhereClause(this);
		}
	}


}



class YieldClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_yieldClause;
    }

	YIELD() {
	    return this.getToken(GQLParser.YIELD, 0);
	};

	yieldItemList() {
	    return this.getTypedRuleContext(YieldItemListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterYieldClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitYieldClause(this);
		}
	}


}



class YieldItemListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_yieldItemList;
    }

	yieldItem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(YieldItemContext);
	    } else {
	        return this.getTypedRuleContext(YieldItemContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GQLParser.COMMA);
	    } else {
	        return this.getToken(GQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterYieldItemList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitYieldItemList(this);
		}
	}


}



class YieldItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_yieldItem;
    }

	yieldItemName() {
	    return this.getTypedRuleContext(YieldItemNameContext,0);
	};

	yieldItemAlias() {
	    return this.getTypedRuleContext(YieldItemAliasContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterYieldItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitYieldItem(this);
		}
	}


}



class YieldItemNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_yieldItemName;
    }

	fieldName() {
	    return this.getTypedRuleContext(FieldNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterYieldItemName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitYieldItemName(this);
		}
	}


}



class YieldItemAliasContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_yieldItemAlias;
    }

	AS() {
	    return this.getToken(GQLParser.AS, 0);
	};

	bindingVariable() {
	    return this.getTypedRuleContext(BindingVariableContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterYieldItemAlias(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitYieldItemAlias(this);
		}
	}


}



class GroupByClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_groupByClause;
    }

	GROUP() {
	    return this.getToken(GQLParser.GROUP, 0);
	};

	BY() {
	    return this.getToken(GQLParser.BY, 0);
	};

	groupingElementList() {
	    return this.getTypedRuleContext(GroupingElementListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterGroupByClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitGroupByClause(this);
		}
	}


}



class GroupingElementListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_groupingElementList;
    }

	groupingElement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(GroupingElementContext);
	    } else {
	        return this.getTypedRuleContext(GroupingElementContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GQLParser.COMMA);
	    } else {
	        return this.getToken(GQLParser.COMMA, i);
	    }
	};


	emptyGroupingSet() {
	    return this.getTypedRuleContext(EmptyGroupingSetContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterGroupingElementList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitGroupingElementList(this);
		}
	}


}



class GroupingElementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_groupingElement;
    }

	bindingVariableReference() {
	    return this.getTypedRuleContext(BindingVariableReferenceContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterGroupingElement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitGroupingElement(this);
		}
	}


}



class EmptyGroupingSetContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_emptyGroupingSet;
    }

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterEmptyGroupingSet(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitEmptyGroupingSet(this);
		}
	}


}



class OrderByClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_orderByClause;
    }

	ORDER() {
	    return this.getToken(GQLParser.ORDER, 0);
	};

	BY() {
	    return this.getToken(GQLParser.BY, 0);
	};

	sortSpecificationList() {
	    return this.getTypedRuleContext(SortSpecificationListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterOrderByClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitOrderByClause(this);
		}
	}


}



class SortSpecificationListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_sortSpecificationList;
    }

	sortSpecification = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SortSpecificationContext);
	    } else {
	        return this.getTypedRuleContext(SortSpecificationContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GQLParser.COMMA);
	    } else {
	        return this.getToken(GQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterSortSpecificationList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitSortSpecificationList(this);
		}
	}


}



class SortSpecificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_sortSpecification;
    }

	sortKey() {
	    return this.getTypedRuleContext(SortKeyContext,0);
	};

	orderingSpecification() {
	    return this.getTypedRuleContext(OrderingSpecificationContext,0);
	};

	nullOrdering() {
	    return this.getTypedRuleContext(NullOrderingContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterSortSpecification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitSortSpecification(this);
		}
	}


}



class SortKeyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_sortKey;
    }

	aggregatingValueExpression() {
	    return this.getTypedRuleContext(AggregatingValueExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterSortKey(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitSortKey(this);
		}
	}


}



class OrderingSpecificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_orderingSpecification;
    }

	ASC() {
	    return this.getToken(GQLParser.ASC, 0);
	};

	ASCENDING() {
	    return this.getToken(GQLParser.ASCENDING, 0);
	};

	DESC() {
	    return this.getToken(GQLParser.DESC, 0);
	};

	DESCENDING() {
	    return this.getToken(GQLParser.DESCENDING, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterOrderingSpecification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitOrderingSpecification(this);
		}
	}


}



class NullOrderingContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_nullOrdering;
    }

	NULLS() {
	    return this.getToken(GQLParser.NULLS, 0);
	};

	FIRST() {
	    return this.getToken(GQLParser.FIRST, 0);
	};

	LAST() {
	    return this.getToken(GQLParser.LAST, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterNullOrdering(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitNullOrdering(this);
		}
	}


}



class LimitClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_limitClause;
    }

	LIMIT() {
	    return this.getToken(GQLParser.LIMIT, 0);
	};

	nonNegativeIntegerSpecification() {
	    return this.getTypedRuleContext(NonNegativeIntegerSpecificationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterLimitClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitLimitClause(this);
		}
	}


}



class OffsetClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_offsetClause;
    }

	offsetSynonym() {
	    return this.getTypedRuleContext(OffsetSynonymContext,0);
	};

	nonNegativeIntegerSpecification() {
	    return this.getTypedRuleContext(NonNegativeIntegerSpecificationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterOffsetClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitOffsetClause(this);
		}
	}


}



class OffsetSynonymContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_offsetSynonym;
    }

	OFFSET() {
	    return this.getToken(GQLParser.OFFSET, 0);
	};

	SKIP_RESERVED_WORD() {
	    return this.getToken(GQLParser.SKIP_RESERVED_WORD, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterOffsetSynonym(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitOffsetSynonym(this);
		}
	}


}



class SchemaReferenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_schemaReference;
    }

	absoluteCatalogSchemaReference() {
	    return this.getTypedRuleContext(AbsoluteCatalogSchemaReferenceContext,0);
	};

	relativeCatalogSchemaReference() {
	    return this.getTypedRuleContext(RelativeCatalogSchemaReferenceContext,0);
	};

	referenceParameterSpecification() {
	    return this.getTypedRuleContext(ReferenceParameterSpecificationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterSchemaReference(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitSchemaReference(this);
		}
	}


}



class AbsoluteCatalogSchemaReferenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_absoluteCatalogSchemaReference;
    }

	SOLIDUS() {
	    return this.getToken(GQLParser.SOLIDUS, 0);
	};

	absoluteDirectoryPath() {
	    return this.getTypedRuleContext(AbsoluteDirectoryPathContext,0);
	};

	schemaName() {
	    return this.getTypedRuleContext(SchemaNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterAbsoluteCatalogSchemaReference(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitAbsoluteCatalogSchemaReference(this);
		}
	}


}



class CatalogSchemaParentAndNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_catalogSchemaParentAndName;
    }

	absoluteDirectoryPath() {
	    return this.getTypedRuleContext(AbsoluteDirectoryPathContext,0);
	};

	schemaName() {
	    return this.getTypedRuleContext(SchemaNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterCatalogSchemaParentAndName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitCatalogSchemaParentAndName(this);
		}
	}


}



class RelativeCatalogSchemaReferenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_relativeCatalogSchemaReference;
    }

	predefinedSchemaReference() {
	    return this.getTypedRuleContext(PredefinedSchemaReferenceContext,0);
	};

	relativeDirectoryPath() {
	    return this.getTypedRuleContext(RelativeDirectoryPathContext,0);
	};

	schemaName() {
	    return this.getTypedRuleContext(SchemaNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterRelativeCatalogSchemaReference(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitRelativeCatalogSchemaReference(this);
		}
	}


}



class PredefinedSchemaReferenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_predefinedSchemaReference;
    }

	HOME_SCHEMA() {
	    return this.getToken(GQLParser.HOME_SCHEMA, 0);
	};

	CURRENT_SCHEMA() {
	    return this.getToken(GQLParser.CURRENT_SCHEMA, 0);
	};

	PERIOD() {
	    return this.getToken(GQLParser.PERIOD, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterPredefinedSchemaReference(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitPredefinedSchemaReference(this);
		}
	}


}



class AbsoluteDirectoryPathContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_absoluteDirectoryPath;
    }

	SOLIDUS() {
	    return this.getToken(GQLParser.SOLIDUS, 0);
	};

	simpleDirectoryPath() {
	    return this.getTypedRuleContext(SimpleDirectoryPathContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterAbsoluteDirectoryPath(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitAbsoluteDirectoryPath(this);
		}
	}


}



class RelativeDirectoryPathContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_relativeDirectoryPath;
    }

	DOUBLE_PERIOD = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GQLParser.DOUBLE_PERIOD);
	    } else {
	        return this.getToken(GQLParser.DOUBLE_PERIOD, i);
	    }
	};


	SOLIDUS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GQLParser.SOLIDUS);
	    } else {
	        return this.getToken(GQLParser.SOLIDUS, i);
	    }
	};


	simpleDirectoryPath() {
	    return this.getTypedRuleContext(SimpleDirectoryPathContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterRelativeDirectoryPath(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitRelativeDirectoryPath(this);
		}
	}


}



class SimpleDirectoryPathContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_simpleDirectoryPath;
    }

	directoryName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DirectoryNameContext);
	    } else {
	        return this.getTypedRuleContext(DirectoryNameContext,i);
	    }
	};

	SOLIDUS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GQLParser.SOLIDUS);
	    } else {
	        return this.getToken(GQLParser.SOLIDUS, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterSimpleDirectoryPath(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitSimpleDirectoryPath(this);
		}
	}


}



class GraphReferenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_graphReference;
    }

	catalogObjectParentReference() {
	    return this.getTypedRuleContext(CatalogObjectParentReferenceContext,0);
	};

	graphName() {
	    return this.getTypedRuleContext(GraphNameContext,0);
	};

	delimitedGraphName() {
	    return this.getTypedRuleContext(DelimitedGraphNameContext,0);
	};

	homeGraph() {
	    return this.getTypedRuleContext(HomeGraphContext,0);
	};

	referenceParameterSpecification() {
	    return this.getTypedRuleContext(ReferenceParameterSpecificationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterGraphReference(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitGraphReference(this);
		}
	}


}



class CatalogGraphParentAndNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_catalogGraphParentAndName;
    }

	graphName() {
	    return this.getTypedRuleContext(GraphNameContext,0);
	};

	catalogObjectParentReference() {
	    return this.getTypedRuleContext(CatalogObjectParentReferenceContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterCatalogGraphParentAndName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitCatalogGraphParentAndName(this);
		}
	}


}



class HomeGraphContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_homeGraph;
    }

	HOME_PROPERTY_GRAPH() {
	    return this.getToken(GQLParser.HOME_PROPERTY_GRAPH, 0);
	};

	HOME_GRAPH() {
	    return this.getToken(GQLParser.HOME_GRAPH, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterHomeGraph(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitHomeGraph(this);
		}
	}


}



class GraphTypeReferenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_graphTypeReference;
    }

	catalogGraphTypeParentAndName() {
	    return this.getTypedRuleContext(CatalogGraphTypeParentAndNameContext,0);
	};

	referenceParameterSpecification() {
	    return this.getTypedRuleContext(ReferenceParameterSpecificationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterGraphTypeReference(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitGraphTypeReference(this);
		}
	}


}



class CatalogGraphTypeParentAndNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_catalogGraphTypeParentAndName;
    }

	graphTypeName() {
	    return this.getTypedRuleContext(GraphTypeNameContext,0);
	};

	catalogObjectParentReference() {
	    return this.getTypedRuleContext(CatalogObjectParentReferenceContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterCatalogGraphTypeParentAndName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitCatalogGraphTypeParentAndName(this);
		}
	}


}



class BindingTableReferenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_bindingTableReference;
    }

	catalogObjectParentReference() {
	    return this.getTypedRuleContext(CatalogObjectParentReferenceContext,0);
	};

	bindingTableName() {
	    return this.getTypedRuleContext(BindingTableNameContext,0);
	};

	delimitedBindingTableName() {
	    return this.getTypedRuleContext(DelimitedBindingTableNameContext,0);
	};

	referenceParameterSpecification() {
	    return this.getTypedRuleContext(ReferenceParameterSpecificationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterBindingTableReference(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitBindingTableReference(this);
		}
	}


}



class ProcedureReferenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_procedureReference;
    }

	catalogProcedureParentAndName() {
	    return this.getTypedRuleContext(CatalogProcedureParentAndNameContext,0);
	};

	referenceParameterSpecification() {
	    return this.getTypedRuleContext(ReferenceParameterSpecificationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterProcedureReference(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitProcedureReference(this);
		}
	}


}



class CatalogProcedureParentAndNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_catalogProcedureParentAndName;
    }

	procedureName() {
	    return this.getTypedRuleContext(ProcedureNameContext,0);
	};

	catalogObjectParentReference() {
	    return this.getTypedRuleContext(CatalogObjectParentReferenceContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterCatalogProcedureParentAndName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitCatalogProcedureParentAndName(this);
		}
	}


}



class CatalogObjectParentReferenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_catalogObjectParentReference;
    }

	schemaReference() {
	    return this.getTypedRuleContext(SchemaReferenceContext,0);
	};

	SOLIDUS() {
	    return this.getToken(GQLParser.SOLIDUS, 0);
	};

	objectName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ObjectNameContext);
	    } else {
	        return this.getTypedRuleContext(ObjectNameContext,i);
	    }
	};

	PERIOD = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GQLParser.PERIOD);
	    } else {
	        return this.getToken(GQLParser.PERIOD, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterCatalogObjectParentReference(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitCatalogObjectParentReference(this);
		}
	}


}



class ReferenceParameterSpecificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_referenceParameterSpecification;
    }

	SUBSTITUTED_PARAMETER_REFERENCE() {
	    return this.getToken(GQLParser.SUBSTITUTED_PARAMETER_REFERENCE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterReferenceParameterSpecification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitReferenceParameterSpecification(this);
		}
	}


}



class NestedGraphTypeSpecificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_nestedGraphTypeSpecification;
    }

	LEFT_BRACE() {
	    return this.getToken(GQLParser.LEFT_BRACE, 0);
	};

	graphTypeSpecificationBody() {
	    return this.getTypedRuleContext(GraphTypeSpecificationBodyContext,0);
	};

	RIGHT_BRACE() {
	    return this.getToken(GQLParser.RIGHT_BRACE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterNestedGraphTypeSpecification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitNestedGraphTypeSpecification(this);
		}
	}


}



class GraphTypeSpecificationBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_graphTypeSpecificationBody;
    }

	elementTypeList() {
	    return this.getTypedRuleContext(ElementTypeListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterGraphTypeSpecificationBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitGraphTypeSpecificationBody(this);
		}
	}


}



class ElementTypeListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_elementTypeList;
    }

	elementTypeSpecification = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ElementTypeSpecificationContext);
	    } else {
	        return this.getTypedRuleContext(ElementTypeSpecificationContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GQLParser.COMMA);
	    } else {
	        return this.getToken(GQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterElementTypeList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitElementTypeList(this);
		}
	}


}



class ElementTypeSpecificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_elementTypeSpecification;
    }

	nodeTypeSpecification() {
	    return this.getTypedRuleContext(NodeTypeSpecificationContext,0);
	};

	edgeTypeSpecification() {
	    return this.getTypedRuleContext(EdgeTypeSpecificationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterElementTypeSpecification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitElementTypeSpecification(this);
		}
	}


}



class NodeTypeSpecificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_nodeTypeSpecification;
    }

	nodeTypePattern() {
	    return this.getTypedRuleContext(NodeTypePatternContext,0);
	};

	nodeTypePhrase() {
	    return this.getTypedRuleContext(NodeTypePhraseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterNodeTypeSpecification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitNodeTypeSpecification(this);
		}
	}


}



class NodeTypePatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_nodeTypePattern;
    }

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	nodeSynonym() {
	    return this.getTypedRuleContext(NodeSynonymContext,0);
	};

	nodeTypeName() {
	    return this.getTypedRuleContext(NodeTypeNameContext,0);
	};

	localNodeTypeAlias() {
	    return this.getTypedRuleContext(LocalNodeTypeAliasContext,0);
	};

	nodeTypeFiller() {
	    return this.getTypedRuleContext(NodeTypeFillerContext,0);
	};

	TYPE() {
	    return this.getToken(GQLParser.TYPE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterNodeTypePattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitNodeTypePattern(this);
		}
	}


}



class NodeTypePhraseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_nodeTypePhrase;
    }

	nodeSynonym() {
	    return this.getTypedRuleContext(NodeSynonymContext,0);
	};

	nodeTypePhraseFiller() {
	    return this.getTypedRuleContext(NodeTypePhraseFillerContext,0);
	};

	TYPE() {
	    return this.getToken(GQLParser.TYPE, 0);
	};

	AS() {
	    return this.getToken(GQLParser.AS, 0);
	};

	localNodeTypeAlias() {
	    return this.getTypedRuleContext(LocalNodeTypeAliasContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterNodeTypePhrase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitNodeTypePhrase(this);
		}
	}


}



class NodeTypePhraseFillerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_nodeTypePhraseFiller;
    }

	nodeTypeName() {
	    return this.getTypedRuleContext(NodeTypeNameContext,0);
	};

	nodeTypeFiller() {
	    return this.getTypedRuleContext(NodeTypeFillerContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterNodeTypePhraseFiller(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitNodeTypePhraseFiller(this);
		}
	}


}



class NodeTypeFillerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_nodeTypeFiller;
    }

	nodeTypeKeyLabelSet() {
	    return this.getTypedRuleContext(NodeTypeKeyLabelSetContext,0);
	};

	nodeTypeImpliedContent() {
	    return this.getTypedRuleContext(NodeTypeImpliedContentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterNodeTypeFiller(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitNodeTypeFiller(this);
		}
	}


}



class LocalNodeTypeAliasContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_localNodeTypeAlias;
    }

	regularIdentifier() {
	    return this.getTypedRuleContext(RegularIdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterLocalNodeTypeAlias(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitLocalNodeTypeAlias(this);
		}
	}


}



class NodeTypeImpliedContentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_nodeTypeImpliedContent;
    }

	nodeTypeLabelSet() {
	    return this.getTypedRuleContext(NodeTypeLabelSetContext,0);
	};

	nodeTypePropertyTypes() {
	    return this.getTypedRuleContext(NodeTypePropertyTypesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterNodeTypeImpliedContent(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitNodeTypeImpliedContent(this);
		}
	}


}



class NodeTypeKeyLabelSetContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_nodeTypeKeyLabelSet;
    }

	IMPLIES() {
	    return this.getToken(GQLParser.IMPLIES, 0);
	};

	labelSetPhrase() {
	    return this.getTypedRuleContext(LabelSetPhraseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterNodeTypeKeyLabelSet(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitNodeTypeKeyLabelSet(this);
		}
	}


}



class NodeTypeLabelSetContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_nodeTypeLabelSet;
    }

	labelSetPhrase() {
	    return this.getTypedRuleContext(LabelSetPhraseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterNodeTypeLabelSet(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitNodeTypeLabelSet(this);
		}
	}


}



class NodeTypePropertyTypesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_nodeTypePropertyTypes;
    }

	propertyTypesSpecification() {
	    return this.getTypedRuleContext(PropertyTypesSpecificationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterNodeTypePropertyTypes(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitNodeTypePropertyTypes(this);
		}
	}


}



class EdgeTypeSpecificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_edgeTypeSpecification;
    }

	edgeTypePattern() {
	    return this.getTypedRuleContext(EdgeTypePatternContext,0);
	};

	edgeTypePhrase() {
	    return this.getTypedRuleContext(EdgeTypePhraseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterEdgeTypeSpecification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitEdgeTypeSpecification(this);
		}
	}


}



class EdgeTypePatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_edgeTypePattern;
    }

	edgeTypePatternDirected() {
	    return this.getTypedRuleContext(EdgeTypePatternDirectedContext,0);
	};

	edgeTypePatternUndirected() {
	    return this.getTypedRuleContext(EdgeTypePatternUndirectedContext,0);
	};

	edgeSynonym() {
	    return this.getTypedRuleContext(EdgeSynonymContext,0);
	};

	edgeTypeName() {
	    return this.getTypedRuleContext(EdgeTypeNameContext,0);
	};

	edgeKind() {
	    return this.getTypedRuleContext(EdgeKindContext,0);
	};

	TYPE() {
	    return this.getToken(GQLParser.TYPE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterEdgeTypePattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitEdgeTypePattern(this);
		}
	}


}



class EdgeTypePhraseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_edgeTypePhrase;
    }

	edgeKind() {
	    return this.getTypedRuleContext(EdgeKindContext,0);
	};

	edgeSynonym() {
	    return this.getTypedRuleContext(EdgeSynonymContext,0);
	};

	edgeTypePhraseFiller() {
	    return this.getTypedRuleContext(EdgeTypePhraseFillerContext,0);
	};

	endpointPairPhrase() {
	    return this.getTypedRuleContext(EndpointPairPhraseContext,0);
	};

	TYPE() {
	    return this.getToken(GQLParser.TYPE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterEdgeTypePhrase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitEdgeTypePhrase(this);
		}
	}


}



class EdgeTypePhraseFillerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_edgeTypePhraseFiller;
    }

	edgeTypeName() {
	    return this.getTypedRuleContext(EdgeTypeNameContext,0);
	};

	edgeTypeFiller() {
	    return this.getTypedRuleContext(EdgeTypeFillerContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterEdgeTypePhraseFiller(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitEdgeTypePhraseFiller(this);
		}
	}


}



class EdgeTypeFillerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_edgeTypeFiller;
    }

	edgeTypeKeyLabelSet() {
	    return this.getTypedRuleContext(EdgeTypeKeyLabelSetContext,0);
	};

	edgeTypeImpliedContent() {
	    return this.getTypedRuleContext(EdgeTypeImpliedContentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterEdgeTypeFiller(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitEdgeTypeFiller(this);
		}
	}


}



class EdgeTypeImpliedContentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_edgeTypeImpliedContent;
    }

	edgeTypeLabelSet() {
	    return this.getTypedRuleContext(EdgeTypeLabelSetContext,0);
	};

	edgeTypePropertyTypes() {
	    return this.getTypedRuleContext(EdgeTypePropertyTypesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterEdgeTypeImpliedContent(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitEdgeTypeImpliedContent(this);
		}
	}


}



class EdgeTypeKeyLabelSetContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_edgeTypeKeyLabelSet;
    }

	IMPLIES() {
	    return this.getToken(GQLParser.IMPLIES, 0);
	};

	labelSetPhrase() {
	    return this.getTypedRuleContext(LabelSetPhraseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterEdgeTypeKeyLabelSet(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitEdgeTypeKeyLabelSet(this);
		}
	}


}



class EdgeTypeLabelSetContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_edgeTypeLabelSet;
    }

	labelSetPhrase() {
	    return this.getTypedRuleContext(LabelSetPhraseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterEdgeTypeLabelSet(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitEdgeTypeLabelSet(this);
		}
	}


}



class EdgeTypePropertyTypesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_edgeTypePropertyTypes;
    }

	propertyTypesSpecification() {
	    return this.getTypedRuleContext(PropertyTypesSpecificationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterEdgeTypePropertyTypes(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitEdgeTypePropertyTypes(this);
		}
	}


}



class EdgeTypePatternDirectedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_edgeTypePatternDirected;
    }

	edgeTypePatternPointingRight() {
	    return this.getTypedRuleContext(EdgeTypePatternPointingRightContext,0);
	};

	edgeTypePatternPointingLeft() {
	    return this.getTypedRuleContext(EdgeTypePatternPointingLeftContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterEdgeTypePatternDirected(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitEdgeTypePatternDirected(this);
		}
	}


}



class EdgeTypePatternPointingRightContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_edgeTypePatternPointingRight;
    }

	sourceNodeTypeReference() {
	    return this.getTypedRuleContext(SourceNodeTypeReferenceContext,0);
	};

	arcTypePointingRight() {
	    return this.getTypedRuleContext(ArcTypePointingRightContext,0);
	};

	destinationNodeTypeReference() {
	    return this.getTypedRuleContext(DestinationNodeTypeReferenceContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterEdgeTypePatternPointingRight(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitEdgeTypePatternPointingRight(this);
		}
	}


}



class EdgeTypePatternPointingLeftContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_edgeTypePatternPointingLeft;
    }

	destinationNodeTypeReference() {
	    return this.getTypedRuleContext(DestinationNodeTypeReferenceContext,0);
	};

	arcTypePointingLeft() {
	    return this.getTypedRuleContext(ArcTypePointingLeftContext,0);
	};

	sourceNodeTypeReference() {
	    return this.getTypedRuleContext(SourceNodeTypeReferenceContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterEdgeTypePatternPointingLeft(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitEdgeTypePatternPointingLeft(this);
		}
	}


}



class EdgeTypePatternUndirectedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_edgeTypePatternUndirected;
    }

	sourceNodeTypeReference() {
	    return this.getTypedRuleContext(SourceNodeTypeReferenceContext,0);
	};

	arcTypeUndirected() {
	    return this.getTypedRuleContext(ArcTypeUndirectedContext,0);
	};

	destinationNodeTypeReference() {
	    return this.getTypedRuleContext(DestinationNodeTypeReferenceContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterEdgeTypePatternUndirected(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitEdgeTypePatternUndirected(this);
		}
	}


}



class ArcTypePointingRightContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_arcTypePointingRight;
    }

	MINUS_LEFT_BRACKET() {
	    return this.getToken(GQLParser.MINUS_LEFT_BRACKET, 0);
	};

	edgeTypeFiller() {
	    return this.getTypedRuleContext(EdgeTypeFillerContext,0);
	};

	BRACKET_RIGHT_ARROW() {
	    return this.getToken(GQLParser.BRACKET_RIGHT_ARROW, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterArcTypePointingRight(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitArcTypePointingRight(this);
		}
	}


}



class ArcTypePointingLeftContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_arcTypePointingLeft;
    }

	LEFT_ARROW_BRACKET() {
	    return this.getToken(GQLParser.LEFT_ARROW_BRACKET, 0);
	};

	edgeTypeFiller() {
	    return this.getTypedRuleContext(EdgeTypeFillerContext,0);
	};

	RIGHT_BRACKET_MINUS() {
	    return this.getToken(GQLParser.RIGHT_BRACKET_MINUS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterArcTypePointingLeft(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitArcTypePointingLeft(this);
		}
	}


}



class ArcTypeUndirectedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_arcTypeUndirected;
    }

	TILDE_LEFT_BRACKET() {
	    return this.getToken(GQLParser.TILDE_LEFT_BRACKET, 0);
	};

	edgeTypeFiller() {
	    return this.getTypedRuleContext(EdgeTypeFillerContext,0);
	};

	RIGHT_BRACKET_TILDE() {
	    return this.getToken(GQLParser.RIGHT_BRACKET_TILDE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterArcTypeUndirected(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitArcTypeUndirected(this);
		}
	}


}



class SourceNodeTypeReferenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_sourceNodeTypeReference;
    }

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	sourceNodeTypeAlias() {
	    return this.getTypedRuleContext(SourceNodeTypeAliasContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	nodeTypeFiller() {
	    return this.getTypedRuleContext(NodeTypeFillerContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterSourceNodeTypeReference(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitSourceNodeTypeReference(this);
		}
	}


}



class DestinationNodeTypeReferenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_destinationNodeTypeReference;
    }

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	destinationNodeTypeAlias() {
	    return this.getTypedRuleContext(DestinationNodeTypeAliasContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	nodeTypeFiller() {
	    return this.getTypedRuleContext(NodeTypeFillerContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterDestinationNodeTypeReference(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitDestinationNodeTypeReference(this);
		}
	}


}



class EdgeKindContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_edgeKind;
    }

	DIRECTED() {
	    return this.getToken(GQLParser.DIRECTED, 0);
	};

	UNDIRECTED() {
	    return this.getToken(GQLParser.UNDIRECTED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterEdgeKind(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitEdgeKind(this);
		}
	}


}



class EndpointPairPhraseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_endpointPairPhrase;
    }

	CONNECTING() {
	    return this.getToken(GQLParser.CONNECTING, 0);
	};

	endpointPair() {
	    return this.getTypedRuleContext(EndpointPairContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterEndpointPairPhrase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitEndpointPairPhrase(this);
		}
	}


}



class EndpointPairContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_endpointPair;
    }

	endpointPairDirected() {
	    return this.getTypedRuleContext(EndpointPairDirectedContext,0);
	};

	endpointPairUndirected() {
	    return this.getTypedRuleContext(EndpointPairUndirectedContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterEndpointPair(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitEndpointPair(this);
		}
	}


}



class EndpointPairDirectedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_endpointPairDirected;
    }

	endpointPairPointingRight() {
	    return this.getTypedRuleContext(EndpointPairPointingRightContext,0);
	};

	endpointPairPointingLeft() {
	    return this.getTypedRuleContext(EndpointPairPointingLeftContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterEndpointPairDirected(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitEndpointPairDirected(this);
		}
	}


}



class EndpointPairPointingRightContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_endpointPairPointingRight;
    }

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	sourceNodeTypeAlias() {
	    return this.getTypedRuleContext(SourceNodeTypeAliasContext,0);
	};

	connectorPointingRight() {
	    return this.getTypedRuleContext(ConnectorPointingRightContext,0);
	};

	destinationNodeTypeAlias() {
	    return this.getTypedRuleContext(DestinationNodeTypeAliasContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterEndpointPairPointingRight(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitEndpointPairPointingRight(this);
		}
	}


}



class EndpointPairPointingLeftContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_endpointPairPointingLeft;
    }

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	destinationNodeTypeAlias() {
	    return this.getTypedRuleContext(DestinationNodeTypeAliasContext,0);
	};

	LEFT_ARROW() {
	    return this.getToken(GQLParser.LEFT_ARROW, 0);
	};

	sourceNodeTypeAlias() {
	    return this.getTypedRuleContext(SourceNodeTypeAliasContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterEndpointPairPointingLeft(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitEndpointPairPointingLeft(this);
		}
	}


}



class EndpointPairUndirectedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_endpointPairUndirected;
    }

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	sourceNodeTypeAlias() {
	    return this.getTypedRuleContext(SourceNodeTypeAliasContext,0);
	};

	connectorUndirected() {
	    return this.getTypedRuleContext(ConnectorUndirectedContext,0);
	};

	destinationNodeTypeAlias() {
	    return this.getTypedRuleContext(DestinationNodeTypeAliasContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterEndpointPairUndirected(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitEndpointPairUndirected(this);
		}
	}


}



class ConnectorPointingRightContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_connectorPointingRight;
    }

	TO() {
	    return this.getToken(GQLParser.TO, 0);
	};

	RIGHT_ARROW() {
	    return this.getToken(GQLParser.RIGHT_ARROW, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterConnectorPointingRight(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitConnectorPointingRight(this);
		}
	}


}



class ConnectorUndirectedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_connectorUndirected;
    }

	TO() {
	    return this.getToken(GQLParser.TO, 0);
	};

	TILDE() {
	    return this.getToken(GQLParser.TILDE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterConnectorUndirected(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitConnectorUndirected(this);
		}
	}


}



class SourceNodeTypeAliasContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_sourceNodeTypeAlias;
    }

	regularIdentifier() {
	    return this.getTypedRuleContext(RegularIdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterSourceNodeTypeAlias(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitSourceNodeTypeAlias(this);
		}
	}


}



class DestinationNodeTypeAliasContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_destinationNodeTypeAlias;
    }

	regularIdentifier() {
	    return this.getTypedRuleContext(RegularIdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterDestinationNodeTypeAlias(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitDestinationNodeTypeAlias(this);
		}
	}


}



class LabelSetPhraseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_labelSetPhrase;
    }

	LABEL() {
	    return this.getToken(GQLParser.LABEL, 0);
	};

	labelName() {
	    return this.getTypedRuleContext(LabelNameContext,0);
	};

	LABELS() {
	    return this.getToken(GQLParser.LABELS, 0);
	};

	labelSetSpecification() {
	    return this.getTypedRuleContext(LabelSetSpecificationContext,0);
	};

	isOrColon() {
	    return this.getTypedRuleContext(IsOrColonContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterLabelSetPhrase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitLabelSetPhrase(this);
		}
	}


}



class LabelSetSpecificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_labelSetSpecification;
    }

	labelName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LabelNameContext);
	    } else {
	        return this.getTypedRuleContext(LabelNameContext,i);
	    }
	};

	AMPERSAND = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GQLParser.AMPERSAND);
	    } else {
	        return this.getToken(GQLParser.AMPERSAND, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterLabelSetSpecification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitLabelSetSpecification(this);
		}
	}


}



class PropertyTypesSpecificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_propertyTypesSpecification;
    }

	LEFT_BRACE() {
	    return this.getToken(GQLParser.LEFT_BRACE, 0);
	};

	RIGHT_BRACE() {
	    return this.getToken(GQLParser.RIGHT_BRACE, 0);
	};

	propertyTypeList() {
	    return this.getTypedRuleContext(PropertyTypeListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterPropertyTypesSpecification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitPropertyTypesSpecification(this);
		}
	}


}



class PropertyTypeListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_propertyTypeList;
    }

	propertyType = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PropertyTypeContext);
	    } else {
	        return this.getTypedRuleContext(PropertyTypeContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GQLParser.COMMA);
	    } else {
	        return this.getToken(GQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterPropertyTypeList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitPropertyTypeList(this);
		}
	}


}



class PropertyTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_propertyType;
    }

	propertyName() {
	    return this.getTypedRuleContext(PropertyNameContext,0);
	};

	propertyValueType() {
	    return this.getTypedRuleContext(PropertyValueTypeContext,0);
	};

	typed() {
	    return this.getTypedRuleContext(TypedContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterPropertyType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitPropertyType(this);
		}
	}


}



class PropertyValueTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_propertyValueType;
    }

	valueType() {
	    return this.getTypedRuleContext(ValueTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterPropertyValueType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitPropertyValueType(this);
		}
	}


}



class BindingTableTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_bindingTableType;
    }

	TABLE() {
	    return this.getToken(GQLParser.TABLE, 0);
	};

	fieldTypesSpecification() {
	    return this.getTypedRuleContext(FieldTypesSpecificationContext,0);
	};

	BINDING() {
	    return this.getToken(GQLParser.BINDING, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterBindingTableType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitBindingTableType(this);
		}
	}


}



class ValueTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_valueType;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class DynamicPropertyValueTypeLabelContext extends ValueTypeContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	PROPERTY() {
	    return this.getToken(GQLParser.PROPERTY, 0);
	};

	VALUE() {
	    return this.getToken(GQLParser.VALUE, 0);
	};

	ANY() {
	    return this.getToken(GQLParser.ANY, 0);
	};

	notNull() {
	    return this.getTypedRuleContext(NotNullContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterDynamicPropertyValueTypeLabel(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitDynamicPropertyValueTypeLabel(this);
		}
	}


}

GQLParser.DynamicPropertyValueTypeLabelContext = DynamicPropertyValueTypeLabelContext;

class ClosedDynamicUnionTypeAtl1Context extends ValueTypeContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ANY() {
	    return this.getToken(GQLParser.ANY, 0);
	};

	LEFT_ANGLE_BRACKET() {
	    return this.getToken(GQLParser.LEFT_ANGLE_BRACKET, 0);
	};

	valueType = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ValueTypeContext);
	    } else {
	        return this.getTypedRuleContext(ValueTypeContext,i);
	    }
	};

	RIGHT_ANGLE_BRACKET() {
	    return this.getToken(GQLParser.RIGHT_ANGLE_BRACKET, 0);
	};

	VALUE() {
	    return this.getToken(GQLParser.VALUE, 0);
	};

	VERTICAL_BAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GQLParser.VERTICAL_BAR);
	    } else {
	        return this.getToken(GQLParser.VERTICAL_BAR, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterClosedDynamicUnionTypeAtl1(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitClosedDynamicUnionTypeAtl1(this);
		}
	}


}

GQLParser.ClosedDynamicUnionTypeAtl1Context = ClosedDynamicUnionTypeAtl1Context;

class ClosedDynamicUnionTypeAtl2Context extends ValueTypeContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	valueType = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ValueTypeContext);
	    } else {
	        return this.getTypedRuleContext(ValueTypeContext,i);
	    }
	};

	VERTICAL_BAR() {
	    return this.getToken(GQLParser.VERTICAL_BAR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterClosedDynamicUnionTypeAtl2(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitClosedDynamicUnionTypeAtl2(this);
		}
	}


}

GQLParser.ClosedDynamicUnionTypeAtl2Context = ClosedDynamicUnionTypeAtl2Context;

class PathValueTypeLabelContext extends ValueTypeContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	pathValueType() {
	    return this.getTypedRuleContext(PathValueTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterPathValueTypeLabel(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitPathValueTypeLabel(this);
		}
	}


}

GQLParser.PathValueTypeLabelContext = PathValueTypeLabelContext;

class ListValueTypeAlt3Context extends ValueTypeContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	listValueTypeName() {
	    return this.getTypedRuleContext(ListValueTypeNameContext,0);
	};

	LEFT_BRACKET() {
	    return this.getToken(GQLParser.LEFT_BRACKET, 0);
	};

	maxLength() {
	    return this.getTypedRuleContext(MaxLengthContext,0);
	};

	RIGHT_BRACKET() {
	    return this.getToken(GQLParser.RIGHT_BRACKET, 0);
	};

	notNull() {
	    return this.getTypedRuleContext(NotNullContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterListValueTypeAlt3(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitListValueTypeAlt3(this);
		}
	}


}

GQLParser.ListValueTypeAlt3Context = ListValueTypeAlt3Context;

class ListValueTypeAlt2Context extends ValueTypeContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	valueType() {
	    return this.getTypedRuleContext(ValueTypeContext,0);
	};

	listValueTypeName() {
	    return this.getTypedRuleContext(ListValueTypeNameContext,0);
	};

	LEFT_BRACKET() {
	    return this.getToken(GQLParser.LEFT_BRACKET, 0);
	};

	maxLength() {
	    return this.getTypedRuleContext(MaxLengthContext,0);
	};

	RIGHT_BRACKET() {
	    return this.getToken(GQLParser.RIGHT_BRACKET, 0);
	};

	notNull() {
	    return this.getTypedRuleContext(NotNullContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterListValueTypeAlt2(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitListValueTypeAlt2(this);
		}
	}


}

GQLParser.ListValueTypeAlt2Context = ListValueTypeAlt2Context;

class ListValueTypeAlt1Context extends ValueTypeContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	listValueTypeName() {
	    return this.getTypedRuleContext(ListValueTypeNameContext,0);
	};

	LEFT_ANGLE_BRACKET() {
	    return this.getToken(GQLParser.LEFT_ANGLE_BRACKET, 0);
	};

	valueType() {
	    return this.getTypedRuleContext(ValueTypeContext,0);
	};

	RIGHT_ANGLE_BRACKET() {
	    return this.getToken(GQLParser.RIGHT_ANGLE_BRACKET, 0);
	};

	LEFT_BRACKET() {
	    return this.getToken(GQLParser.LEFT_BRACKET, 0);
	};

	maxLength() {
	    return this.getTypedRuleContext(MaxLengthContext,0);
	};

	RIGHT_BRACKET() {
	    return this.getToken(GQLParser.RIGHT_BRACKET, 0);
	};

	notNull() {
	    return this.getTypedRuleContext(NotNullContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterListValueTypeAlt1(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitListValueTypeAlt1(this);
		}
	}


}

GQLParser.ListValueTypeAlt1Context = ListValueTypeAlt1Context;

class PredefinedTypeLabelContext extends ValueTypeContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	predefinedType() {
	    return this.getTypedRuleContext(PredefinedTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterPredefinedTypeLabel(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitPredefinedTypeLabel(this);
		}
	}


}

GQLParser.PredefinedTypeLabelContext = PredefinedTypeLabelContext;

class RecordTypeLabelContext extends ValueTypeContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	recordType() {
	    return this.getTypedRuleContext(RecordTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterRecordTypeLabel(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitRecordTypeLabel(this);
		}
	}


}

GQLParser.RecordTypeLabelContext = RecordTypeLabelContext;

class OpenDynamicUnionTypeLabelContext extends ValueTypeContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ANY() {
	    return this.getToken(GQLParser.ANY, 0);
	};

	VALUE() {
	    return this.getToken(GQLParser.VALUE, 0);
	};

	notNull() {
	    return this.getTypedRuleContext(NotNullContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterOpenDynamicUnionTypeLabel(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitOpenDynamicUnionTypeLabel(this);
		}
	}


}

GQLParser.OpenDynamicUnionTypeLabelContext = OpenDynamicUnionTypeLabelContext;

class TypedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_typed;
    }

	DOUBLE_COLON() {
	    return this.getToken(GQLParser.DOUBLE_COLON, 0);
	};

	TYPED() {
	    return this.getToken(GQLParser.TYPED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterTyped(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitTyped(this);
		}
	}


}



class PredefinedTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_predefinedType;
    }

	booleanType() {
	    return this.getTypedRuleContext(BooleanTypeContext,0);
	};

	characterStringType() {
	    return this.getTypedRuleContext(CharacterStringTypeContext,0);
	};

	byteStringType() {
	    return this.getTypedRuleContext(ByteStringTypeContext,0);
	};

	numericType() {
	    return this.getTypedRuleContext(NumericTypeContext,0);
	};

	temporalType() {
	    return this.getTypedRuleContext(TemporalTypeContext,0);
	};

	referenceValueType() {
	    return this.getTypedRuleContext(ReferenceValueTypeContext,0);
	};

	immaterialValueType() {
	    return this.getTypedRuleContext(ImmaterialValueTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterPredefinedType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitPredefinedType(this);
		}
	}


}



class BooleanTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_booleanType;
    }

	BOOL() {
	    return this.getToken(GQLParser.BOOL, 0);
	};

	BOOLEAN() {
	    return this.getToken(GQLParser.BOOLEAN, 0);
	};

	notNull() {
	    return this.getTypedRuleContext(NotNullContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterBooleanType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitBooleanType(this);
		}
	}


}



class CharacterStringTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_characterStringType;
    }

	STRING() {
	    return this.getToken(GQLParser.STRING, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	maxLength() {
	    return this.getTypedRuleContext(MaxLengthContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	notNull() {
	    return this.getTypedRuleContext(NotNullContext,0);
	};

	minLength() {
	    return this.getTypedRuleContext(MinLengthContext,0);
	};

	COMMA() {
	    return this.getToken(GQLParser.COMMA, 0);
	};

	CHAR() {
	    return this.getToken(GQLParser.CHAR, 0);
	};

	fixedLength() {
	    return this.getTypedRuleContext(FixedLengthContext,0);
	};

	VARCHAR() {
	    return this.getToken(GQLParser.VARCHAR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterCharacterStringType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitCharacterStringType(this);
		}
	}


}



class ByteStringTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_byteStringType;
    }

	BYTES() {
	    return this.getToken(GQLParser.BYTES, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	maxLength() {
	    return this.getTypedRuleContext(MaxLengthContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	notNull() {
	    return this.getTypedRuleContext(NotNullContext,0);
	};

	minLength() {
	    return this.getTypedRuleContext(MinLengthContext,0);
	};

	COMMA() {
	    return this.getToken(GQLParser.COMMA, 0);
	};

	BINARY() {
	    return this.getToken(GQLParser.BINARY, 0);
	};

	fixedLength() {
	    return this.getTypedRuleContext(FixedLengthContext,0);
	};

	VARBINARY() {
	    return this.getToken(GQLParser.VARBINARY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterByteStringType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitByteStringType(this);
		}
	}


}



class MinLengthContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_minLength;
    }

	unsignedInteger() {
	    return this.getTypedRuleContext(UnsignedIntegerContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterMinLength(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitMinLength(this);
		}
	}


}



class MaxLengthContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_maxLength;
    }

	unsignedInteger() {
	    return this.getTypedRuleContext(UnsignedIntegerContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterMaxLength(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitMaxLength(this);
		}
	}


}



class FixedLengthContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_fixedLength;
    }

	unsignedInteger() {
	    return this.getTypedRuleContext(UnsignedIntegerContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterFixedLength(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitFixedLength(this);
		}
	}


}



class NumericTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_numericType;
    }

	exactNumericType() {
	    return this.getTypedRuleContext(ExactNumericTypeContext,0);
	};

	approximateNumericType() {
	    return this.getTypedRuleContext(ApproximateNumericTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterNumericType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitNumericType(this);
		}
	}


}



class ExactNumericTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_exactNumericType;
    }

	binaryExactNumericType() {
	    return this.getTypedRuleContext(BinaryExactNumericTypeContext,0);
	};

	decimalExactNumericType() {
	    return this.getTypedRuleContext(DecimalExactNumericTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterExactNumericType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitExactNumericType(this);
		}
	}


}



class BinaryExactNumericTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_binaryExactNumericType;
    }

	signedBinaryExactNumericType() {
	    return this.getTypedRuleContext(SignedBinaryExactNumericTypeContext,0);
	};

	unsignedBinaryExactNumericType() {
	    return this.getTypedRuleContext(UnsignedBinaryExactNumericTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterBinaryExactNumericType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitBinaryExactNumericType(this);
		}
	}


}



class SignedBinaryExactNumericTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_signedBinaryExactNumericType;
    }

	INT8() {
	    return this.getToken(GQLParser.INT8, 0);
	};

	notNull() {
	    return this.getTypedRuleContext(NotNullContext,0);
	};

	INT16() {
	    return this.getToken(GQLParser.INT16, 0);
	};

	INT32() {
	    return this.getToken(GQLParser.INT32, 0);
	};

	INT64() {
	    return this.getToken(GQLParser.INT64, 0);
	};

	INT128() {
	    return this.getToken(GQLParser.INT128, 0);
	};

	INT256() {
	    return this.getToken(GQLParser.INT256, 0);
	};

	SMALLINT() {
	    return this.getToken(GQLParser.SMALLINT, 0);
	};

	INT() {
	    return this.getToken(GQLParser.INT, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	precision() {
	    return this.getTypedRuleContext(PrecisionContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	BIGINT() {
	    return this.getToken(GQLParser.BIGINT, 0);
	};

	verboseBinaryExactNumericType() {
	    return this.getTypedRuleContext(VerboseBinaryExactNumericTypeContext,0);
	};

	SIGNED() {
	    return this.getToken(GQLParser.SIGNED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterSignedBinaryExactNumericType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitSignedBinaryExactNumericType(this);
		}
	}


}



class UnsignedBinaryExactNumericTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_unsignedBinaryExactNumericType;
    }

	UINT8() {
	    return this.getToken(GQLParser.UINT8, 0);
	};

	notNull() {
	    return this.getTypedRuleContext(NotNullContext,0);
	};

	UINT16() {
	    return this.getToken(GQLParser.UINT16, 0);
	};

	UINT32() {
	    return this.getToken(GQLParser.UINT32, 0);
	};

	UINT64() {
	    return this.getToken(GQLParser.UINT64, 0);
	};

	UINT128() {
	    return this.getToken(GQLParser.UINT128, 0);
	};

	UINT256() {
	    return this.getToken(GQLParser.UINT256, 0);
	};

	USMALLINT() {
	    return this.getToken(GQLParser.USMALLINT, 0);
	};

	UINT() {
	    return this.getToken(GQLParser.UINT, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	precision() {
	    return this.getTypedRuleContext(PrecisionContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	UBIGINT() {
	    return this.getToken(GQLParser.UBIGINT, 0);
	};

	UNSIGNED() {
	    return this.getToken(GQLParser.UNSIGNED, 0);
	};

	verboseBinaryExactNumericType() {
	    return this.getTypedRuleContext(VerboseBinaryExactNumericTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterUnsignedBinaryExactNumericType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitUnsignedBinaryExactNumericType(this);
		}
	}


}



class VerboseBinaryExactNumericTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_verboseBinaryExactNumericType;
    }

	INTEGER8() {
	    return this.getToken(GQLParser.INTEGER8, 0);
	};

	notNull() {
	    return this.getTypedRuleContext(NotNullContext,0);
	};

	INTEGER16() {
	    return this.getToken(GQLParser.INTEGER16, 0);
	};

	INTEGER32() {
	    return this.getToken(GQLParser.INTEGER32, 0);
	};

	INTEGER64() {
	    return this.getToken(GQLParser.INTEGER64, 0);
	};

	INTEGER128() {
	    return this.getToken(GQLParser.INTEGER128, 0);
	};

	INTEGER256() {
	    return this.getToken(GQLParser.INTEGER256, 0);
	};

	SMALL() {
	    return this.getToken(GQLParser.SMALL, 0);
	};

	INTEGER() {
	    return this.getToken(GQLParser.INTEGER, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	precision() {
	    return this.getTypedRuleContext(PrecisionContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	BIG() {
	    return this.getToken(GQLParser.BIG, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterVerboseBinaryExactNumericType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitVerboseBinaryExactNumericType(this);
		}
	}


}



class DecimalExactNumericTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_decimalExactNumericType;
    }

	DECIMAL() {
	    return this.getToken(GQLParser.DECIMAL, 0);
	};

	DEC() {
	    return this.getToken(GQLParser.DEC, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	precision() {
	    return this.getTypedRuleContext(PrecisionContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	COMMA() {
	    return this.getToken(GQLParser.COMMA, 0);
	};

	scale() {
	    return this.getTypedRuleContext(ScaleContext,0);
	};

	notNull() {
	    return this.getTypedRuleContext(NotNullContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterDecimalExactNumericType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitDecimalExactNumericType(this);
		}
	}


}



class PrecisionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_precision;
    }

	unsignedDecimalInteger() {
	    return this.getTypedRuleContext(UnsignedDecimalIntegerContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterPrecision(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitPrecision(this);
		}
	}


}



class ScaleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_scale;
    }

	unsignedDecimalInteger() {
	    return this.getTypedRuleContext(UnsignedDecimalIntegerContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterScale(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitScale(this);
		}
	}


}



class ApproximateNumericTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_approximateNumericType;
    }

	FLOAT16() {
	    return this.getToken(GQLParser.FLOAT16, 0);
	};

	notNull() {
	    return this.getTypedRuleContext(NotNullContext,0);
	};

	FLOAT32() {
	    return this.getToken(GQLParser.FLOAT32, 0);
	};

	FLOAT64() {
	    return this.getToken(GQLParser.FLOAT64, 0);
	};

	FLOAT128() {
	    return this.getToken(GQLParser.FLOAT128, 0);
	};

	FLOAT256() {
	    return this.getToken(GQLParser.FLOAT256, 0);
	};

	FLOAT() {
	    return this.getToken(GQLParser.FLOAT, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	precision() {
	    return this.getTypedRuleContext(PrecisionContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	COMMA() {
	    return this.getToken(GQLParser.COMMA, 0);
	};

	scale() {
	    return this.getTypedRuleContext(ScaleContext,0);
	};

	REAL() {
	    return this.getToken(GQLParser.REAL, 0);
	};

	DOUBLE() {
	    return this.getToken(GQLParser.DOUBLE, 0);
	};

	PRECISION() {
	    return this.getToken(GQLParser.PRECISION, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterApproximateNumericType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitApproximateNumericType(this);
		}
	}


}



class TemporalTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_temporalType;
    }

	temporalInstantType() {
	    return this.getTypedRuleContext(TemporalInstantTypeContext,0);
	};

	temporalDurationType() {
	    return this.getTypedRuleContext(TemporalDurationTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterTemporalType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitTemporalType(this);
		}
	}


}



class TemporalInstantTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_temporalInstantType;
    }

	datetimeType() {
	    return this.getTypedRuleContext(DatetimeTypeContext,0);
	};

	localdatetimeType() {
	    return this.getTypedRuleContext(LocaldatetimeTypeContext,0);
	};

	dateType() {
	    return this.getTypedRuleContext(DateTypeContext,0);
	};

	timeType() {
	    return this.getTypedRuleContext(TimeTypeContext,0);
	};

	localtimeType() {
	    return this.getTypedRuleContext(LocaltimeTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterTemporalInstantType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitTemporalInstantType(this);
		}
	}


}



class DatetimeTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_datetimeType;
    }

	ZONED() {
	    return this.getToken(GQLParser.ZONED, 0);
	};

	DATETIME() {
	    return this.getToken(GQLParser.DATETIME, 0);
	};

	notNull() {
	    return this.getTypedRuleContext(NotNullContext,0);
	};

	TIMESTAMP() {
	    return this.getToken(GQLParser.TIMESTAMP, 0);
	};

	WITH() {
	    return this.getToken(GQLParser.WITH, 0);
	};

	TIME() {
	    return this.getToken(GQLParser.TIME, 0);
	};

	ZONE() {
	    return this.getToken(GQLParser.ZONE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterDatetimeType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitDatetimeType(this);
		}
	}


}



class LocaldatetimeTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_localdatetimeType;
    }

	LOCAL() {
	    return this.getToken(GQLParser.LOCAL, 0);
	};

	DATETIME() {
	    return this.getToken(GQLParser.DATETIME, 0);
	};

	notNull() {
	    return this.getTypedRuleContext(NotNullContext,0);
	};

	TIMESTAMP() {
	    return this.getToken(GQLParser.TIMESTAMP, 0);
	};

	WITHOUT() {
	    return this.getToken(GQLParser.WITHOUT, 0);
	};

	TIME() {
	    return this.getToken(GQLParser.TIME, 0);
	};

	ZONE() {
	    return this.getToken(GQLParser.ZONE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterLocaldatetimeType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitLocaldatetimeType(this);
		}
	}


}



class DateTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_dateType;
    }

	DATE() {
	    return this.getToken(GQLParser.DATE, 0);
	};

	notNull() {
	    return this.getTypedRuleContext(NotNullContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterDateType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitDateType(this);
		}
	}


}



class TimeTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_timeType;
    }

	ZONED() {
	    return this.getToken(GQLParser.ZONED, 0);
	};

	TIME = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GQLParser.TIME);
	    } else {
	        return this.getToken(GQLParser.TIME, i);
	    }
	};


	notNull() {
	    return this.getTypedRuleContext(NotNullContext,0);
	};

	WITH() {
	    return this.getToken(GQLParser.WITH, 0);
	};

	ZONE() {
	    return this.getToken(GQLParser.ZONE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterTimeType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitTimeType(this);
		}
	}


}



class LocaltimeTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_localtimeType;
    }

	LOCAL() {
	    return this.getToken(GQLParser.LOCAL, 0);
	};

	TIME = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GQLParser.TIME);
	    } else {
	        return this.getToken(GQLParser.TIME, i);
	    }
	};


	notNull() {
	    return this.getTypedRuleContext(NotNullContext,0);
	};

	WITHOUT() {
	    return this.getToken(GQLParser.WITHOUT, 0);
	};

	ZONE() {
	    return this.getToken(GQLParser.ZONE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterLocaltimeType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitLocaltimeType(this);
		}
	}


}



class TemporalDurationTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_temporalDurationType;
    }

	DURATION() {
	    return this.getToken(GQLParser.DURATION, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	temporalDurationQualifier() {
	    return this.getTypedRuleContext(TemporalDurationQualifierContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	notNull() {
	    return this.getTypedRuleContext(NotNullContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterTemporalDurationType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitTemporalDurationType(this);
		}
	}


}



class TemporalDurationQualifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_temporalDurationQualifier;
    }

	YEAR() {
	    return this.getToken(GQLParser.YEAR, 0);
	};

	TO() {
	    return this.getToken(GQLParser.TO, 0);
	};

	MONTH() {
	    return this.getToken(GQLParser.MONTH, 0);
	};

	DAY() {
	    return this.getToken(GQLParser.DAY, 0);
	};

	SECOND() {
	    return this.getToken(GQLParser.SECOND, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterTemporalDurationQualifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitTemporalDurationQualifier(this);
		}
	}


}



class ReferenceValueTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_referenceValueType;
    }

	graphReferenceValueType() {
	    return this.getTypedRuleContext(GraphReferenceValueTypeContext,0);
	};

	bindingTableReferenceValueType() {
	    return this.getTypedRuleContext(BindingTableReferenceValueTypeContext,0);
	};

	nodeReferenceValueType() {
	    return this.getTypedRuleContext(NodeReferenceValueTypeContext,0);
	};

	edgeReferenceValueType() {
	    return this.getTypedRuleContext(EdgeReferenceValueTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterReferenceValueType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitReferenceValueType(this);
		}
	}


}



class ImmaterialValueTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_immaterialValueType;
    }

	nullType() {
	    return this.getTypedRuleContext(NullTypeContext,0);
	};

	emptyType() {
	    return this.getTypedRuleContext(EmptyTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterImmaterialValueType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitImmaterialValueType(this);
		}
	}


}



class NullTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_nullType;
    }

	NULL() {
	    return this.getToken(GQLParser.NULL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterNullType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitNullType(this);
		}
	}


}



class EmptyTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_emptyType;
    }

	NULL() {
	    return this.getToken(GQLParser.NULL, 0);
	};

	notNull() {
	    return this.getTypedRuleContext(NotNullContext,0);
	};

	NOTHING() {
	    return this.getToken(GQLParser.NOTHING, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterEmptyType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitEmptyType(this);
		}
	}


}



class GraphReferenceValueTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_graphReferenceValueType;
    }

	openGraphReferenceValueType() {
	    return this.getTypedRuleContext(OpenGraphReferenceValueTypeContext,0);
	};

	closedGraphReferenceValueType() {
	    return this.getTypedRuleContext(ClosedGraphReferenceValueTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterGraphReferenceValueType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitGraphReferenceValueType(this);
		}
	}


}



class ClosedGraphReferenceValueTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_closedGraphReferenceValueType;
    }

	GRAPH() {
	    return this.getToken(GQLParser.GRAPH, 0);
	};

	nestedGraphTypeSpecification() {
	    return this.getTypedRuleContext(NestedGraphTypeSpecificationContext,0);
	};

	PROPERTY() {
	    return this.getToken(GQLParser.PROPERTY, 0);
	};

	notNull() {
	    return this.getTypedRuleContext(NotNullContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterClosedGraphReferenceValueType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitClosedGraphReferenceValueType(this);
		}
	}


}



class OpenGraphReferenceValueTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_openGraphReferenceValueType;
    }

	ANY() {
	    return this.getToken(GQLParser.ANY, 0);
	};

	GRAPH() {
	    return this.getToken(GQLParser.GRAPH, 0);
	};

	PROPERTY() {
	    return this.getToken(GQLParser.PROPERTY, 0);
	};

	notNull() {
	    return this.getTypedRuleContext(NotNullContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterOpenGraphReferenceValueType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitOpenGraphReferenceValueType(this);
		}
	}


}



class BindingTableReferenceValueTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_bindingTableReferenceValueType;
    }

	bindingTableType() {
	    return this.getTypedRuleContext(BindingTableTypeContext,0);
	};

	notNull() {
	    return this.getTypedRuleContext(NotNullContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterBindingTableReferenceValueType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitBindingTableReferenceValueType(this);
		}
	}


}



class NodeReferenceValueTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_nodeReferenceValueType;
    }

	openNodeReferenceValueType() {
	    return this.getTypedRuleContext(OpenNodeReferenceValueTypeContext,0);
	};

	closedNodeReferenceValueType() {
	    return this.getTypedRuleContext(ClosedNodeReferenceValueTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterNodeReferenceValueType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitNodeReferenceValueType(this);
		}
	}


}



class ClosedNodeReferenceValueTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_closedNodeReferenceValueType;
    }

	nodeTypeSpecification() {
	    return this.getTypedRuleContext(NodeTypeSpecificationContext,0);
	};

	notNull() {
	    return this.getTypedRuleContext(NotNullContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterClosedNodeReferenceValueType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitClosedNodeReferenceValueType(this);
		}
	}


}



class OpenNodeReferenceValueTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_openNodeReferenceValueType;
    }

	nodeSynonym() {
	    return this.getTypedRuleContext(NodeSynonymContext,0);
	};

	ANY() {
	    return this.getToken(GQLParser.ANY, 0);
	};

	notNull() {
	    return this.getTypedRuleContext(NotNullContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterOpenNodeReferenceValueType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitOpenNodeReferenceValueType(this);
		}
	}


}



class EdgeReferenceValueTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_edgeReferenceValueType;
    }

	openEdgeReferenceValueType() {
	    return this.getTypedRuleContext(OpenEdgeReferenceValueTypeContext,0);
	};

	closedEdgeReferenceValueType() {
	    return this.getTypedRuleContext(ClosedEdgeReferenceValueTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterEdgeReferenceValueType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitEdgeReferenceValueType(this);
		}
	}


}



class ClosedEdgeReferenceValueTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_closedEdgeReferenceValueType;
    }

	edgeTypeSpecification() {
	    return this.getTypedRuleContext(EdgeTypeSpecificationContext,0);
	};

	notNull() {
	    return this.getTypedRuleContext(NotNullContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterClosedEdgeReferenceValueType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitClosedEdgeReferenceValueType(this);
		}
	}


}



class OpenEdgeReferenceValueTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_openEdgeReferenceValueType;
    }

	edgeSynonym() {
	    return this.getTypedRuleContext(EdgeSynonymContext,0);
	};

	ANY() {
	    return this.getToken(GQLParser.ANY, 0);
	};

	notNull() {
	    return this.getTypedRuleContext(NotNullContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterOpenEdgeReferenceValueType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitOpenEdgeReferenceValueType(this);
		}
	}


}



class PathValueTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_pathValueType;
    }

	PATH() {
	    return this.getToken(GQLParser.PATH, 0);
	};

	notNull() {
	    return this.getTypedRuleContext(NotNullContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterPathValueType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitPathValueType(this);
		}
	}


}



class ListValueTypeNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_listValueTypeName;
    }

	listValueTypeNameSynonym() {
	    return this.getTypedRuleContext(ListValueTypeNameSynonymContext,0);
	};

	GROUP() {
	    return this.getToken(GQLParser.GROUP, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterListValueTypeName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitListValueTypeName(this);
		}
	}


}



class ListValueTypeNameSynonymContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_listValueTypeNameSynonym;
    }

	LIST() {
	    return this.getToken(GQLParser.LIST, 0);
	};

	ARRAY() {
	    return this.getToken(GQLParser.ARRAY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterListValueTypeNameSynonym(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitListValueTypeNameSynonym(this);
		}
	}


}



class RecordTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_recordType;
    }

	RECORD() {
	    return this.getToken(GQLParser.RECORD, 0);
	};

	ANY() {
	    return this.getToken(GQLParser.ANY, 0);
	};

	notNull() {
	    return this.getTypedRuleContext(NotNullContext,0);
	};

	fieldTypesSpecification() {
	    return this.getTypedRuleContext(FieldTypesSpecificationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterRecordType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitRecordType(this);
		}
	}


}



class FieldTypesSpecificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_fieldTypesSpecification;
    }

	LEFT_BRACE() {
	    return this.getToken(GQLParser.LEFT_BRACE, 0);
	};

	RIGHT_BRACE() {
	    return this.getToken(GQLParser.RIGHT_BRACE, 0);
	};

	fieldTypeList() {
	    return this.getTypedRuleContext(FieldTypeListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterFieldTypesSpecification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitFieldTypesSpecification(this);
		}
	}


}



class FieldTypeListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_fieldTypeList;
    }

	fieldType = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FieldTypeContext);
	    } else {
	        return this.getTypedRuleContext(FieldTypeContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GQLParser.COMMA);
	    } else {
	        return this.getToken(GQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterFieldTypeList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitFieldTypeList(this);
		}
	}


}



class NotNullContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_notNull;
    }

	NOT() {
	    return this.getToken(GQLParser.NOT, 0);
	};

	NULL() {
	    return this.getToken(GQLParser.NULL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterNotNull(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitNotNull(this);
		}
	}


}



class FieldTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_fieldType;
    }

	fieldName() {
	    return this.getTypedRuleContext(FieldNameContext,0);
	};

	valueType() {
	    return this.getTypedRuleContext(ValueTypeContext,0);
	};

	typed() {
	    return this.getTypedRuleContext(TypedContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterFieldType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitFieldType(this);
		}
	}


}



class SearchConditionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_searchCondition;
    }

	booleanValueExpression() {
	    return this.getTypedRuleContext(BooleanValueExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterSearchCondition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitSearchCondition(this);
		}
	}


}



class PredicateContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_predicate;
    }

	existsPredicate() {
	    return this.getTypedRuleContext(ExistsPredicateContext,0);
	};

	nullPredicate() {
	    return this.getTypedRuleContext(NullPredicateContext,0);
	};

	valueTypePredicate() {
	    return this.getTypedRuleContext(ValueTypePredicateContext,0);
	};

	directedPredicate() {
	    return this.getTypedRuleContext(DirectedPredicateContext,0);
	};

	labeledPredicate() {
	    return this.getTypedRuleContext(LabeledPredicateContext,0);
	};

	sourceDestinationPredicate() {
	    return this.getTypedRuleContext(SourceDestinationPredicateContext,0);
	};

	all_differentPredicate() {
	    return this.getTypedRuleContext(All_differentPredicateContext,0);
	};

	samePredicate() {
	    return this.getTypedRuleContext(SamePredicateContext,0);
	};

	property_existsPredicate() {
	    return this.getTypedRuleContext(Property_existsPredicateContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterPredicate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitPredicate(this);
		}
	}


}



class ComparisonPredicatePart2Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_comparisonPredicatePart2;
    }

	compOp() {
	    return this.getTypedRuleContext(CompOpContext,0);
	};

	valueExpression() {
	    return this.getTypedRuleContext(ValueExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterComparisonPredicatePart2(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitComparisonPredicatePart2(this);
		}
	}


}



class CompOpContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_compOp;
    }

	EQUALS_OPERATOR() {
	    return this.getToken(GQLParser.EQUALS_OPERATOR, 0);
	};

	NOT_EQUALS_OPERATOR() {
	    return this.getToken(GQLParser.NOT_EQUALS_OPERATOR, 0);
	};

	LEFT_ANGLE_BRACKET() {
	    return this.getToken(GQLParser.LEFT_ANGLE_BRACKET, 0);
	};

	RIGHT_ANGLE_BRACKET() {
	    return this.getToken(GQLParser.RIGHT_ANGLE_BRACKET, 0);
	};

	LESS_THAN_OR_EQUALS_OPERATOR() {
	    return this.getToken(GQLParser.LESS_THAN_OR_EQUALS_OPERATOR, 0);
	};

	GREATER_THAN_OR_EQUALS_OPERATOR() {
	    return this.getToken(GQLParser.GREATER_THAN_OR_EQUALS_OPERATOR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterCompOp(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitCompOp(this);
		}
	}


}



class ExistsPredicateContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_existsPredicate;
    }

	EXISTS() {
	    return this.getToken(GQLParser.EXISTS, 0);
	};

	LEFT_BRACE() {
	    return this.getToken(GQLParser.LEFT_BRACE, 0);
	};

	graphPattern() {
	    return this.getTypedRuleContext(GraphPatternContext,0);
	};

	RIGHT_BRACE() {
	    return this.getToken(GQLParser.RIGHT_BRACE, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	matchStatementBlock() {
	    return this.getTypedRuleContext(MatchStatementBlockContext,0);
	};

	nestedQuerySpecification() {
	    return this.getTypedRuleContext(NestedQuerySpecificationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterExistsPredicate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitExistsPredicate(this);
		}
	}


}



class NullPredicateContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_nullPredicate;
    }

	valueExpressionPrimary() {
	    return this.getTypedRuleContext(ValueExpressionPrimaryContext,0);
	};

	nullPredicatePart2() {
	    return this.getTypedRuleContext(NullPredicatePart2Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterNullPredicate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitNullPredicate(this);
		}
	}


}



class NullPredicatePart2Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_nullPredicatePart2;
    }

	IS() {
	    return this.getToken(GQLParser.IS, 0);
	};

	NULL() {
	    return this.getToken(GQLParser.NULL, 0);
	};

	NOT() {
	    return this.getToken(GQLParser.NOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterNullPredicatePart2(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitNullPredicatePart2(this);
		}
	}


}



class ValueTypePredicateContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_valueTypePredicate;
    }

	valueExpressionPrimary() {
	    return this.getTypedRuleContext(ValueExpressionPrimaryContext,0);
	};

	valueTypePredicatePart2() {
	    return this.getTypedRuleContext(ValueTypePredicatePart2Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterValueTypePredicate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitValueTypePredicate(this);
		}
	}


}



class ValueTypePredicatePart2Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_valueTypePredicatePart2;
    }

	IS() {
	    return this.getToken(GQLParser.IS, 0);
	};

	typed() {
	    return this.getTypedRuleContext(TypedContext,0);
	};

	valueType() {
	    return this.getTypedRuleContext(ValueTypeContext,0);
	};

	NOT() {
	    return this.getToken(GQLParser.NOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterValueTypePredicatePart2(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitValueTypePredicatePart2(this);
		}
	}


}



class NormalizedPredicatePart2Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_normalizedPredicatePart2;
    }

	IS() {
	    return this.getToken(GQLParser.IS, 0);
	};

	NORMALIZED() {
	    return this.getToken(GQLParser.NORMALIZED, 0);
	};

	NOT() {
	    return this.getToken(GQLParser.NOT, 0);
	};

	normalForm() {
	    return this.getTypedRuleContext(NormalFormContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterNormalizedPredicatePart2(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitNormalizedPredicatePart2(this);
		}
	}


}



class DirectedPredicateContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_directedPredicate;
    }

	elementVariableReference() {
	    return this.getTypedRuleContext(ElementVariableReferenceContext,0);
	};

	directedPredicatePart2() {
	    return this.getTypedRuleContext(DirectedPredicatePart2Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterDirectedPredicate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitDirectedPredicate(this);
		}
	}


}



class DirectedPredicatePart2Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_directedPredicatePart2;
    }

	IS() {
	    return this.getToken(GQLParser.IS, 0);
	};

	DIRECTED() {
	    return this.getToken(GQLParser.DIRECTED, 0);
	};

	NOT() {
	    return this.getToken(GQLParser.NOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterDirectedPredicatePart2(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitDirectedPredicatePart2(this);
		}
	}


}



class LabeledPredicateContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_labeledPredicate;
    }

	elementVariableReference() {
	    return this.getTypedRuleContext(ElementVariableReferenceContext,0);
	};

	labeledPredicatePart2() {
	    return this.getTypedRuleContext(LabeledPredicatePart2Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterLabeledPredicate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitLabeledPredicate(this);
		}
	}


}



class LabeledPredicatePart2Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_labeledPredicatePart2;
    }

	isLabeledOrColon() {
	    return this.getTypedRuleContext(IsLabeledOrColonContext,0);
	};

	labelExpression() {
	    return this.getTypedRuleContext(LabelExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterLabeledPredicatePart2(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitLabeledPredicatePart2(this);
		}
	}


}



class IsLabeledOrColonContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_isLabeledOrColon;
    }

	IS() {
	    return this.getToken(GQLParser.IS, 0);
	};

	LABELED() {
	    return this.getToken(GQLParser.LABELED, 0);
	};

	NOT() {
	    return this.getToken(GQLParser.NOT, 0);
	};

	COLON() {
	    return this.getToken(GQLParser.COLON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterIsLabeledOrColon(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitIsLabeledOrColon(this);
		}
	}


}



class SourceDestinationPredicateContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_sourceDestinationPredicate;
    }

	nodeReference() {
	    return this.getTypedRuleContext(NodeReferenceContext,0);
	};

	sourcePredicatePart2() {
	    return this.getTypedRuleContext(SourcePredicatePart2Context,0);
	};

	destinationPredicatePart2() {
	    return this.getTypedRuleContext(DestinationPredicatePart2Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterSourceDestinationPredicate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitSourceDestinationPredicate(this);
		}
	}


}



class NodeReferenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_nodeReference;
    }

	elementVariableReference() {
	    return this.getTypedRuleContext(ElementVariableReferenceContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterNodeReference(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitNodeReference(this);
		}
	}


}



class SourcePredicatePart2Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_sourcePredicatePart2;
    }

	IS() {
	    return this.getToken(GQLParser.IS, 0);
	};

	SOURCE() {
	    return this.getToken(GQLParser.SOURCE, 0);
	};

	OF() {
	    return this.getToken(GQLParser.OF, 0);
	};

	edgeReference() {
	    return this.getTypedRuleContext(EdgeReferenceContext,0);
	};

	NOT() {
	    return this.getToken(GQLParser.NOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterSourcePredicatePart2(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitSourcePredicatePart2(this);
		}
	}


}



class DestinationPredicatePart2Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_destinationPredicatePart2;
    }

	IS() {
	    return this.getToken(GQLParser.IS, 0);
	};

	DESTINATION() {
	    return this.getToken(GQLParser.DESTINATION, 0);
	};

	OF() {
	    return this.getToken(GQLParser.OF, 0);
	};

	edgeReference() {
	    return this.getTypedRuleContext(EdgeReferenceContext,0);
	};

	NOT() {
	    return this.getToken(GQLParser.NOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterDestinationPredicatePart2(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitDestinationPredicatePart2(this);
		}
	}


}



class EdgeReferenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_edgeReference;
    }

	elementVariableReference() {
	    return this.getTypedRuleContext(ElementVariableReferenceContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterEdgeReference(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitEdgeReference(this);
		}
	}


}



class All_differentPredicateContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_all_differentPredicate;
    }

	ALL_DIFFERENT() {
	    return this.getToken(GQLParser.ALL_DIFFERENT, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	elementVariableReference = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ElementVariableReferenceContext);
	    } else {
	        return this.getTypedRuleContext(ElementVariableReferenceContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GQLParser.COMMA);
	    } else {
	        return this.getToken(GQLParser.COMMA, i);
	    }
	};


	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterAll_differentPredicate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitAll_differentPredicate(this);
		}
	}


}



class SamePredicateContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_samePredicate;
    }

	SAME() {
	    return this.getToken(GQLParser.SAME, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	elementVariableReference = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ElementVariableReferenceContext);
	    } else {
	        return this.getTypedRuleContext(ElementVariableReferenceContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GQLParser.COMMA);
	    } else {
	        return this.getToken(GQLParser.COMMA, i);
	    }
	};


	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterSamePredicate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitSamePredicate(this);
		}
	}


}



class Property_existsPredicateContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_property_existsPredicate;
    }

	PROPERTY_EXISTS() {
	    return this.getToken(GQLParser.PROPERTY_EXISTS, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	elementVariableReference() {
	    return this.getTypedRuleContext(ElementVariableReferenceContext,0);
	};

	COMMA() {
	    return this.getToken(GQLParser.COMMA, 0);
	};

	propertyName() {
	    return this.getTypedRuleContext(PropertyNameContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterProperty_existsPredicate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitProperty_existsPredicate(this);
		}
	}


}



class ValueExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_valueExpression;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class ConjunctiveExprAltContext extends ValueExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	valueExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ValueExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ValueExpressionContext,i);
	    }
	};

	AND() {
	    return this.getToken(GQLParser.AND, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterConjunctiveExprAlt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitConjunctiveExprAlt(this);
		}
	}


}

GQLParser.ConjunctiveExprAltContext = ConjunctiveExprAltContext;

class PropertyGraphExprAltContext extends ValueExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	GRAPH() {
	    return this.getToken(GQLParser.GRAPH, 0);
	};

	graphExpression() {
	    return this.getTypedRuleContext(GraphExpressionContext,0);
	};

	PROPERTY() {
	    return this.getToken(GQLParser.PROPERTY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterPropertyGraphExprAlt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitPropertyGraphExprAlt(this);
		}
	}


}

GQLParser.PropertyGraphExprAltContext = PropertyGraphExprAltContext;

class MultDivExprAltContext extends ValueExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.operator = null;;
        super.copyFrom(ctx);
    }

	valueExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ValueExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ValueExpressionContext,i);
	    }
	};

	ASTERISK() {
	    return this.getToken(GQLParser.ASTERISK, 0);
	};

	SOLIDUS() {
	    return this.getToken(GQLParser.SOLIDUS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterMultDivExprAlt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitMultDivExprAlt(this);
		}
	}


}

GQLParser.MultDivExprAltContext = MultDivExprAltContext;

class BindingTableExprAltContext extends ValueExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	TABLE() {
	    return this.getToken(GQLParser.TABLE, 0);
	};

	bindingTableExpression() {
	    return this.getTypedRuleContext(BindingTableExpressionContext,0);
	};

	BINDING() {
	    return this.getToken(GQLParser.BINDING, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterBindingTableExprAlt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitBindingTableExprAlt(this);
		}
	}


}

GQLParser.BindingTableExprAltContext = BindingTableExprAltContext;

class SignedExprAltContext extends ValueExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.sign = null;;
        super.copyFrom(ctx);
    }

	valueExpression() {
	    return this.getTypedRuleContext(ValueExpressionContext,0);
	};

	PLUS_SIGN() {
	    return this.getToken(GQLParser.PLUS_SIGN, 0);
	};

	MINUS_SIGN() {
	    return this.getToken(GQLParser.MINUS_SIGN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterSignedExprAlt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitSignedExprAlt(this);
		}
	}


}

GQLParser.SignedExprAltContext = SignedExprAltContext;

class IsNotExprAltContext extends ValueExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	valueExpression() {
	    return this.getTypedRuleContext(ValueExpressionContext,0);
	};

	IS() {
	    return this.getToken(GQLParser.IS, 0);
	};

	truthValue() {
	    return this.getTypedRuleContext(TruthValueContext,0);
	};

	NOT() {
	    return this.getToken(GQLParser.NOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterIsNotExprAlt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitIsNotExprAlt(this);
		}
	}


}

GQLParser.IsNotExprAltContext = IsNotExprAltContext;

class NormalizedPredicateExprAltContext extends ValueExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	valueExpression() {
	    return this.getTypedRuleContext(ValueExpressionContext,0);
	};

	normalizedPredicatePart2() {
	    return this.getTypedRuleContext(NormalizedPredicatePart2Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterNormalizedPredicateExprAlt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitNormalizedPredicateExprAlt(this);
		}
	}


}

GQLParser.NormalizedPredicateExprAltContext = NormalizedPredicateExprAltContext;

class NotExprAltContext extends ValueExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	NOT() {
	    return this.getToken(GQLParser.NOT, 0);
	};

	valueExpression() {
	    return this.getTypedRuleContext(ValueExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterNotExprAlt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitNotExprAlt(this);
		}
	}


}

GQLParser.NotExprAltContext = NotExprAltContext;

class ValueFunctionExprAltContext extends ValueExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	valueFunction() {
	    return this.getTypedRuleContext(ValueFunctionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterValueFunctionExprAlt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitValueFunctionExprAlt(this);
		}
	}


}

GQLParser.ValueFunctionExprAltContext = ValueFunctionExprAltContext;

class ConcatenationExprAltContext extends ValueExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	valueExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ValueExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ValueExpressionContext,i);
	    }
	};

	CONCATENATION_OPERATOR() {
	    return this.getToken(GQLParser.CONCATENATION_OPERATOR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterConcatenationExprAlt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitConcatenationExprAlt(this);
		}
	}


}

GQLParser.ConcatenationExprAltContext = ConcatenationExprAltContext;

class DisjunctiveExprAltContext extends ValueExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.operator = null;;
        super.copyFrom(ctx);
    }

	valueExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ValueExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ValueExpressionContext,i);
	    }
	};

	OR() {
	    return this.getToken(GQLParser.OR, 0);
	};

	XOR() {
	    return this.getToken(GQLParser.XOR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterDisjunctiveExprAlt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitDisjunctiveExprAlt(this);
		}
	}


}

GQLParser.DisjunctiveExprAltContext = DisjunctiveExprAltContext;

class ComparisonExprAltContext extends ValueExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	valueExpression() {
	    return this.getTypedRuleContext(ValueExpressionContext,0);
	};

	comparisonPredicatePart2() {
	    return this.getTypedRuleContext(ComparisonPredicatePart2Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterComparisonExprAlt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitComparisonExprAlt(this);
		}
	}


}

GQLParser.ComparisonExprAltContext = ComparisonExprAltContext;

class PrimaryExprAltContext extends ValueExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	valueExpressionPrimary() {
	    return this.getTypedRuleContext(ValueExpressionPrimaryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterPrimaryExprAlt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitPrimaryExprAlt(this);
		}
	}


}

GQLParser.PrimaryExprAltContext = PrimaryExprAltContext;

class AddSubtractExprAltContext extends ValueExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.operator = null;;
        super.copyFrom(ctx);
    }

	valueExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ValueExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ValueExpressionContext,i);
	    }
	};

	PLUS_SIGN() {
	    return this.getToken(GQLParser.PLUS_SIGN, 0);
	};

	MINUS_SIGN() {
	    return this.getToken(GQLParser.MINUS_SIGN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterAddSubtractExprAlt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitAddSubtractExprAlt(this);
		}
	}


}

GQLParser.AddSubtractExprAltContext = AddSubtractExprAltContext;

class PredicateExprAltContext extends ValueExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	predicate() {
	    return this.getTypedRuleContext(PredicateContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterPredicateExprAlt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitPredicateExprAlt(this);
		}
	}


}

GQLParser.PredicateExprAltContext = PredicateExprAltContext;

class ValueFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_valueFunction;
    }

	numericValueFunction() {
	    return this.getTypedRuleContext(NumericValueFunctionContext,0);
	};

	datetimeSubtraction() {
	    return this.getTypedRuleContext(DatetimeSubtractionContext,0);
	};

	datetimeValueFunction() {
	    return this.getTypedRuleContext(DatetimeValueFunctionContext,0);
	};

	durationValueFunction() {
	    return this.getTypedRuleContext(DurationValueFunctionContext,0);
	};

	characterOrByteStringFunction() {
	    return this.getTypedRuleContext(CharacterOrByteStringFunctionContext,0);
	};

	listValueFunction() {
	    return this.getTypedRuleContext(ListValueFunctionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterValueFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitValueFunction(this);
		}
	}


}



class BooleanValueExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_booleanValueExpression;
    }

	valueExpression() {
	    return this.getTypedRuleContext(ValueExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterBooleanValueExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitBooleanValueExpression(this);
		}
	}


}



class CharacterOrByteStringFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_characterOrByteStringFunction;
    }

	subCharacterOrByteString() {
	    return this.getTypedRuleContext(SubCharacterOrByteStringContext,0);
	};

	trimSingleCharacterOrByteString() {
	    return this.getTypedRuleContext(TrimSingleCharacterOrByteStringContext,0);
	};

	foldCharacterString() {
	    return this.getTypedRuleContext(FoldCharacterStringContext,0);
	};

	trimMultiCharacterCharacterString() {
	    return this.getTypedRuleContext(TrimMultiCharacterCharacterStringContext,0);
	};

	normalizeCharacterString() {
	    return this.getTypedRuleContext(NormalizeCharacterStringContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterCharacterOrByteStringFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitCharacterOrByteStringFunction(this);
		}
	}


}



class SubCharacterOrByteStringContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_subCharacterOrByteString;
    }

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	valueExpression() {
	    return this.getTypedRuleContext(ValueExpressionContext,0);
	};

	COMMA() {
	    return this.getToken(GQLParser.COMMA, 0);
	};

	stringLength() {
	    return this.getTypedRuleContext(StringLengthContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	LEFT() {
	    return this.getToken(GQLParser.LEFT, 0);
	};

	RIGHT() {
	    return this.getToken(GQLParser.RIGHT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterSubCharacterOrByteString(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitSubCharacterOrByteString(this);
		}
	}


}



class TrimSingleCharacterOrByteStringContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_trimSingleCharacterOrByteString;
    }

	TRIM() {
	    return this.getToken(GQLParser.TRIM, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	trimOperands() {
	    return this.getTypedRuleContext(TrimOperandsContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterTrimSingleCharacterOrByteString(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitTrimSingleCharacterOrByteString(this);
		}
	}


}



class FoldCharacterStringContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_foldCharacterString;
    }

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	valueExpression() {
	    return this.getTypedRuleContext(ValueExpressionContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	UPPER() {
	    return this.getToken(GQLParser.UPPER, 0);
	};

	LOWER() {
	    return this.getToken(GQLParser.LOWER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterFoldCharacterString(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitFoldCharacterString(this);
		}
	}


}



class TrimMultiCharacterCharacterStringContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_trimMultiCharacterCharacterString;
    }

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	valueExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ValueExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ValueExpressionContext,i);
	    }
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	BTRIM() {
	    return this.getToken(GQLParser.BTRIM, 0);
	};

	LTRIM() {
	    return this.getToken(GQLParser.LTRIM, 0);
	};

	RTRIM() {
	    return this.getToken(GQLParser.RTRIM, 0);
	};

	COMMA() {
	    return this.getToken(GQLParser.COMMA, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterTrimMultiCharacterCharacterString(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitTrimMultiCharacterCharacterString(this);
		}
	}


}



class NormalizeCharacterStringContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_normalizeCharacterString;
    }

	NORMALIZE() {
	    return this.getToken(GQLParser.NORMALIZE, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	valueExpression() {
	    return this.getTypedRuleContext(ValueExpressionContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	COMMA() {
	    return this.getToken(GQLParser.COMMA, 0);
	};

	normalForm() {
	    return this.getTypedRuleContext(NormalFormContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterNormalizeCharacterString(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitNormalizeCharacterString(this);
		}
	}


}



class NodeReferenceValueExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_nodeReferenceValueExpression;
    }

	valueExpressionPrimary() {
	    return this.getTypedRuleContext(ValueExpressionPrimaryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterNodeReferenceValueExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitNodeReferenceValueExpression(this);
		}
	}


}



class EdgeReferenceValueExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_edgeReferenceValueExpression;
    }

	valueExpressionPrimary() {
	    return this.getTypedRuleContext(ValueExpressionPrimaryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterEdgeReferenceValueExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitEdgeReferenceValueExpression(this);
		}
	}


}



class AggregatingValueExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_aggregatingValueExpression;
    }

	valueExpression() {
	    return this.getTypedRuleContext(ValueExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterAggregatingValueExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitAggregatingValueExpression(this);
		}
	}


}



class ValueExpressionPrimaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_valueExpressionPrimary;
    }

	parenthesizedValueExpression() {
	    return this.getTypedRuleContext(ParenthesizedValueExpressionContext,0);
	};

	aggregateFunction() {
	    return this.getTypedRuleContext(AggregateFunctionContext,0);
	};

	unsignedValueSpecification() {
	    return this.getTypedRuleContext(UnsignedValueSpecificationContext,0);
	};

	pathValueConstructor() {
	    return this.getTypedRuleContext(PathValueConstructorContext,0);
	};

	valueQueryExpression() {
	    return this.getTypedRuleContext(ValueQueryExpressionContext,0);
	};

	caseExpression() {
	    return this.getTypedRuleContext(CaseExpressionContext,0);
	};

	castSpecification() {
	    return this.getTypedRuleContext(CastSpecificationContext,0);
	};

	element_idFunction() {
	    return this.getTypedRuleContext(Element_idFunctionContext,0);
	};

	letValueExpression() {
	    return this.getTypedRuleContext(LetValueExpressionContext,0);
	};

	bindingVariableReference() {
	    return this.getTypedRuleContext(BindingVariableReferenceContext,0);
	};

	valueExpressionPrimary() {
	    return this.getTypedRuleContext(ValueExpressionPrimaryContext,0);
	};

	PERIOD() {
	    return this.getToken(GQLParser.PERIOD, 0);
	};

	propertyName() {
	    return this.getTypedRuleContext(PropertyNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterValueExpressionPrimary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitValueExpressionPrimary(this);
		}
	}


}



class ParenthesizedValueExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_parenthesizedValueExpression;
    }

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	valueExpression() {
	    return this.getTypedRuleContext(ValueExpressionContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterParenthesizedValueExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitParenthesizedValueExpression(this);
		}
	}


}



class NonParenthesizedValueExpressionPrimaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_nonParenthesizedValueExpressionPrimary;
    }

	nonParenthesizedValueExpressionPrimarySpecialCase() {
	    return this.getTypedRuleContext(NonParenthesizedValueExpressionPrimarySpecialCaseContext,0);
	};

	bindingVariableReference() {
	    return this.getTypedRuleContext(BindingVariableReferenceContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterNonParenthesizedValueExpressionPrimary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitNonParenthesizedValueExpressionPrimary(this);
		}
	}


}



class NonParenthesizedValueExpressionPrimarySpecialCaseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_nonParenthesizedValueExpressionPrimarySpecialCase;
    }

	aggregateFunction() {
	    return this.getTypedRuleContext(AggregateFunctionContext,0);
	};

	unsignedValueSpecification() {
	    return this.getTypedRuleContext(UnsignedValueSpecificationContext,0);
	};

	pathValueConstructor() {
	    return this.getTypedRuleContext(PathValueConstructorContext,0);
	};

	valueExpressionPrimary() {
	    return this.getTypedRuleContext(ValueExpressionPrimaryContext,0);
	};

	PERIOD() {
	    return this.getToken(GQLParser.PERIOD, 0);
	};

	propertyName() {
	    return this.getTypedRuleContext(PropertyNameContext,0);
	};

	valueQueryExpression() {
	    return this.getTypedRuleContext(ValueQueryExpressionContext,0);
	};

	caseExpression() {
	    return this.getTypedRuleContext(CaseExpressionContext,0);
	};

	castSpecification() {
	    return this.getTypedRuleContext(CastSpecificationContext,0);
	};

	element_idFunction() {
	    return this.getTypedRuleContext(Element_idFunctionContext,0);
	};

	letValueExpression() {
	    return this.getTypedRuleContext(LetValueExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterNonParenthesizedValueExpressionPrimarySpecialCase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitNonParenthesizedValueExpressionPrimarySpecialCase(this);
		}
	}


}



class UnsignedValueSpecificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_unsignedValueSpecification;
    }

	unsignedLiteral() {
	    return this.getTypedRuleContext(UnsignedLiteralContext,0);
	};

	generalValueSpecification() {
	    return this.getTypedRuleContext(GeneralValueSpecificationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterUnsignedValueSpecification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitUnsignedValueSpecification(this);
		}
	}


}



class NonNegativeIntegerSpecificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_nonNegativeIntegerSpecification;
    }

	unsignedInteger() {
	    return this.getTypedRuleContext(UnsignedIntegerContext,0);
	};

	dynamicParameterSpecification() {
	    return this.getTypedRuleContext(DynamicParameterSpecificationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterNonNegativeIntegerSpecification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitNonNegativeIntegerSpecification(this);
		}
	}


}



class GeneralValueSpecificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_generalValueSpecification;
    }

	dynamicParameterSpecification() {
	    return this.getTypedRuleContext(DynamicParameterSpecificationContext,0);
	};

	SESSION_USER() {
	    return this.getToken(GQLParser.SESSION_USER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterGeneralValueSpecification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitGeneralValueSpecification(this);
		}
	}


}



class DynamicParameterSpecificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_dynamicParameterSpecification;
    }

	GENERAL_PARAMETER_REFERENCE() {
	    return this.getToken(GQLParser.GENERAL_PARAMETER_REFERENCE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterDynamicParameterSpecification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitDynamicParameterSpecification(this);
		}
	}


}



class LetValueExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_letValueExpression;
    }

	LET() {
	    return this.getToken(GQLParser.LET, 0);
	};

	letVariableDefinitionList() {
	    return this.getTypedRuleContext(LetVariableDefinitionListContext,0);
	};

	IN() {
	    return this.getToken(GQLParser.IN, 0);
	};

	valueExpression() {
	    return this.getTypedRuleContext(ValueExpressionContext,0);
	};

	END() {
	    return this.getToken(GQLParser.END, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterLetValueExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitLetValueExpression(this);
		}
	}


}



class ValueQueryExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_valueQueryExpression;
    }

	VALUE() {
	    return this.getToken(GQLParser.VALUE, 0);
	};

	nestedQuerySpecification() {
	    return this.getTypedRuleContext(NestedQuerySpecificationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterValueQueryExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitValueQueryExpression(this);
		}
	}


}



class CaseExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_caseExpression;
    }

	caseAbbreviation() {
	    return this.getTypedRuleContext(CaseAbbreviationContext,0);
	};

	caseSpecification() {
	    return this.getTypedRuleContext(CaseSpecificationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterCaseExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitCaseExpression(this);
		}
	}


}



class CaseAbbreviationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_caseAbbreviation;
    }

	NULLIF() {
	    return this.getToken(GQLParser.NULLIF, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	valueExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ValueExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ValueExpressionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GQLParser.COMMA);
	    } else {
	        return this.getToken(GQLParser.COMMA, i);
	    }
	};


	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	COALESCE() {
	    return this.getToken(GQLParser.COALESCE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterCaseAbbreviation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitCaseAbbreviation(this);
		}
	}


}



class CaseSpecificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_caseSpecification;
    }

	simpleCase() {
	    return this.getTypedRuleContext(SimpleCaseContext,0);
	};

	searchedCase() {
	    return this.getTypedRuleContext(SearchedCaseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterCaseSpecification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitCaseSpecification(this);
		}
	}


}



class SimpleCaseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_simpleCase;
    }

	CASE() {
	    return this.getToken(GQLParser.CASE, 0);
	};

	caseOperand() {
	    return this.getTypedRuleContext(CaseOperandContext,0);
	};

	END() {
	    return this.getToken(GQLParser.END, 0);
	};

	simpleWhenClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SimpleWhenClauseContext);
	    } else {
	        return this.getTypedRuleContext(SimpleWhenClauseContext,i);
	    }
	};

	elseClause() {
	    return this.getTypedRuleContext(ElseClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterSimpleCase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitSimpleCase(this);
		}
	}


}



class SearchedCaseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_searchedCase;
    }

	CASE() {
	    return this.getToken(GQLParser.CASE, 0);
	};

	END() {
	    return this.getToken(GQLParser.END, 0);
	};

	searchedWhenClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SearchedWhenClauseContext);
	    } else {
	        return this.getTypedRuleContext(SearchedWhenClauseContext,i);
	    }
	};

	elseClause() {
	    return this.getTypedRuleContext(ElseClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterSearchedCase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitSearchedCase(this);
		}
	}


}



class SimpleWhenClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_simpleWhenClause;
    }

	WHEN() {
	    return this.getToken(GQLParser.WHEN, 0);
	};

	whenOperandList() {
	    return this.getTypedRuleContext(WhenOperandListContext,0);
	};

	THEN() {
	    return this.getToken(GQLParser.THEN, 0);
	};

	result() {
	    return this.getTypedRuleContext(ResultContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterSimpleWhenClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitSimpleWhenClause(this);
		}
	}


}



class SearchedWhenClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_searchedWhenClause;
    }

	WHEN() {
	    return this.getToken(GQLParser.WHEN, 0);
	};

	searchCondition() {
	    return this.getTypedRuleContext(SearchConditionContext,0);
	};

	THEN() {
	    return this.getToken(GQLParser.THEN, 0);
	};

	result() {
	    return this.getTypedRuleContext(ResultContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterSearchedWhenClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitSearchedWhenClause(this);
		}
	}


}



class ElseClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_elseClause;
    }

	ELSE() {
	    return this.getToken(GQLParser.ELSE, 0);
	};

	result() {
	    return this.getTypedRuleContext(ResultContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterElseClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitElseClause(this);
		}
	}


}



class CaseOperandContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_caseOperand;
    }

	nonParenthesizedValueExpressionPrimary() {
	    return this.getTypedRuleContext(NonParenthesizedValueExpressionPrimaryContext,0);
	};

	elementVariableReference() {
	    return this.getTypedRuleContext(ElementVariableReferenceContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterCaseOperand(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitCaseOperand(this);
		}
	}


}



class WhenOperandListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_whenOperandList;
    }

	whenOperand = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(WhenOperandContext);
	    } else {
	        return this.getTypedRuleContext(WhenOperandContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GQLParser.COMMA);
	    } else {
	        return this.getToken(GQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterWhenOperandList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitWhenOperandList(this);
		}
	}


}



class WhenOperandContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_whenOperand;
    }

	nonParenthesizedValueExpressionPrimary() {
	    return this.getTypedRuleContext(NonParenthesizedValueExpressionPrimaryContext,0);
	};

	comparisonPredicatePart2() {
	    return this.getTypedRuleContext(ComparisonPredicatePart2Context,0);
	};

	nullPredicatePart2() {
	    return this.getTypedRuleContext(NullPredicatePart2Context,0);
	};

	valueTypePredicatePart2() {
	    return this.getTypedRuleContext(ValueTypePredicatePart2Context,0);
	};

	normalizedPredicatePart2() {
	    return this.getTypedRuleContext(NormalizedPredicatePart2Context,0);
	};

	directedPredicatePart2() {
	    return this.getTypedRuleContext(DirectedPredicatePart2Context,0);
	};

	labeledPredicatePart2() {
	    return this.getTypedRuleContext(LabeledPredicatePart2Context,0);
	};

	sourcePredicatePart2() {
	    return this.getTypedRuleContext(SourcePredicatePart2Context,0);
	};

	destinationPredicatePart2() {
	    return this.getTypedRuleContext(DestinationPredicatePart2Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterWhenOperand(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitWhenOperand(this);
		}
	}


}



class ResultContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_result;
    }

	resultExpression() {
	    return this.getTypedRuleContext(ResultExpressionContext,0);
	};

	nullLiteral() {
	    return this.getTypedRuleContext(NullLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterResult(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitResult(this);
		}
	}


}



class ResultExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_resultExpression;
    }

	valueExpression() {
	    return this.getTypedRuleContext(ValueExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterResultExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitResultExpression(this);
		}
	}


}



class CastSpecificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_castSpecification;
    }

	CAST() {
	    return this.getToken(GQLParser.CAST, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	castOperand() {
	    return this.getTypedRuleContext(CastOperandContext,0);
	};

	AS() {
	    return this.getToken(GQLParser.AS, 0);
	};

	castTarget() {
	    return this.getTypedRuleContext(CastTargetContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterCastSpecification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitCastSpecification(this);
		}
	}


}



class CastOperandContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_castOperand;
    }

	valueExpression() {
	    return this.getTypedRuleContext(ValueExpressionContext,0);
	};

	nullLiteral() {
	    return this.getTypedRuleContext(NullLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterCastOperand(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitCastOperand(this);
		}
	}


}



class CastTargetContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_castTarget;
    }

	valueType() {
	    return this.getTypedRuleContext(ValueTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterCastTarget(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitCastTarget(this);
		}
	}


}



class AggregateFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_aggregateFunction;
    }

	COUNT() {
	    return this.getToken(GQLParser.COUNT, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	ASTERISK() {
	    return this.getToken(GQLParser.ASTERISK, 0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	generalSetFunction() {
	    return this.getTypedRuleContext(GeneralSetFunctionContext,0);
	};

	binarySetFunction() {
	    return this.getTypedRuleContext(BinarySetFunctionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterAggregateFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitAggregateFunction(this);
		}
	}


}



class GeneralSetFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_generalSetFunction;
    }

	generalSetFunctionType() {
	    return this.getTypedRuleContext(GeneralSetFunctionTypeContext,0);
	};

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	valueExpression() {
	    return this.getTypedRuleContext(ValueExpressionContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	setQuantifier() {
	    return this.getTypedRuleContext(SetQuantifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterGeneralSetFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitGeneralSetFunction(this);
		}
	}


}



class BinarySetFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_binarySetFunction;
    }

	binarySetFunctionType() {
	    return this.getTypedRuleContext(BinarySetFunctionTypeContext,0);
	};

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	dependentValueExpression() {
	    return this.getTypedRuleContext(DependentValueExpressionContext,0);
	};

	COMMA() {
	    return this.getToken(GQLParser.COMMA, 0);
	};

	independentValueExpression() {
	    return this.getTypedRuleContext(IndependentValueExpressionContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterBinarySetFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitBinarySetFunction(this);
		}
	}


}



class GeneralSetFunctionTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_generalSetFunctionType;
    }

	AVG() {
	    return this.getToken(GQLParser.AVG, 0);
	};

	COUNT() {
	    return this.getToken(GQLParser.COUNT, 0);
	};

	MAX() {
	    return this.getToken(GQLParser.MAX, 0);
	};

	MIN() {
	    return this.getToken(GQLParser.MIN, 0);
	};

	SUM() {
	    return this.getToken(GQLParser.SUM, 0);
	};

	COLLECT_LIST() {
	    return this.getToken(GQLParser.COLLECT_LIST, 0);
	};

	STDDEV_SAMP() {
	    return this.getToken(GQLParser.STDDEV_SAMP, 0);
	};

	STDDEV_POP() {
	    return this.getToken(GQLParser.STDDEV_POP, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterGeneralSetFunctionType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitGeneralSetFunctionType(this);
		}
	}


}



class SetQuantifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_setQuantifier;
    }

	DISTINCT() {
	    return this.getToken(GQLParser.DISTINCT, 0);
	};

	ALL() {
	    return this.getToken(GQLParser.ALL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterSetQuantifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitSetQuantifier(this);
		}
	}


}



class BinarySetFunctionTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_binarySetFunctionType;
    }

	PERCENTILE_CONT() {
	    return this.getToken(GQLParser.PERCENTILE_CONT, 0);
	};

	PERCENTILE_DISC() {
	    return this.getToken(GQLParser.PERCENTILE_DISC, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterBinarySetFunctionType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitBinarySetFunctionType(this);
		}
	}


}



class DependentValueExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_dependentValueExpression;
    }

	numericValueExpression() {
	    return this.getTypedRuleContext(NumericValueExpressionContext,0);
	};

	setQuantifier() {
	    return this.getTypedRuleContext(SetQuantifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterDependentValueExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitDependentValueExpression(this);
		}
	}


}



class IndependentValueExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_independentValueExpression;
    }

	numericValueExpression() {
	    return this.getTypedRuleContext(NumericValueExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterIndependentValueExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitIndependentValueExpression(this);
		}
	}


}



class Element_idFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_element_idFunction;
    }

	ELEMENT_ID() {
	    return this.getToken(GQLParser.ELEMENT_ID, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	elementVariableReference() {
	    return this.getTypedRuleContext(ElementVariableReferenceContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterElement_idFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitElement_idFunction(this);
		}
	}


}



class BindingVariableReferenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_bindingVariableReference;
    }

	bindingVariable() {
	    return this.getTypedRuleContext(BindingVariableContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterBindingVariableReference(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitBindingVariableReference(this);
		}
	}


}



class PathValueExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_pathValueExpression;
    }

	valueExpression() {
	    return this.getTypedRuleContext(ValueExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterPathValueExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitPathValueExpression(this);
		}
	}


}



class PathValueConstructorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_pathValueConstructor;
    }

	pathValueConstructorByEnumeration() {
	    return this.getTypedRuleContext(PathValueConstructorByEnumerationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterPathValueConstructor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitPathValueConstructor(this);
		}
	}


}



class PathValueConstructorByEnumerationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_pathValueConstructorByEnumeration;
    }

	PATH() {
	    return this.getToken(GQLParser.PATH, 0);
	};

	LEFT_BRACKET() {
	    return this.getToken(GQLParser.LEFT_BRACKET, 0);
	};

	pathElementList() {
	    return this.getTypedRuleContext(PathElementListContext,0);
	};

	RIGHT_BRACKET() {
	    return this.getToken(GQLParser.RIGHT_BRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterPathValueConstructorByEnumeration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitPathValueConstructorByEnumeration(this);
		}
	}


}



class PathElementListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_pathElementList;
    }

	pathElementListStart() {
	    return this.getTypedRuleContext(PathElementListStartContext,0);
	};

	pathElementListStep = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PathElementListStepContext);
	    } else {
	        return this.getTypedRuleContext(PathElementListStepContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterPathElementList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitPathElementList(this);
		}
	}


}



class PathElementListStartContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_pathElementListStart;
    }

	nodeReferenceValueExpression() {
	    return this.getTypedRuleContext(NodeReferenceValueExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterPathElementListStart(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitPathElementListStart(this);
		}
	}


}



class PathElementListStepContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_pathElementListStep;
    }

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GQLParser.COMMA);
	    } else {
	        return this.getToken(GQLParser.COMMA, i);
	    }
	};


	edgeReferenceValueExpression() {
	    return this.getTypedRuleContext(EdgeReferenceValueExpressionContext,0);
	};

	nodeReferenceValueExpression() {
	    return this.getTypedRuleContext(NodeReferenceValueExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterPathElementListStep(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitPathElementListStep(this);
		}
	}


}



class ListValueExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_listValueExpression;
    }

	valueExpression() {
	    return this.getTypedRuleContext(ValueExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterListValueExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitListValueExpression(this);
		}
	}


}



class ListValueFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_listValueFunction;
    }

	trimListFunction() {
	    return this.getTypedRuleContext(TrimListFunctionContext,0);
	};

	elementsFunction() {
	    return this.getTypedRuleContext(ElementsFunctionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterListValueFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitListValueFunction(this);
		}
	}


}



class TrimListFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_trimListFunction;
    }

	TRIM() {
	    return this.getToken(GQLParser.TRIM, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	listValueExpression() {
	    return this.getTypedRuleContext(ListValueExpressionContext,0);
	};

	COMMA() {
	    return this.getToken(GQLParser.COMMA, 0);
	};

	numericValueExpression() {
	    return this.getTypedRuleContext(NumericValueExpressionContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterTrimListFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitTrimListFunction(this);
		}
	}


}



class ElementsFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_elementsFunction;
    }

	ELEMENTS() {
	    return this.getToken(GQLParser.ELEMENTS, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	pathValueExpression() {
	    return this.getTypedRuleContext(PathValueExpressionContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterElementsFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitElementsFunction(this);
		}
	}


}



class ListValueConstructorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_listValueConstructor;
    }

	listValueConstructorByEnumeration() {
	    return this.getTypedRuleContext(ListValueConstructorByEnumerationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterListValueConstructor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitListValueConstructor(this);
		}
	}


}



class ListValueConstructorByEnumerationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_listValueConstructorByEnumeration;
    }

	LEFT_BRACKET() {
	    return this.getToken(GQLParser.LEFT_BRACKET, 0);
	};

	RIGHT_BRACKET() {
	    return this.getToken(GQLParser.RIGHT_BRACKET, 0);
	};

	listValueTypeName() {
	    return this.getTypedRuleContext(ListValueTypeNameContext,0);
	};

	listElementList() {
	    return this.getTypedRuleContext(ListElementListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterListValueConstructorByEnumeration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitListValueConstructorByEnumeration(this);
		}
	}


}



class ListElementListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_listElementList;
    }

	listElement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ListElementContext);
	    } else {
	        return this.getTypedRuleContext(ListElementContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GQLParser.COMMA);
	    } else {
	        return this.getToken(GQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterListElementList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitListElementList(this);
		}
	}


}



class ListElementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_listElement;
    }

	valueExpression() {
	    return this.getTypedRuleContext(ValueExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterListElement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitListElement(this);
		}
	}


}



class RecordConstructorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_recordConstructor;
    }

	fieldsSpecification() {
	    return this.getTypedRuleContext(FieldsSpecificationContext,0);
	};

	RECORD() {
	    return this.getToken(GQLParser.RECORD, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterRecordConstructor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitRecordConstructor(this);
		}
	}


}



class FieldsSpecificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_fieldsSpecification;
    }

	LEFT_BRACE() {
	    return this.getToken(GQLParser.LEFT_BRACE, 0);
	};

	RIGHT_BRACE() {
	    return this.getToken(GQLParser.RIGHT_BRACE, 0);
	};

	fieldList() {
	    return this.getTypedRuleContext(FieldListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterFieldsSpecification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitFieldsSpecification(this);
		}
	}


}



class FieldListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_fieldList;
    }

	field = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FieldContext);
	    } else {
	        return this.getTypedRuleContext(FieldContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GQLParser.COMMA);
	    } else {
	        return this.getToken(GQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterFieldList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitFieldList(this);
		}
	}


}



class FieldContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_field;
    }

	fieldName() {
	    return this.getTypedRuleContext(FieldNameContext,0);
	};

	COLON() {
	    return this.getToken(GQLParser.COLON, 0);
	};

	valueExpression() {
	    return this.getTypedRuleContext(ValueExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterField(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitField(this);
		}
	}


}



class TruthValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_truthValue;
    }

	BOOLEAN_LITERAL() {
	    return this.getToken(GQLParser.BOOLEAN_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterTruthValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitTruthValue(this);
		}
	}


}



class NumericValueExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_numericValueExpression;
        this.sign = null;
        this.operator = null;
    }

	numericValueExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NumericValueExpressionContext);
	    } else {
	        return this.getTypedRuleContext(NumericValueExpressionContext,i);
	    }
	};

	PLUS_SIGN() {
	    return this.getToken(GQLParser.PLUS_SIGN, 0);
	};

	MINUS_SIGN() {
	    return this.getToken(GQLParser.MINUS_SIGN, 0);
	};

	valueExpressionPrimary() {
	    return this.getTypedRuleContext(ValueExpressionPrimaryContext,0);
	};

	numericValueFunction() {
	    return this.getTypedRuleContext(NumericValueFunctionContext,0);
	};

	ASTERISK() {
	    return this.getToken(GQLParser.ASTERISK, 0);
	};

	SOLIDUS() {
	    return this.getToken(GQLParser.SOLIDUS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterNumericValueExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitNumericValueExpression(this);
		}
	}


}



class NumericValueFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_numericValueFunction;
    }

	lengthExpression() {
	    return this.getTypedRuleContext(LengthExpressionContext,0);
	};

	cardinalityExpression() {
	    return this.getTypedRuleContext(CardinalityExpressionContext,0);
	};

	absoluteValueExpression() {
	    return this.getTypedRuleContext(AbsoluteValueExpressionContext,0);
	};

	modulusExpression() {
	    return this.getTypedRuleContext(ModulusExpressionContext,0);
	};

	trigonometricFunction() {
	    return this.getTypedRuleContext(TrigonometricFunctionContext,0);
	};

	generalLogarithmFunction() {
	    return this.getTypedRuleContext(GeneralLogarithmFunctionContext,0);
	};

	commonLogarithm() {
	    return this.getTypedRuleContext(CommonLogarithmContext,0);
	};

	naturalLogarithm() {
	    return this.getTypedRuleContext(NaturalLogarithmContext,0);
	};

	exponentialFunction() {
	    return this.getTypedRuleContext(ExponentialFunctionContext,0);
	};

	powerFunction() {
	    return this.getTypedRuleContext(PowerFunctionContext,0);
	};

	squareRoot() {
	    return this.getTypedRuleContext(SquareRootContext,0);
	};

	floorFunction() {
	    return this.getTypedRuleContext(FloorFunctionContext,0);
	};

	ceilingFunction() {
	    return this.getTypedRuleContext(CeilingFunctionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterNumericValueFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitNumericValueFunction(this);
		}
	}


}



class LengthExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_lengthExpression;
    }

	charLengthExpression() {
	    return this.getTypedRuleContext(CharLengthExpressionContext,0);
	};

	byteLengthExpression() {
	    return this.getTypedRuleContext(ByteLengthExpressionContext,0);
	};

	pathLengthExpression() {
	    return this.getTypedRuleContext(PathLengthExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterLengthExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitLengthExpression(this);
		}
	}


}



class CardinalityExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_cardinalityExpression;
    }

	CARDINALITY() {
	    return this.getToken(GQLParser.CARDINALITY, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	cardinalityExpressionArgument() {
	    return this.getTypedRuleContext(CardinalityExpressionArgumentContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	SIZE() {
	    return this.getToken(GQLParser.SIZE, 0);
	};

	listValueExpression() {
	    return this.getTypedRuleContext(ListValueExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterCardinalityExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitCardinalityExpression(this);
		}
	}


}



class CardinalityExpressionArgumentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_cardinalityExpressionArgument;
    }

	valueExpression() {
	    return this.getTypedRuleContext(ValueExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterCardinalityExpressionArgument(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitCardinalityExpressionArgument(this);
		}
	}


}



class CharLengthExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_charLengthExpression;
    }

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	characterStringValueExpression() {
	    return this.getTypedRuleContext(CharacterStringValueExpressionContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	CHAR_LENGTH() {
	    return this.getToken(GQLParser.CHAR_LENGTH, 0);
	};

	CHARACTER_LENGTH() {
	    return this.getToken(GQLParser.CHARACTER_LENGTH, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterCharLengthExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitCharLengthExpression(this);
		}
	}


}



class ByteLengthExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_byteLengthExpression;
    }

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	byteStringValueExpression() {
	    return this.getTypedRuleContext(ByteStringValueExpressionContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	BYTE_LENGTH() {
	    return this.getToken(GQLParser.BYTE_LENGTH, 0);
	};

	OCTET_LENGTH() {
	    return this.getToken(GQLParser.OCTET_LENGTH, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterByteLengthExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitByteLengthExpression(this);
		}
	}


}



class PathLengthExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_pathLengthExpression;
    }

	PATH_LENGTH() {
	    return this.getToken(GQLParser.PATH_LENGTH, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	pathValueExpression() {
	    return this.getTypedRuleContext(PathValueExpressionContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterPathLengthExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitPathLengthExpression(this);
		}
	}


}



class AbsoluteValueExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_absoluteValueExpression;
    }

	ABS() {
	    return this.getToken(GQLParser.ABS, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	valueExpression() {
	    return this.getTypedRuleContext(ValueExpressionContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterAbsoluteValueExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitAbsoluteValueExpression(this);
		}
	}


}



class ModulusExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_modulusExpression;
    }

	MOD() {
	    return this.getToken(GQLParser.MOD, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	numericValueExpressionDividend() {
	    return this.getTypedRuleContext(NumericValueExpressionDividendContext,0);
	};

	COMMA() {
	    return this.getToken(GQLParser.COMMA, 0);
	};

	numericValueExpressionDivisor() {
	    return this.getTypedRuleContext(NumericValueExpressionDivisorContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterModulusExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitModulusExpression(this);
		}
	}


}



class NumericValueExpressionDividendContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_numericValueExpressionDividend;
    }

	numericValueExpression() {
	    return this.getTypedRuleContext(NumericValueExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterNumericValueExpressionDividend(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitNumericValueExpressionDividend(this);
		}
	}


}



class NumericValueExpressionDivisorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_numericValueExpressionDivisor;
    }

	numericValueExpression() {
	    return this.getTypedRuleContext(NumericValueExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterNumericValueExpressionDivisor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitNumericValueExpressionDivisor(this);
		}
	}


}



class TrigonometricFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_trigonometricFunction;
    }

	trigonometricFunctionName() {
	    return this.getTypedRuleContext(TrigonometricFunctionNameContext,0);
	};

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	numericValueExpression() {
	    return this.getTypedRuleContext(NumericValueExpressionContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterTrigonometricFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitTrigonometricFunction(this);
		}
	}


}



class TrigonometricFunctionNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_trigonometricFunctionName;
    }

	SIN() {
	    return this.getToken(GQLParser.SIN, 0);
	};

	COS() {
	    return this.getToken(GQLParser.COS, 0);
	};

	TAN() {
	    return this.getToken(GQLParser.TAN, 0);
	};

	COT() {
	    return this.getToken(GQLParser.COT, 0);
	};

	SINH() {
	    return this.getToken(GQLParser.SINH, 0);
	};

	COSH() {
	    return this.getToken(GQLParser.COSH, 0);
	};

	TANH() {
	    return this.getToken(GQLParser.TANH, 0);
	};

	ASIN() {
	    return this.getToken(GQLParser.ASIN, 0);
	};

	ACOS() {
	    return this.getToken(GQLParser.ACOS, 0);
	};

	ATAN() {
	    return this.getToken(GQLParser.ATAN, 0);
	};

	DEGREES() {
	    return this.getToken(GQLParser.DEGREES, 0);
	};

	RADIANS() {
	    return this.getToken(GQLParser.RADIANS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterTrigonometricFunctionName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitTrigonometricFunctionName(this);
		}
	}


}



class GeneralLogarithmFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_generalLogarithmFunction;
    }

	LOG() {
	    return this.getToken(GQLParser.LOG, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	generalLogarithmBase() {
	    return this.getTypedRuleContext(GeneralLogarithmBaseContext,0);
	};

	COMMA() {
	    return this.getToken(GQLParser.COMMA, 0);
	};

	generalLogarithmArgument() {
	    return this.getTypedRuleContext(GeneralLogarithmArgumentContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterGeneralLogarithmFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitGeneralLogarithmFunction(this);
		}
	}


}



class GeneralLogarithmBaseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_generalLogarithmBase;
    }

	numericValueExpression() {
	    return this.getTypedRuleContext(NumericValueExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterGeneralLogarithmBase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitGeneralLogarithmBase(this);
		}
	}


}



class GeneralLogarithmArgumentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_generalLogarithmArgument;
    }

	numericValueExpression() {
	    return this.getTypedRuleContext(NumericValueExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterGeneralLogarithmArgument(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitGeneralLogarithmArgument(this);
		}
	}


}



class CommonLogarithmContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_commonLogarithm;
    }

	LOG10() {
	    return this.getToken(GQLParser.LOG10, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	numericValueExpression() {
	    return this.getTypedRuleContext(NumericValueExpressionContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterCommonLogarithm(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitCommonLogarithm(this);
		}
	}


}



class NaturalLogarithmContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_naturalLogarithm;
    }

	LN() {
	    return this.getToken(GQLParser.LN, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	numericValueExpression() {
	    return this.getTypedRuleContext(NumericValueExpressionContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterNaturalLogarithm(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitNaturalLogarithm(this);
		}
	}


}



class ExponentialFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_exponentialFunction;
    }

	EXP() {
	    return this.getToken(GQLParser.EXP, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	numericValueExpression() {
	    return this.getTypedRuleContext(NumericValueExpressionContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterExponentialFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitExponentialFunction(this);
		}
	}


}



class PowerFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_powerFunction;
    }

	POWER() {
	    return this.getToken(GQLParser.POWER, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	numericValueExpressionBase() {
	    return this.getTypedRuleContext(NumericValueExpressionBaseContext,0);
	};

	COMMA() {
	    return this.getToken(GQLParser.COMMA, 0);
	};

	numericValueExpressionExponent() {
	    return this.getTypedRuleContext(NumericValueExpressionExponentContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterPowerFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitPowerFunction(this);
		}
	}


}



class NumericValueExpressionBaseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_numericValueExpressionBase;
    }

	numericValueExpression() {
	    return this.getTypedRuleContext(NumericValueExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterNumericValueExpressionBase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitNumericValueExpressionBase(this);
		}
	}


}



class NumericValueExpressionExponentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_numericValueExpressionExponent;
    }

	numericValueExpression() {
	    return this.getTypedRuleContext(NumericValueExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterNumericValueExpressionExponent(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitNumericValueExpressionExponent(this);
		}
	}


}



class SquareRootContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_squareRoot;
    }

	SQRT() {
	    return this.getToken(GQLParser.SQRT, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	numericValueExpression() {
	    return this.getTypedRuleContext(NumericValueExpressionContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterSquareRoot(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitSquareRoot(this);
		}
	}


}



class FloorFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_floorFunction;
    }

	FLOOR() {
	    return this.getToken(GQLParser.FLOOR, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	numericValueExpression() {
	    return this.getTypedRuleContext(NumericValueExpressionContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterFloorFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitFloorFunction(this);
		}
	}


}



class CeilingFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_ceilingFunction;
    }

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	numericValueExpression() {
	    return this.getTypedRuleContext(NumericValueExpressionContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	CEIL() {
	    return this.getToken(GQLParser.CEIL, 0);
	};

	CEILING() {
	    return this.getToken(GQLParser.CEILING, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterCeilingFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitCeilingFunction(this);
		}
	}


}



class CharacterStringValueExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_characterStringValueExpression;
    }

	valueExpression() {
	    return this.getTypedRuleContext(ValueExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterCharacterStringValueExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitCharacterStringValueExpression(this);
		}
	}


}



class ByteStringValueExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_byteStringValueExpression;
    }

	valueExpression() {
	    return this.getTypedRuleContext(ValueExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterByteStringValueExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitByteStringValueExpression(this);
		}
	}


}



class TrimOperandsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_trimOperands;
    }

	trimCharacterOrByteStringSource() {
	    return this.getTypedRuleContext(TrimCharacterOrByteStringSourceContext,0);
	};

	FROM() {
	    return this.getToken(GQLParser.FROM, 0);
	};

	trimSpecification() {
	    return this.getTypedRuleContext(TrimSpecificationContext,0);
	};

	trimCharacterOrByteString() {
	    return this.getTypedRuleContext(TrimCharacterOrByteStringContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterTrimOperands(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitTrimOperands(this);
		}
	}


}



class TrimCharacterOrByteStringSourceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_trimCharacterOrByteStringSource;
    }

	valueExpression() {
	    return this.getTypedRuleContext(ValueExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterTrimCharacterOrByteStringSource(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitTrimCharacterOrByteStringSource(this);
		}
	}


}



class TrimSpecificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_trimSpecification;
    }

	LEADING() {
	    return this.getToken(GQLParser.LEADING, 0);
	};

	TRAILING() {
	    return this.getToken(GQLParser.TRAILING, 0);
	};

	BOTH() {
	    return this.getToken(GQLParser.BOTH, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterTrimSpecification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitTrimSpecification(this);
		}
	}


}



class TrimCharacterOrByteStringContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_trimCharacterOrByteString;
    }

	valueExpression() {
	    return this.getTypedRuleContext(ValueExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterTrimCharacterOrByteString(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitTrimCharacterOrByteString(this);
		}
	}


}



class NormalFormContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_normalForm;
    }

	NFC() {
	    return this.getToken(GQLParser.NFC, 0);
	};

	NFD() {
	    return this.getToken(GQLParser.NFD, 0);
	};

	NFKC() {
	    return this.getToken(GQLParser.NFKC, 0);
	};

	NFKD() {
	    return this.getToken(GQLParser.NFKD, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterNormalForm(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitNormalForm(this);
		}
	}


}



class StringLengthContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_stringLength;
    }

	numericValueExpression() {
	    return this.getTypedRuleContext(NumericValueExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterStringLength(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitStringLength(this);
		}
	}


}



class DatetimeValueExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_datetimeValueExpression;
    }

	valueExpression() {
	    return this.getTypedRuleContext(ValueExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterDatetimeValueExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitDatetimeValueExpression(this);
		}
	}


}



class DatetimeValueFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_datetimeValueFunction;
    }

	dateFunction() {
	    return this.getTypedRuleContext(DateFunctionContext,0);
	};

	timeFunction() {
	    return this.getTypedRuleContext(TimeFunctionContext,0);
	};

	datetimeFunction() {
	    return this.getTypedRuleContext(DatetimeFunctionContext,0);
	};

	localtimeFunction() {
	    return this.getTypedRuleContext(LocaltimeFunctionContext,0);
	};

	localdatetimeFunction() {
	    return this.getTypedRuleContext(LocaldatetimeFunctionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterDatetimeValueFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitDatetimeValueFunction(this);
		}
	}


}



class DateFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_dateFunction;
    }

	CURRENT_DATE() {
	    return this.getToken(GQLParser.CURRENT_DATE, 0);
	};

	DATE() {
	    return this.getToken(GQLParser.DATE, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	dateFunctionParameters() {
	    return this.getTypedRuleContext(DateFunctionParametersContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterDateFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitDateFunction(this);
		}
	}


}



class TimeFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_timeFunction;
    }

	CURRENT_TIME() {
	    return this.getToken(GQLParser.CURRENT_TIME, 0);
	};

	ZONED_TIME() {
	    return this.getToken(GQLParser.ZONED_TIME, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	timeFunctionParameters() {
	    return this.getTypedRuleContext(TimeFunctionParametersContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterTimeFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitTimeFunction(this);
		}
	}


}



class LocaltimeFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_localtimeFunction;
    }

	LOCAL_TIME() {
	    return this.getToken(GQLParser.LOCAL_TIME, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	timeFunctionParameters() {
	    return this.getTypedRuleContext(TimeFunctionParametersContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterLocaltimeFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitLocaltimeFunction(this);
		}
	}


}



class DatetimeFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_datetimeFunction;
    }

	CURRENT_TIMESTAMP() {
	    return this.getToken(GQLParser.CURRENT_TIMESTAMP, 0);
	};

	ZONED_DATETIME() {
	    return this.getToken(GQLParser.ZONED_DATETIME, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	datetimeFunctionParameters() {
	    return this.getTypedRuleContext(DatetimeFunctionParametersContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterDatetimeFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitDatetimeFunction(this);
		}
	}


}



class LocaldatetimeFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_localdatetimeFunction;
    }

	LOCAL_TIMESTAMP() {
	    return this.getToken(GQLParser.LOCAL_TIMESTAMP, 0);
	};

	LOCAL_DATETIME() {
	    return this.getToken(GQLParser.LOCAL_DATETIME, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	datetimeFunctionParameters() {
	    return this.getTypedRuleContext(DatetimeFunctionParametersContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterLocaldatetimeFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitLocaldatetimeFunction(this);
		}
	}


}



class DateFunctionParametersContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_dateFunctionParameters;
    }

	dateString() {
	    return this.getTypedRuleContext(DateStringContext,0);
	};

	recordConstructor() {
	    return this.getTypedRuleContext(RecordConstructorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterDateFunctionParameters(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitDateFunctionParameters(this);
		}
	}


}



class TimeFunctionParametersContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_timeFunctionParameters;
    }

	timeString() {
	    return this.getTypedRuleContext(TimeStringContext,0);
	};

	recordConstructor() {
	    return this.getTypedRuleContext(RecordConstructorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterTimeFunctionParameters(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitTimeFunctionParameters(this);
		}
	}


}



class DatetimeFunctionParametersContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_datetimeFunctionParameters;
    }

	datetimeString() {
	    return this.getTypedRuleContext(DatetimeStringContext,0);
	};

	recordConstructor() {
	    return this.getTypedRuleContext(RecordConstructorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterDatetimeFunctionParameters(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitDatetimeFunctionParameters(this);
		}
	}


}



class DurationValueExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_durationValueExpression;
    }

	valueExpression() {
	    return this.getTypedRuleContext(ValueExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterDurationValueExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitDurationValueExpression(this);
		}
	}


}



class DatetimeSubtractionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_datetimeSubtraction;
    }

	DURATION_BETWEEN() {
	    return this.getToken(GQLParser.DURATION_BETWEEN, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	datetimeSubtractionParameters() {
	    return this.getTypedRuleContext(DatetimeSubtractionParametersContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	temporalDurationQualifier() {
	    return this.getTypedRuleContext(TemporalDurationQualifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterDatetimeSubtraction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitDatetimeSubtraction(this);
		}
	}


}



class DatetimeSubtractionParametersContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_datetimeSubtractionParameters;
    }

	datetimeValueExpression1() {
	    return this.getTypedRuleContext(DatetimeValueExpression1Context,0);
	};

	COMMA() {
	    return this.getToken(GQLParser.COMMA, 0);
	};

	datetimeValueExpression2() {
	    return this.getTypedRuleContext(DatetimeValueExpression2Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterDatetimeSubtractionParameters(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitDatetimeSubtractionParameters(this);
		}
	}


}



class DatetimeValueExpression1Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_datetimeValueExpression1;
    }

	datetimeValueExpression() {
	    return this.getTypedRuleContext(DatetimeValueExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterDatetimeValueExpression1(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitDatetimeValueExpression1(this);
		}
	}


}



class DatetimeValueExpression2Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_datetimeValueExpression2;
    }

	datetimeValueExpression() {
	    return this.getTypedRuleContext(DatetimeValueExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterDatetimeValueExpression2(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitDatetimeValueExpression2(this);
		}
	}


}



class DurationValueFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_durationValueFunction;
    }

	durationFunction() {
	    return this.getTypedRuleContext(DurationFunctionContext,0);
	};

	absoluteValueExpression() {
	    return this.getTypedRuleContext(AbsoluteValueExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterDurationValueFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitDurationValueFunction(this);
		}
	}


}



class DurationFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_durationFunction;
    }

	DURATION() {
	    return this.getToken(GQLParser.DURATION, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	durationFunctionParameters() {
	    return this.getTypedRuleContext(DurationFunctionParametersContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterDurationFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitDurationFunction(this);
		}
	}


}



class DurationFunctionParametersContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_durationFunctionParameters;
    }

	durationString() {
	    return this.getTypedRuleContext(DurationStringContext,0);
	};

	recordConstructor() {
	    return this.getTypedRuleContext(RecordConstructorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterDurationFunctionParameters(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitDurationFunctionParameters(this);
		}
	}


}



class ObjectNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_objectName;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterObjectName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitObjectName(this);
		}
	}


}



class ObjectNameOrBindingVariableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_objectNameOrBindingVariable;
    }

	regularIdentifier() {
	    return this.getTypedRuleContext(RegularIdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterObjectNameOrBindingVariable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitObjectNameOrBindingVariable(this);
		}
	}


}



class DirectoryNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_directoryName;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterDirectoryName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitDirectoryName(this);
		}
	}


}



class SchemaNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_schemaName;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterSchemaName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitSchemaName(this);
		}
	}


}



class GraphNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_graphName;
    }

	regularIdentifier() {
	    return this.getTypedRuleContext(RegularIdentifierContext,0);
	};

	delimitedGraphName() {
	    return this.getTypedRuleContext(DelimitedGraphNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterGraphName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitGraphName(this);
		}
	}


}



class DelimitedGraphNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_delimitedGraphName;
    }

	DOUBLE_QUOTED_CHARACTER_SEQUENCE() {
	    return this.getToken(GQLParser.DOUBLE_QUOTED_CHARACTER_SEQUENCE, 0);
	};

	ACCENT_QUOTED_CHARACTER_SEQUENCE() {
	    return this.getToken(GQLParser.ACCENT_QUOTED_CHARACTER_SEQUENCE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterDelimitedGraphName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitDelimitedGraphName(this);
		}
	}


}



class GraphTypeNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_graphTypeName;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterGraphTypeName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitGraphTypeName(this);
		}
	}


}



class NodeTypeNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_nodeTypeName;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterNodeTypeName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitNodeTypeName(this);
		}
	}


}



class EdgeTypeNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_edgeTypeName;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterEdgeTypeName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitEdgeTypeName(this);
		}
	}


}



class BindingTableNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_bindingTableName;
    }

	regularIdentifier() {
	    return this.getTypedRuleContext(RegularIdentifierContext,0);
	};

	delimitedBindingTableName() {
	    return this.getTypedRuleContext(DelimitedBindingTableNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterBindingTableName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitBindingTableName(this);
		}
	}


}



class DelimitedBindingTableNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_delimitedBindingTableName;
    }

	DOUBLE_QUOTED_CHARACTER_SEQUENCE() {
	    return this.getToken(GQLParser.DOUBLE_QUOTED_CHARACTER_SEQUENCE, 0);
	};

	ACCENT_QUOTED_CHARACTER_SEQUENCE() {
	    return this.getToken(GQLParser.ACCENT_QUOTED_CHARACTER_SEQUENCE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterDelimitedBindingTableName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitDelimitedBindingTableName(this);
		}
	}


}



class ProcedureNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_procedureName;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterProcedureName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitProcedureName(this);
		}
	}


}



class LabelNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_labelName;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterLabelName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitLabelName(this);
		}
	}


}



class PropertyNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_propertyName;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterPropertyName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitPropertyName(this);
		}
	}


}



class FieldNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_fieldName;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterFieldName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitFieldName(this);
		}
	}


}



class ElementVariableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_elementVariable;
    }

	bindingVariable() {
	    return this.getTypedRuleContext(BindingVariableContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterElementVariable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitElementVariable(this);
		}
	}


}



class PathVariableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_pathVariable;
    }

	bindingVariable() {
	    return this.getTypedRuleContext(BindingVariableContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterPathVariable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitPathVariable(this);
		}
	}


}



class SubpathVariableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_subpathVariable;
    }

	regularIdentifier() {
	    return this.getTypedRuleContext(RegularIdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterSubpathVariable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitSubpathVariable(this);
		}
	}


}



class BindingVariableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_bindingVariable;
    }

	regularIdentifier() {
	    return this.getTypedRuleContext(RegularIdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterBindingVariable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitBindingVariable(this);
		}
	}


}



class UnsignedLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_unsignedLiteral;
    }

	unsignedNumericLiteral() {
	    return this.getTypedRuleContext(UnsignedNumericLiteralContext,0);
	};

	generalLiteral() {
	    return this.getTypedRuleContext(GeneralLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterUnsignedLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitUnsignedLiteral(this);
		}
	}


}



class GeneralLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_generalLiteral;
    }

	BOOLEAN_LITERAL() {
	    return this.getToken(GQLParser.BOOLEAN_LITERAL, 0);
	};

	characterStringLiteral() {
	    return this.getTypedRuleContext(CharacterStringLiteralContext,0);
	};

	BYTE_STRING_LITERAL() {
	    return this.getToken(GQLParser.BYTE_STRING_LITERAL, 0);
	};

	temporalLiteral() {
	    return this.getTypedRuleContext(TemporalLiteralContext,0);
	};

	durationLiteral() {
	    return this.getTypedRuleContext(DurationLiteralContext,0);
	};

	nullLiteral() {
	    return this.getTypedRuleContext(NullLiteralContext,0);
	};

	listLiteral() {
	    return this.getTypedRuleContext(ListLiteralContext,0);
	};

	recordLiteral() {
	    return this.getTypedRuleContext(RecordLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterGeneralLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitGeneralLiteral(this);
		}
	}


}



class TemporalLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_temporalLiteral;
    }

	dateLiteral() {
	    return this.getTypedRuleContext(DateLiteralContext,0);
	};

	timeLiteral() {
	    return this.getTypedRuleContext(TimeLiteralContext,0);
	};

	datetimeLiteral() {
	    return this.getTypedRuleContext(DatetimeLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterTemporalLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitTemporalLiteral(this);
		}
	}


}



class DateLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_dateLiteral;
    }

	DATE() {
	    return this.getToken(GQLParser.DATE, 0);
	};

	dateString() {
	    return this.getTypedRuleContext(DateStringContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterDateLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitDateLiteral(this);
		}
	}


}



class TimeLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_timeLiteral;
    }

	TIME() {
	    return this.getToken(GQLParser.TIME, 0);
	};

	timeString() {
	    return this.getTypedRuleContext(TimeStringContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterTimeLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitTimeLiteral(this);
		}
	}


}



class DatetimeLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_datetimeLiteral;
    }

	datetimeString() {
	    return this.getTypedRuleContext(DatetimeStringContext,0);
	};

	DATETIME() {
	    return this.getToken(GQLParser.DATETIME, 0);
	};

	TIMESTAMP() {
	    return this.getToken(GQLParser.TIMESTAMP, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterDatetimeLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitDatetimeLiteral(this);
		}
	}


}



class ListLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_listLiteral;
    }

	listValueConstructorByEnumeration() {
	    return this.getTypedRuleContext(ListValueConstructorByEnumerationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterListLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitListLiteral(this);
		}
	}


}



class RecordLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_recordLiteral;
    }

	recordConstructor() {
	    return this.getTypedRuleContext(RecordConstructorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterRecordLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitRecordLiteral(this);
		}
	}


}



class IdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_identifier;
    }

	regularIdentifier() {
	    return this.getTypedRuleContext(RegularIdentifierContext,0);
	};

	DOUBLE_QUOTED_CHARACTER_SEQUENCE() {
	    return this.getToken(GQLParser.DOUBLE_QUOTED_CHARACTER_SEQUENCE, 0);
	};

	ACCENT_QUOTED_CHARACTER_SEQUENCE() {
	    return this.getToken(GQLParser.ACCENT_QUOTED_CHARACTER_SEQUENCE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitIdentifier(this);
		}
	}


}



class RegularIdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_regularIdentifier;
    }

	REGULAR_IDENTIFIER() {
	    return this.getToken(GQLParser.REGULAR_IDENTIFIER, 0);
	};

	nonReservedWords() {
	    return this.getTypedRuleContext(NonReservedWordsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterRegularIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitRegularIdentifier(this);
		}
	}


}



class TimeZoneStringContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_timeZoneString;
    }

	characterStringLiteral() {
	    return this.getTypedRuleContext(CharacterStringLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterTimeZoneString(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitTimeZoneString(this);
		}
	}


}



class CharacterStringLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_characterStringLiteral;
    }

	SINGLE_QUOTED_CHARACTER_SEQUENCE() {
	    return this.getToken(GQLParser.SINGLE_QUOTED_CHARACTER_SEQUENCE, 0);
	};

	DOUBLE_QUOTED_CHARACTER_SEQUENCE() {
	    return this.getToken(GQLParser.DOUBLE_QUOTED_CHARACTER_SEQUENCE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterCharacterStringLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitCharacterStringLiteral(this);
		}
	}


}



class UnsignedNumericLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_unsignedNumericLiteral;
    }

	exactNumericLiteral() {
	    return this.getTypedRuleContext(ExactNumericLiteralContext,0);
	};

	approximateNumericLiteral() {
	    return this.getTypedRuleContext(ApproximateNumericLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterUnsignedNumericLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitUnsignedNumericLiteral(this);
		}
	}


}



class ExactNumericLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_exactNumericLiteral;
    }

	UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION_WITH_EXACT_NUMBER_SUFFIX() {
	    return this.getToken(GQLParser.UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION_WITH_EXACT_NUMBER_SUFFIX, 0);
	};

	UNSIGNED_DECIMAL_IN_COMMON_NOTATION_WITH_EXACT_NUMBER_SUFFIX() {
	    return this.getToken(GQLParser.UNSIGNED_DECIMAL_IN_COMMON_NOTATION_WITH_EXACT_NUMBER_SUFFIX, 0);
	};

	UNSIGNED_DECIMAL_IN_COMMON_NOTATION_WITHOUT_SUFFIX() {
	    return this.getToken(GQLParser.UNSIGNED_DECIMAL_IN_COMMON_NOTATION_WITHOUT_SUFFIX, 0);
	};

	UNSIGNED_DECIMAL_INTEGER_WITH_EXACT_NUMBER_SUFFIX() {
	    return this.getToken(GQLParser.UNSIGNED_DECIMAL_INTEGER_WITH_EXACT_NUMBER_SUFFIX, 0);
	};

	unsignedInteger() {
	    return this.getTypedRuleContext(UnsignedIntegerContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterExactNumericLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitExactNumericLiteral(this);
		}
	}


}



class ApproximateNumericLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_approximateNumericLiteral;
    }

	UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION_WITH_APPROXIMATE_NUMBER_SUFFIX() {
	    return this.getToken(GQLParser.UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION_WITH_APPROXIMATE_NUMBER_SUFFIX, 0);
	};

	UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION_WITHOUT_SUFFIX() {
	    return this.getToken(GQLParser.UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION_WITHOUT_SUFFIX, 0);
	};

	UNSIGNED_DECIMAL_IN_COMMON_NOTATION_WITH_APPROXIMATE_NUMBER_SUFFIX() {
	    return this.getToken(GQLParser.UNSIGNED_DECIMAL_IN_COMMON_NOTATION_WITH_APPROXIMATE_NUMBER_SUFFIX, 0);
	};

	UNSIGNED_DECIMAL_INTEGER_WITH_APPROXIMATE_NUMBER_SUFFIX() {
	    return this.getToken(GQLParser.UNSIGNED_DECIMAL_INTEGER_WITH_APPROXIMATE_NUMBER_SUFFIX, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterApproximateNumericLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitApproximateNumericLiteral(this);
		}
	}


}



class UnsignedIntegerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_unsignedInteger;
    }

	UNSIGNED_DECIMAL_INTEGER() {
	    return this.getToken(GQLParser.UNSIGNED_DECIMAL_INTEGER, 0);
	};

	UNSIGNED_HEXADECIMAL_INTEGER() {
	    return this.getToken(GQLParser.UNSIGNED_HEXADECIMAL_INTEGER, 0);
	};

	UNSIGNED_OCTAL_INTEGER() {
	    return this.getToken(GQLParser.UNSIGNED_OCTAL_INTEGER, 0);
	};

	UNSIGNED_BINARY_INTEGER() {
	    return this.getToken(GQLParser.UNSIGNED_BINARY_INTEGER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterUnsignedInteger(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitUnsignedInteger(this);
		}
	}


}



class UnsignedDecimalIntegerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_unsignedDecimalInteger;
    }

	UNSIGNED_DECIMAL_INTEGER() {
	    return this.getToken(GQLParser.UNSIGNED_DECIMAL_INTEGER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterUnsignedDecimalInteger(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitUnsignedDecimalInteger(this);
		}
	}


}



class NullLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_nullLiteral;
    }

	NULL() {
	    return this.getToken(GQLParser.NULL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterNullLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitNullLiteral(this);
		}
	}


}



class DateStringContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_dateString;
    }

	characterStringLiteral() {
	    return this.getTypedRuleContext(CharacterStringLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterDateString(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitDateString(this);
		}
	}


}



class TimeStringContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_timeString;
    }

	characterStringLiteral() {
	    return this.getTypedRuleContext(CharacterStringLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterTimeString(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitTimeString(this);
		}
	}


}



class DatetimeStringContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_datetimeString;
    }

	characterStringLiteral() {
	    return this.getTypedRuleContext(CharacterStringLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterDatetimeString(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitDatetimeString(this);
		}
	}


}



class DurationLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_durationLiteral;
    }

	DURATION() {
	    return this.getToken(GQLParser.DURATION, 0);
	};

	durationString() {
	    return this.getTypedRuleContext(DurationStringContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterDurationLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitDurationLiteral(this);
		}
	}


}



class DurationStringContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_durationString;
    }

	characterStringLiteral() {
	    return this.getTypedRuleContext(CharacterStringLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterDurationString(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitDurationString(this);
		}
	}


}



class NodeSynonymContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_nodeSynonym;
    }

	NODE() {
	    return this.getToken(GQLParser.NODE, 0);
	};

	VERTEX() {
	    return this.getToken(GQLParser.VERTEX, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterNodeSynonym(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitNodeSynonym(this);
		}
	}


}



class EdgesSynonymContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_edgesSynonym;
    }

	EDGES() {
	    return this.getToken(GQLParser.EDGES, 0);
	};

	RELATIONSHIPS() {
	    return this.getToken(GQLParser.RELATIONSHIPS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterEdgesSynonym(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitEdgesSynonym(this);
		}
	}


}



class EdgeSynonymContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_edgeSynonym;
    }

	EDGE() {
	    return this.getToken(GQLParser.EDGE, 0);
	};

	RELATIONSHIP() {
	    return this.getToken(GQLParser.RELATIONSHIP, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterEdgeSynonym(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitEdgeSynonym(this);
		}
	}


}



class NonReservedWordsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_nonReservedWords;
    }

	ACYCLIC() {
	    return this.getToken(GQLParser.ACYCLIC, 0);
	};

	BINDING() {
	    return this.getToken(GQLParser.BINDING, 0);
	};

	BINDINGS() {
	    return this.getToken(GQLParser.BINDINGS, 0);
	};

	CONNECTING() {
	    return this.getToken(GQLParser.CONNECTING, 0);
	};

	DESTINATION() {
	    return this.getToken(GQLParser.DESTINATION, 0);
	};

	DIFFERENT() {
	    return this.getToken(GQLParser.DIFFERENT, 0);
	};

	DIRECTED() {
	    return this.getToken(GQLParser.DIRECTED, 0);
	};

	EDGE() {
	    return this.getToken(GQLParser.EDGE, 0);
	};

	EDGES() {
	    return this.getToken(GQLParser.EDGES, 0);
	};

	ELEMENT() {
	    return this.getToken(GQLParser.ELEMENT, 0);
	};

	ELEMENTS() {
	    return this.getToken(GQLParser.ELEMENTS, 0);
	};

	FIRST() {
	    return this.getToken(GQLParser.FIRST, 0);
	};

	GRAPH() {
	    return this.getToken(GQLParser.GRAPH, 0);
	};

	GROUPS() {
	    return this.getToken(GQLParser.GROUPS, 0);
	};

	KEEP() {
	    return this.getToken(GQLParser.KEEP, 0);
	};

	LABEL() {
	    return this.getToken(GQLParser.LABEL, 0);
	};

	LABELED() {
	    return this.getToken(GQLParser.LABELED, 0);
	};

	LABELS() {
	    return this.getToken(GQLParser.LABELS, 0);
	};

	LAST() {
	    return this.getToken(GQLParser.LAST, 0);
	};

	NFC() {
	    return this.getToken(GQLParser.NFC, 0);
	};

	NFD() {
	    return this.getToken(GQLParser.NFD, 0);
	};

	NFKC() {
	    return this.getToken(GQLParser.NFKC, 0);
	};

	NFKD() {
	    return this.getToken(GQLParser.NFKD, 0);
	};

	NO() {
	    return this.getToken(GQLParser.NO, 0);
	};

	NODE() {
	    return this.getToken(GQLParser.NODE, 0);
	};

	NORMALIZED() {
	    return this.getToken(GQLParser.NORMALIZED, 0);
	};

	ONLY() {
	    return this.getToken(GQLParser.ONLY, 0);
	};

	ORDINALITY() {
	    return this.getToken(GQLParser.ORDINALITY, 0);
	};

	PROPERTY() {
	    return this.getToken(GQLParser.PROPERTY, 0);
	};

	READ() {
	    return this.getToken(GQLParser.READ, 0);
	};

	RELATIONSHIP() {
	    return this.getToken(GQLParser.RELATIONSHIP, 0);
	};

	RELATIONSHIPS() {
	    return this.getToken(GQLParser.RELATIONSHIPS, 0);
	};

	REPEATABLE() {
	    return this.getToken(GQLParser.REPEATABLE, 0);
	};

	SHORTEST() {
	    return this.getToken(GQLParser.SHORTEST, 0);
	};

	SIMPLE() {
	    return this.getToken(GQLParser.SIMPLE, 0);
	};

	SOURCE() {
	    return this.getToken(GQLParser.SOURCE, 0);
	};

	TABLE() {
	    return this.getToken(GQLParser.TABLE, 0);
	};

	TEMP() {
	    return this.getToken(GQLParser.TEMP, 0);
	};

	TO() {
	    return this.getToken(GQLParser.TO, 0);
	};

	TRAIL() {
	    return this.getToken(GQLParser.TRAIL, 0);
	};

	TRANSACTION() {
	    return this.getToken(GQLParser.TRANSACTION, 0);
	};

	TYPE() {
	    return this.getToken(GQLParser.TYPE, 0);
	};

	UNDIRECTED() {
	    return this.getToken(GQLParser.UNDIRECTED, 0);
	};

	VERTEX() {
	    return this.getToken(GQLParser.VERTEX, 0);
	};

	WALK() {
	    return this.getToken(GQLParser.WALK, 0);
	};

	WITHOUT() {
	    return this.getToken(GQLParser.WITHOUT, 0);
	};

	WRITE() {
	    return this.getToken(GQLParser.WRITE, 0);
	};

	ZONE() {
	    return this.getToken(GQLParser.ZONE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.enterNonReservedWords(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLListener ) {
	        listener.exitNonReservedWords(this);
		}
	}


}




GQLParser.GqlProgramContext = GqlProgramContext; 
GQLParser.ProgramActivityContext = ProgramActivityContext; 
GQLParser.SessionActivityContext = SessionActivityContext; 
GQLParser.TransactionActivityContext = TransactionActivityContext; 
GQLParser.EndTransactionCommandContext = EndTransactionCommandContext; 
GQLParser.SessionSetCommandContext = SessionSetCommandContext; 
GQLParser.SessionSetSchemaClauseContext = SessionSetSchemaClauseContext; 
GQLParser.SessionSetGraphClauseContext = SessionSetGraphClauseContext; 
GQLParser.SessionSetTimeZoneClauseContext = SessionSetTimeZoneClauseContext; 
GQLParser.SetTimeZoneValueContext = SetTimeZoneValueContext; 
GQLParser.SessionSetParameterClauseContext = SessionSetParameterClauseContext; 
GQLParser.SessionSetGraphParameterClauseContext = SessionSetGraphParameterClauseContext; 
GQLParser.SessionSetBindingTableParameterClauseContext = SessionSetBindingTableParameterClauseContext; 
GQLParser.SessionSetValueParameterClauseContext = SessionSetValueParameterClauseContext; 
GQLParser.SessionSetParameterNameContext = SessionSetParameterNameContext; 
GQLParser.SessionResetCommandContext = SessionResetCommandContext; 
GQLParser.SessionResetArgumentsContext = SessionResetArgumentsContext; 
GQLParser.SessionCloseCommandContext = SessionCloseCommandContext; 
GQLParser.SessionParameterSpecificationContext = SessionParameterSpecificationContext; 
GQLParser.StartTransactionCommandContext = StartTransactionCommandContext; 
GQLParser.TransactionCharacteristicsContext = TransactionCharacteristicsContext; 
GQLParser.TransactionModeContext = TransactionModeContext; 
GQLParser.TransactionAccessModeContext = TransactionAccessModeContext; 
GQLParser.RollbackCommandContext = RollbackCommandContext; 
GQLParser.CommitCommandContext = CommitCommandContext; 
GQLParser.NestedProcedureSpecificationContext = NestedProcedureSpecificationContext; 
GQLParser.ProcedureSpecificationContext = ProcedureSpecificationContext; 
GQLParser.NestedDataModifyingProcedureSpecificationContext = NestedDataModifyingProcedureSpecificationContext; 
GQLParser.NestedQuerySpecificationContext = NestedQuerySpecificationContext; 
GQLParser.ProcedureBodyContext = ProcedureBodyContext; 
GQLParser.BindingVariableDefinitionBlockContext = BindingVariableDefinitionBlockContext; 
GQLParser.BindingVariableDefinitionContext = BindingVariableDefinitionContext; 
GQLParser.StatementBlockContext = StatementBlockContext; 
GQLParser.StatementContext = StatementContext; 
GQLParser.NextStatementContext = NextStatementContext; 
GQLParser.GraphVariableDefinitionContext = GraphVariableDefinitionContext; 
GQLParser.OptTypedGraphInitializerContext = OptTypedGraphInitializerContext; 
GQLParser.GraphInitializerContext = GraphInitializerContext; 
GQLParser.BindingTableVariableDefinitionContext = BindingTableVariableDefinitionContext; 
GQLParser.OptTypedBindingTableInitializerContext = OptTypedBindingTableInitializerContext; 
GQLParser.BindingTableInitializerContext = BindingTableInitializerContext; 
GQLParser.ValueVariableDefinitionContext = ValueVariableDefinitionContext; 
GQLParser.OptTypedValueInitializerContext = OptTypedValueInitializerContext; 
GQLParser.ValueInitializerContext = ValueInitializerContext; 
GQLParser.GraphExpressionContext = GraphExpressionContext; 
GQLParser.CurrentGraphContext = CurrentGraphContext; 
GQLParser.BindingTableExpressionContext = BindingTableExpressionContext; 
GQLParser.NestedBindingTableQuerySpecificationContext = NestedBindingTableQuerySpecificationContext; 
GQLParser.ObjectExpressionPrimaryContext = ObjectExpressionPrimaryContext; 
GQLParser.LinearCatalogModifyingStatementContext = LinearCatalogModifyingStatementContext; 
GQLParser.SimpleCatalogModifyingStatementContext = SimpleCatalogModifyingStatementContext; 
GQLParser.PrimitiveCatalogModifyingStatementContext = PrimitiveCatalogModifyingStatementContext; 
GQLParser.CreateSchemaStatementContext = CreateSchemaStatementContext; 
GQLParser.DropSchemaStatementContext = DropSchemaStatementContext; 
GQLParser.CreateGraphStatementContext = CreateGraphStatementContext; 
GQLParser.OpenGraphTypeContext = OpenGraphTypeContext; 
GQLParser.OfGraphTypeContext = OfGraphTypeContext; 
GQLParser.GraphTypeLikeGraphContext = GraphTypeLikeGraphContext; 
GQLParser.GraphSourceContext = GraphSourceContext; 
GQLParser.DropGraphStatementContext = DropGraphStatementContext; 
GQLParser.CreateGraphTypeStatementContext = CreateGraphTypeStatementContext; 
GQLParser.GraphTypeSourceContext = GraphTypeSourceContext; 
GQLParser.CopyOfGraphTypeContext = CopyOfGraphTypeContext; 
GQLParser.DropGraphTypeStatementContext = DropGraphTypeStatementContext; 
GQLParser.CallCatalogModifyingProcedureStatementContext = CallCatalogModifyingProcedureStatementContext; 
GQLParser.LinearDataModifyingStatementContext = LinearDataModifyingStatementContext; 
GQLParser.FocusedLinearDataModifyingStatementContext = FocusedLinearDataModifyingStatementContext; 
GQLParser.FocusedLinearDataModifyingStatementBodyContext = FocusedLinearDataModifyingStatementBodyContext; 
GQLParser.FocusedNestedDataModifyingProcedureSpecificationContext = FocusedNestedDataModifyingProcedureSpecificationContext; 
GQLParser.AmbientLinearDataModifyingStatementContext = AmbientLinearDataModifyingStatementContext; 
GQLParser.AmbientLinearDataModifyingStatementBodyContext = AmbientLinearDataModifyingStatementBodyContext; 
GQLParser.SimpleLinearDataAccessingStatementContext = SimpleLinearDataAccessingStatementContext; 
GQLParser.SimpleDataAccessingStatementContext = SimpleDataAccessingStatementContext; 
GQLParser.SimpleDataModifyingStatementContext = SimpleDataModifyingStatementContext; 
GQLParser.PrimitiveDataModifyingStatementContext = PrimitiveDataModifyingStatementContext; 
GQLParser.InsertStatementContext = InsertStatementContext; 
GQLParser.SetStatementContext = SetStatementContext; 
GQLParser.SetItemListContext = SetItemListContext; 
GQLParser.SetItemContext = SetItemContext; 
GQLParser.SetPropertyItemContext = SetPropertyItemContext; 
GQLParser.SetAllPropertiesItemContext = SetAllPropertiesItemContext; 
GQLParser.SetLabelItemContext = SetLabelItemContext; 
GQLParser.RemoveStatementContext = RemoveStatementContext; 
GQLParser.RemoveItemListContext = RemoveItemListContext; 
GQLParser.RemoveItemContext = RemoveItemContext; 
GQLParser.RemovePropertyItemContext = RemovePropertyItemContext; 
GQLParser.RemoveLabelItemContext = RemoveLabelItemContext; 
GQLParser.DeleteStatementContext = DeleteStatementContext; 
GQLParser.DeleteItemListContext = DeleteItemListContext; 
GQLParser.DeleteItemContext = DeleteItemContext; 
GQLParser.CallDataModifyingProcedureStatementContext = CallDataModifyingProcedureStatementContext; 
GQLParser.CompositeQueryStatementContext = CompositeQueryStatementContext; 
GQLParser.CompositeQueryExpressionContext = CompositeQueryExpressionContext; 
GQLParser.QueryConjunctionContext = QueryConjunctionContext; 
GQLParser.SetOperatorContext = SetOperatorContext; 
GQLParser.CompositeQueryPrimaryContext = CompositeQueryPrimaryContext; 
GQLParser.LinearQueryStatementContext = LinearQueryStatementContext; 
GQLParser.FocusedLinearQueryStatementContext = FocusedLinearQueryStatementContext; 
GQLParser.FocusedLinearQueryStatementPartContext = FocusedLinearQueryStatementPartContext; 
GQLParser.FocusedLinearQueryAndPrimitiveResultStatementPartContext = FocusedLinearQueryAndPrimitiveResultStatementPartContext; 
GQLParser.FocusedPrimitiveResultStatementContext = FocusedPrimitiveResultStatementContext; 
GQLParser.FocusedNestedQuerySpecificationContext = FocusedNestedQuerySpecificationContext; 
GQLParser.AmbientLinearQueryStatementContext = AmbientLinearQueryStatementContext; 
GQLParser.SimpleLinearQueryStatementContext = SimpleLinearQueryStatementContext; 
GQLParser.SimpleQueryStatementContext = SimpleQueryStatementContext; 
GQLParser.PrimitiveQueryStatementContext = PrimitiveQueryStatementContext; 
GQLParser.MatchStatementContext = MatchStatementContext; 
GQLParser.SimpleMatchStatementContext = SimpleMatchStatementContext; 
GQLParser.OptionalMatchStatementContext = OptionalMatchStatementContext; 
GQLParser.OptionalOperandContext = OptionalOperandContext; 
GQLParser.MatchStatementBlockContext = MatchStatementBlockContext; 
GQLParser.CallQueryStatementContext = CallQueryStatementContext; 
GQLParser.FilterStatementContext = FilterStatementContext; 
GQLParser.LetStatementContext = LetStatementContext; 
GQLParser.LetVariableDefinitionListContext = LetVariableDefinitionListContext; 
GQLParser.LetVariableDefinitionContext = LetVariableDefinitionContext; 
GQLParser.ForStatementContext = ForStatementContext; 
GQLParser.ForItemContext = ForItemContext; 
GQLParser.ForItemAliasContext = ForItemAliasContext; 
GQLParser.ForItemSourceContext = ForItemSourceContext; 
GQLParser.ForOrdinalityOrOffsetContext = ForOrdinalityOrOffsetContext; 
GQLParser.OrderByAndPageStatementContext = OrderByAndPageStatementContext; 
GQLParser.PrimitiveResultStatementContext = PrimitiveResultStatementContext; 
GQLParser.ReturnStatementContext = ReturnStatementContext; 
GQLParser.ReturnStatementBodyContext = ReturnStatementBodyContext; 
GQLParser.ReturnItemListContext = ReturnItemListContext; 
GQLParser.ReturnItemContext = ReturnItemContext; 
GQLParser.ReturnItemAliasContext = ReturnItemAliasContext; 
GQLParser.SelectStatementContext = SelectStatementContext; 
GQLParser.SelectItemListContext = SelectItemListContext; 
GQLParser.SelectItemContext = SelectItemContext; 
GQLParser.SelectItemAliasContext = SelectItemAliasContext; 
GQLParser.HavingClauseContext = HavingClauseContext; 
GQLParser.SelectStatementBodyContext = SelectStatementBodyContext; 
GQLParser.SelectGraphMatchListContext = SelectGraphMatchListContext; 
GQLParser.SelectGraphMatchContext = SelectGraphMatchContext; 
GQLParser.SelectQuerySpecificationContext = SelectQuerySpecificationContext; 
GQLParser.CallProcedureStatementContext = CallProcedureStatementContext; 
GQLParser.ProcedureCallContext = ProcedureCallContext; 
GQLParser.InlineProcedureCallContext = InlineProcedureCallContext; 
GQLParser.VariableScopeClauseContext = VariableScopeClauseContext; 
GQLParser.BindingVariableReferenceListContext = BindingVariableReferenceListContext; 
GQLParser.NamedProcedureCallContext = NamedProcedureCallContext; 
GQLParser.ProcedureArgumentListContext = ProcedureArgumentListContext; 
GQLParser.ProcedureArgumentContext = ProcedureArgumentContext; 
GQLParser.AtSchemaClauseContext = AtSchemaClauseContext; 
GQLParser.UseGraphClauseContext = UseGraphClauseContext; 
GQLParser.GraphPatternBindingTableContext = GraphPatternBindingTableContext; 
GQLParser.GraphPatternYieldClauseContext = GraphPatternYieldClauseContext; 
GQLParser.GraphPatternYieldItemListContext = GraphPatternYieldItemListContext; 
GQLParser.GraphPatternYieldItemContext = GraphPatternYieldItemContext; 
GQLParser.GraphPatternContext = GraphPatternContext; 
GQLParser.MatchModeContext = MatchModeContext; 
GQLParser.RepeatableElementsMatchModeContext = RepeatableElementsMatchModeContext; 
GQLParser.DifferentEdgesMatchModeContext = DifferentEdgesMatchModeContext; 
GQLParser.ElementBindingsOrElementsContext = ElementBindingsOrElementsContext; 
GQLParser.EdgeBindingsOrEdgesContext = EdgeBindingsOrEdgesContext; 
GQLParser.PathPatternListContext = PathPatternListContext; 
GQLParser.PathPatternContext = PathPatternContext; 
GQLParser.PathVariableDeclarationContext = PathVariableDeclarationContext; 
GQLParser.KeepClauseContext = KeepClauseContext; 
GQLParser.GraphPatternWhereClauseContext = GraphPatternWhereClauseContext; 
GQLParser.InsertGraphPatternContext = InsertGraphPatternContext; 
GQLParser.InsertPathPatternListContext = InsertPathPatternListContext; 
GQLParser.InsertPathPatternContext = InsertPathPatternContext; 
GQLParser.InsertNodePatternContext = InsertNodePatternContext; 
GQLParser.InsertEdgePatternContext = InsertEdgePatternContext; 
GQLParser.InsertEdgePointingLeftContext = InsertEdgePointingLeftContext; 
GQLParser.InsertEdgePointingRightContext = InsertEdgePointingRightContext; 
GQLParser.InsertEdgeUndirectedContext = InsertEdgeUndirectedContext; 
GQLParser.InsertElementPatternFillerContext = InsertElementPatternFillerContext; 
GQLParser.LabelAndPropertySetSpecificationContext = LabelAndPropertySetSpecificationContext; 
GQLParser.PathPatternPrefixContext = PathPatternPrefixContext; 
GQLParser.PathModePrefixContext = PathModePrefixContext; 
GQLParser.PathModeContext = PathModeContext; 
GQLParser.PathSearchPrefixContext = PathSearchPrefixContext; 
GQLParser.AllPathSearchContext = AllPathSearchContext; 
GQLParser.PathOrPathsContext = PathOrPathsContext; 
GQLParser.AnyPathSearchContext = AnyPathSearchContext; 
GQLParser.NumberOfPathsContext = NumberOfPathsContext; 
GQLParser.ShortestPathSearchContext = ShortestPathSearchContext; 
GQLParser.AllShortestPathSearchContext = AllShortestPathSearchContext; 
GQLParser.AnyShortestPathSearchContext = AnyShortestPathSearchContext; 
GQLParser.CountedShortestPathSearchContext = CountedShortestPathSearchContext; 
GQLParser.CountedShortestGroupSearchContext = CountedShortestGroupSearchContext; 
GQLParser.NumberOfGroupsContext = NumberOfGroupsContext; 
GQLParser.PathPatternExpressionContext = PathPatternExpressionContext; 
GQLParser.PathTermContext = PathTermContext; 
GQLParser.PathFactorContext = PathFactorContext; 
GQLParser.PathPrimaryContext = PathPrimaryContext; 
GQLParser.ElementPatternContext = ElementPatternContext; 
GQLParser.NodePatternContext = NodePatternContext; 
GQLParser.ElementPatternFillerContext = ElementPatternFillerContext; 
GQLParser.ElementVariableDeclarationContext = ElementVariableDeclarationContext; 
GQLParser.IsLabelExpressionContext = IsLabelExpressionContext; 
GQLParser.IsOrColonContext = IsOrColonContext; 
GQLParser.ElementPatternPredicateContext = ElementPatternPredicateContext; 
GQLParser.ElementPatternWhereClauseContext = ElementPatternWhereClauseContext; 
GQLParser.ElementPropertySpecificationContext = ElementPropertySpecificationContext; 
GQLParser.PropertyKeyValuePairListContext = PropertyKeyValuePairListContext; 
GQLParser.PropertyKeyValuePairContext = PropertyKeyValuePairContext; 
GQLParser.EdgePatternContext = EdgePatternContext; 
GQLParser.FullEdgePatternContext = FullEdgePatternContext; 
GQLParser.FullEdgePointingLeftContext = FullEdgePointingLeftContext; 
GQLParser.FullEdgeUndirectedContext = FullEdgeUndirectedContext; 
GQLParser.FullEdgePointingRightContext = FullEdgePointingRightContext; 
GQLParser.FullEdgeLeftOrUndirectedContext = FullEdgeLeftOrUndirectedContext; 
GQLParser.FullEdgeUndirectedOrRightContext = FullEdgeUndirectedOrRightContext; 
GQLParser.FullEdgeLeftOrRightContext = FullEdgeLeftOrRightContext; 
GQLParser.FullEdgeAnyDirectionContext = FullEdgeAnyDirectionContext; 
GQLParser.AbbreviatedEdgePatternContext = AbbreviatedEdgePatternContext; 
GQLParser.ParenthesizedPathPatternExpressionContext = ParenthesizedPathPatternExpressionContext; 
GQLParser.SubpathVariableDeclarationContext = SubpathVariableDeclarationContext; 
GQLParser.ParenthesizedPathPatternWhereClauseContext = ParenthesizedPathPatternWhereClauseContext; 
GQLParser.LabelExpressionContext = LabelExpressionContext; 
GQLParser.PathVariableReferenceContext = PathVariableReferenceContext; 
GQLParser.ElementVariableReferenceContext = ElementVariableReferenceContext; 
GQLParser.GraphPatternQuantifierContext = GraphPatternQuantifierContext; 
GQLParser.FixedQuantifierContext = FixedQuantifierContext; 
GQLParser.GeneralQuantifierContext = GeneralQuantifierContext; 
GQLParser.LowerBoundContext = LowerBoundContext; 
GQLParser.UpperBoundContext = UpperBoundContext; 
GQLParser.SimplifiedPathPatternExpressionContext = SimplifiedPathPatternExpressionContext; 
GQLParser.SimplifiedDefaultingLeftContext = SimplifiedDefaultingLeftContext; 
GQLParser.SimplifiedDefaultingUndirectedContext = SimplifiedDefaultingUndirectedContext; 
GQLParser.SimplifiedDefaultingRightContext = SimplifiedDefaultingRightContext; 
GQLParser.SimplifiedDefaultingLeftOrUndirectedContext = SimplifiedDefaultingLeftOrUndirectedContext; 
GQLParser.SimplifiedDefaultingUndirectedOrRightContext = SimplifiedDefaultingUndirectedOrRightContext; 
GQLParser.SimplifiedDefaultingLeftOrRightContext = SimplifiedDefaultingLeftOrRightContext; 
GQLParser.SimplifiedDefaultingAnyDirectionContext = SimplifiedDefaultingAnyDirectionContext; 
GQLParser.SimplifiedContentsContext = SimplifiedContentsContext; 
GQLParser.SimplifiedPathUnionContext = SimplifiedPathUnionContext; 
GQLParser.SimplifiedMultisetAlternationContext = SimplifiedMultisetAlternationContext; 
GQLParser.SimplifiedTermContext = SimplifiedTermContext; 
GQLParser.SimplifiedFactorLowContext = SimplifiedFactorLowContext; 
GQLParser.SimplifiedFactorHighContext = SimplifiedFactorHighContext; 
GQLParser.SimplifiedQuantifiedContext = SimplifiedQuantifiedContext; 
GQLParser.SimplifiedQuestionedContext = SimplifiedQuestionedContext; 
GQLParser.SimplifiedTertiaryContext = SimplifiedTertiaryContext; 
GQLParser.SimplifiedDirectionOverrideContext = SimplifiedDirectionOverrideContext; 
GQLParser.SimplifiedOverrideLeftContext = SimplifiedOverrideLeftContext; 
GQLParser.SimplifiedOverrideUndirectedContext = SimplifiedOverrideUndirectedContext; 
GQLParser.SimplifiedOverrideRightContext = SimplifiedOverrideRightContext; 
GQLParser.SimplifiedOverrideLeftOrUndirectedContext = SimplifiedOverrideLeftOrUndirectedContext; 
GQLParser.SimplifiedOverrideUndirectedOrRightContext = SimplifiedOverrideUndirectedOrRightContext; 
GQLParser.SimplifiedOverrideLeftOrRightContext = SimplifiedOverrideLeftOrRightContext; 
GQLParser.SimplifiedOverrideAnyDirectionContext = SimplifiedOverrideAnyDirectionContext; 
GQLParser.SimplifiedSecondaryContext = SimplifiedSecondaryContext; 
GQLParser.SimplifiedNegationContext = SimplifiedNegationContext; 
GQLParser.SimplifiedPrimaryContext = SimplifiedPrimaryContext; 
GQLParser.WhereClauseContext = WhereClauseContext; 
GQLParser.YieldClauseContext = YieldClauseContext; 
GQLParser.YieldItemListContext = YieldItemListContext; 
GQLParser.YieldItemContext = YieldItemContext; 
GQLParser.YieldItemNameContext = YieldItemNameContext; 
GQLParser.YieldItemAliasContext = YieldItemAliasContext; 
GQLParser.GroupByClauseContext = GroupByClauseContext; 
GQLParser.GroupingElementListContext = GroupingElementListContext; 
GQLParser.GroupingElementContext = GroupingElementContext; 
GQLParser.EmptyGroupingSetContext = EmptyGroupingSetContext; 
GQLParser.OrderByClauseContext = OrderByClauseContext; 
GQLParser.SortSpecificationListContext = SortSpecificationListContext; 
GQLParser.SortSpecificationContext = SortSpecificationContext; 
GQLParser.SortKeyContext = SortKeyContext; 
GQLParser.OrderingSpecificationContext = OrderingSpecificationContext; 
GQLParser.NullOrderingContext = NullOrderingContext; 
GQLParser.LimitClauseContext = LimitClauseContext; 
GQLParser.OffsetClauseContext = OffsetClauseContext; 
GQLParser.OffsetSynonymContext = OffsetSynonymContext; 
GQLParser.SchemaReferenceContext = SchemaReferenceContext; 
GQLParser.AbsoluteCatalogSchemaReferenceContext = AbsoluteCatalogSchemaReferenceContext; 
GQLParser.CatalogSchemaParentAndNameContext = CatalogSchemaParentAndNameContext; 
GQLParser.RelativeCatalogSchemaReferenceContext = RelativeCatalogSchemaReferenceContext; 
GQLParser.PredefinedSchemaReferenceContext = PredefinedSchemaReferenceContext; 
GQLParser.AbsoluteDirectoryPathContext = AbsoluteDirectoryPathContext; 
GQLParser.RelativeDirectoryPathContext = RelativeDirectoryPathContext; 
GQLParser.SimpleDirectoryPathContext = SimpleDirectoryPathContext; 
GQLParser.GraphReferenceContext = GraphReferenceContext; 
GQLParser.CatalogGraphParentAndNameContext = CatalogGraphParentAndNameContext; 
GQLParser.HomeGraphContext = HomeGraphContext; 
GQLParser.GraphTypeReferenceContext = GraphTypeReferenceContext; 
GQLParser.CatalogGraphTypeParentAndNameContext = CatalogGraphTypeParentAndNameContext; 
GQLParser.BindingTableReferenceContext = BindingTableReferenceContext; 
GQLParser.ProcedureReferenceContext = ProcedureReferenceContext; 
GQLParser.CatalogProcedureParentAndNameContext = CatalogProcedureParentAndNameContext; 
GQLParser.CatalogObjectParentReferenceContext = CatalogObjectParentReferenceContext; 
GQLParser.ReferenceParameterSpecificationContext = ReferenceParameterSpecificationContext; 
GQLParser.NestedGraphTypeSpecificationContext = NestedGraphTypeSpecificationContext; 
GQLParser.GraphTypeSpecificationBodyContext = GraphTypeSpecificationBodyContext; 
GQLParser.ElementTypeListContext = ElementTypeListContext; 
GQLParser.ElementTypeSpecificationContext = ElementTypeSpecificationContext; 
GQLParser.NodeTypeSpecificationContext = NodeTypeSpecificationContext; 
GQLParser.NodeTypePatternContext = NodeTypePatternContext; 
GQLParser.NodeTypePhraseContext = NodeTypePhraseContext; 
GQLParser.NodeTypePhraseFillerContext = NodeTypePhraseFillerContext; 
GQLParser.NodeTypeFillerContext = NodeTypeFillerContext; 
GQLParser.LocalNodeTypeAliasContext = LocalNodeTypeAliasContext; 
GQLParser.NodeTypeImpliedContentContext = NodeTypeImpliedContentContext; 
GQLParser.NodeTypeKeyLabelSetContext = NodeTypeKeyLabelSetContext; 
GQLParser.NodeTypeLabelSetContext = NodeTypeLabelSetContext; 
GQLParser.NodeTypePropertyTypesContext = NodeTypePropertyTypesContext; 
GQLParser.EdgeTypeSpecificationContext = EdgeTypeSpecificationContext; 
GQLParser.EdgeTypePatternContext = EdgeTypePatternContext; 
GQLParser.EdgeTypePhraseContext = EdgeTypePhraseContext; 
GQLParser.EdgeTypePhraseFillerContext = EdgeTypePhraseFillerContext; 
GQLParser.EdgeTypeFillerContext = EdgeTypeFillerContext; 
GQLParser.EdgeTypeImpliedContentContext = EdgeTypeImpliedContentContext; 
GQLParser.EdgeTypeKeyLabelSetContext = EdgeTypeKeyLabelSetContext; 
GQLParser.EdgeTypeLabelSetContext = EdgeTypeLabelSetContext; 
GQLParser.EdgeTypePropertyTypesContext = EdgeTypePropertyTypesContext; 
GQLParser.EdgeTypePatternDirectedContext = EdgeTypePatternDirectedContext; 
GQLParser.EdgeTypePatternPointingRightContext = EdgeTypePatternPointingRightContext; 
GQLParser.EdgeTypePatternPointingLeftContext = EdgeTypePatternPointingLeftContext; 
GQLParser.EdgeTypePatternUndirectedContext = EdgeTypePatternUndirectedContext; 
GQLParser.ArcTypePointingRightContext = ArcTypePointingRightContext; 
GQLParser.ArcTypePointingLeftContext = ArcTypePointingLeftContext; 
GQLParser.ArcTypeUndirectedContext = ArcTypeUndirectedContext; 
GQLParser.SourceNodeTypeReferenceContext = SourceNodeTypeReferenceContext; 
GQLParser.DestinationNodeTypeReferenceContext = DestinationNodeTypeReferenceContext; 
GQLParser.EdgeKindContext = EdgeKindContext; 
GQLParser.EndpointPairPhraseContext = EndpointPairPhraseContext; 
GQLParser.EndpointPairContext = EndpointPairContext; 
GQLParser.EndpointPairDirectedContext = EndpointPairDirectedContext; 
GQLParser.EndpointPairPointingRightContext = EndpointPairPointingRightContext; 
GQLParser.EndpointPairPointingLeftContext = EndpointPairPointingLeftContext; 
GQLParser.EndpointPairUndirectedContext = EndpointPairUndirectedContext; 
GQLParser.ConnectorPointingRightContext = ConnectorPointingRightContext; 
GQLParser.ConnectorUndirectedContext = ConnectorUndirectedContext; 
GQLParser.SourceNodeTypeAliasContext = SourceNodeTypeAliasContext; 
GQLParser.DestinationNodeTypeAliasContext = DestinationNodeTypeAliasContext; 
GQLParser.LabelSetPhraseContext = LabelSetPhraseContext; 
GQLParser.LabelSetSpecificationContext = LabelSetSpecificationContext; 
GQLParser.PropertyTypesSpecificationContext = PropertyTypesSpecificationContext; 
GQLParser.PropertyTypeListContext = PropertyTypeListContext; 
GQLParser.PropertyTypeContext = PropertyTypeContext; 
GQLParser.PropertyValueTypeContext = PropertyValueTypeContext; 
GQLParser.BindingTableTypeContext = BindingTableTypeContext; 
GQLParser.ValueTypeContext = ValueTypeContext; 
GQLParser.TypedContext = TypedContext; 
GQLParser.PredefinedTypeContext = PredefinedTypeContext; 
GQLParser.BooleanTypeContext = BooleanTypeContext; 
GQLParser.CharacterStringTypeContext = CharacterStringTypeContext; 
GQLParser.ByteStringTypeContext = ByteStringTypeContext; 
GQLParser.MinLengthContext = MinLengthContext; 
GQLParser.MaxLengthContext = MaxLengthContext; 
GQLParser.FixedLengthContext = FixedLengthContext; 
GQLParser.NumericTypeContext = NumericTypeContext; 
GQLParser.ExactNumericTypeContext = ExactNumericTypeContext; 
GQLParser.BinaryExactNumericTypeContext = BinaryExactNumericTypeContext; 
GQLParser.SignedBinaryExactNumericTypeContext = SignedBinaryExactNumericTypeContext; 
GQLParser.UnsignedBinaryExactNumericTypeContext = UnsignedBinaryExactNumericTypeContext; 
GQLParser.VerboseBinaryExactNumericTypeContext = VerboseBinaryExactNumericTypeContext; 
GQLParser.DecimalExactNumericTypeContext = DecimalExactNumericTypeContext; 
GQLParser.PrecisionContext = PrecisionContext; 
GQLParser.ScaleContext = ScaleContext; 
GQLParser.ApproximateNumericTypeContext = ApproximateNumericTypeContext; 
GQLParser.TemporalTypeContext = TemporalTypeContext; 
GQLParser.TemporalInstantTypeContext = TemporalInstantTypeContext; 
GQLParser.DatetimeTypeContext = DatetimeTypeContext; 
GQLParser.LocaldatetimeTypeContext = LocaldatetimeTypeContext; 
GQLParser.DateTypeContext = DateTypeContext; 
GQLParser.TimeTypeContext = TimeTypeContext; 
GQLParser.LocaltimeTypeContext = LocaltimeTypeContext; 
GQLParser.TemporalDurationTypeContext = TemporalDurationTypeContext; 
GQLParser.TemporalDurationQualifierContext = TemporalDurationQualifierContext; 
GQLParser.ReferenceValueTypeContext = ReferenceValueTypeContext; 
GQLParser.ImmaterialValueTypeContext = ImmaterialValueTypeContext; 
GQLParser.NullTypeContext = NullTypeContext; 
GQLParser.EmptyTypeContext = EmptyTypeContext; 
GQLParser.GraphReferenceValueTypeContext = GraphReferenceValueTypeContext; 
GQLParser.ClosedGraphReferenceValueTypeContext = ClosedGraphReferenceValueTypeContext; 
GQLParser.OpenGraphReferenceValueTypeContext = OpenGraphReferenceValueTypeContext; 
GQLParser.BindingTableReferenceValueTypeContext = BindingTableReferenceValueTypeContext; 
GQLParser.NodeReferenceValueTypeContext = NodeReferenceValueTypeContext; 
GQLParser.ClosedNodeReferenceValueTypeContext = ClosedNodeReferenceValueTypeContext; 
GQLParser.OpenNodeReferenceValueTypeContext = OpenNodeReferenceValueTypeContext; 
GQLParser.EdgeReferenceValueTypeContext = EdgeReferenceValueTypeContext; 
GQLParser.ClosedEdgeReferenceValueTypeContext = ClosedEdgeReferenceValueTypeContext; 
GQLParser.OpenEdgeReferenceValueTypeContext = OpenEdgeReferenceValueTypeContext; 
GQLParser.PathValueTypeContext = PathValueTypeContext; 
GQLParser.ListValueTypeNameContext = ListValueTypeNameContext; 
GQLParser.ListValueTypeNameSynonymContext = ListValueTypeNameSynonymContext; 
GQLParser.RecordTypeContext = RecordTypeContext; 
GQLParser.FieldTypesSpecificationContext = FieldTypesSpecificationContext; 
GQLParser.FieldTypeListContext = FieldTypeListContext; 
GQLParser.NotNullContext = NotNullContext; 
GQLParser.FieldTypeContext = FieldTypeContext; 
GQLParser.SearchConditionContext = SearchConditionContext; 
GQLParser.PredicateContext = PredicateContext; 
GQLParser.ComparisonPredicatePart2Context = ComparisonPredicatePart2Context; 
GQLParser.CompOpContext = CompOpContext; 
GQLParser.ExistsPredicateContext = ExistsPredicateContext; 
GQLParser.NullPredicateContext = NullPredicateContext; 
GQLParser.NullPredicatePart2Context = NullPredicatePart2Context; 
GQLParser.ValueTypePredicateContext = ValueTypePredicateContext; 
GQLParser.ValueTypePredicatePart2Context = ValueTypePredicatePart2Context; 
GQLParser.NormalizedPredicatePart2Context = NormalizedPredicatePart2Context; 
GQLParser.DirectedPredicateContext = DirectedPredicateContext; 
GQLParser.DirectedPredicatePart2Context = DirectedPredicatePart2Context; 
GQLParser.LabeledPredicateContext = LabeledPredicateContext; 
GQLParser.LabeledPredicatePart2Context = LabeledPredicatePart2Context; 
GQLParser.IsLabeledOrColonContext = IsLabeledOrColonContext; 
GQLParser.SourceDestinationPredicateContext = SourceDestinationPredicateContext; 
GQLParser.NodeReferenceContext = NodeReferenceContext; 
GQLParser.SourcePredicatePart2Context = SourcePredicatePart2Context; 
GQLParser.DestinationPredicatePart2Context = DestinationPredicatePart2Context; 
GQLParser.EdgeReferenceContext = EdgeReferenceContext; 
GQLParser.All_differentPredicateContext = All_differentPredicateContext; 
GQLParser.SamePredicateContext = SamePredicateContext; 
GQLParser.Property_existsPredicateContext = Property_existsPredicateContext; 
GQLParser.ValueExpressionContext = ValueExpressionContext; 
GQLParser.ValueFunctionContext = ValueFunctionContext; 
GQLParser.BooleanValueExpressionContext = BooleanValueExpressionContext; 
GQLParser.CharacterOrByteStringFunctionContext = CharacterOrByteStringFunctionContext; 
GQLParser.SubCharacterOrByteStringContext = SubCharacterOrByteStringContext; 
GQLParser.TrimSingleCharacterOrByteStringContext = TrimSingleCharacterOrByteStringContext; 
GQLParser.FoldCharacterStringContext = FoldCharacterStringContext; 
GQLParser.TrimMultiCharacterCharacterStringContext = TrimMultiCharacterCharacterStringContext; 
GQLParser.NormalizeCharacterStringContext = NormalizeCharacterStringContext; 
GQLParser.NodeReferenceValueExpressionContext = NodeReferenceValueExpressionContext; 
GQLParser.EdgeReferenceValueExpressionContext = EdgeReferenceValueExpressionContext; 
GQLParser.AggregatingValueExpressionContext = AggregatingValueExpressionContext; 
GQLParser.ValueExpressionPrimaryContext = ValueExpressionPrimaryContext; 
GQLParser.ParenthesizedValueExpressionContext = ParenthesizedValueExpressionContext; 
GQLParser.NonParenthesizedValueExpressionPrimaryContext = NonParenthesizedValueExpressionPrimaryContext; 
GQLParser.NonParenthesizedValueExpressionPrimarySpecialCaseContext = NonParenthesizedValueExpressionPrimarySpecialCaseContext; 
GQLParser.UnsignedValueSpecificationContext = UnsignedValueSpecificationContext; 
GQLParser.NonNegativeIntegerSpecificationContext = NonNegativeIntegerSpecificationContext; 
GQLParser.GeneralValueSpecificationContext = GeneralValueSpecificationContext; 
GQLParser.DynamicParameterSpecificationContext = DynamicParameterSpecificationContext; 
GQLParser.LetValueExpressionContext = LetValueExpressionContext; 
GQLParser.ValueQueryExpressionContext = ValueQueryExpressionContext; 
GQLParser.CaseExpressionContext = CaseExpressionContext; 
GQLParser.CaseAbbreviationContext = CaseAbbreviationContext; 
GQLParser.CaseSpecificationContext = CaseSpecificationContext; 
GQLParser.SimpleCaseContext = SimpleCaseContext; 
GQLParser.SearchedCaseContext = SearchedCaseContext; 
GQLParser.SimpleWhenClauseContext = SimpleWhenClauseContext; 
GQLParser.SearchedWhenClauseContext = SearchedWhenClauseContext; 
GQLParser.ElseClauseContext = ElseClauseContext; 
GQLParser.CaseOperandContext = CaseOperandContext; 
GQLParser.WhenOperandListContext = WhenOperandListContext; 
GQLParser.WhenOperandContext = WhenOperandContext; 
GQLParser.ResultContext = ResultContext; 
GQLParser.ResultExpressionContext = ResultExpressionContext; 
GQLParser.CastSpecificationContext = CastSpecificationContext; 
GQLParser.CastOperandContext = CastOperandContext; 
GQLParser.CastTargetContext = CastTargetContext; 
GQLParser.AggregateFunctionContext = AggregateFunctionContext; 
GQLParser.GeneralSetFunctionContext = GeneralSetFunctionContext; 
GQLParser.BinarySetFunctionContext = BinarySetFunctionContext; 
GQLParser.GeneralSetFunctionTypeContext = GeneralSetFunctionTypeContext; 
GQLParser.SetQuantifierContext = SetQuantifierContext; 
GQLParser.BinarySetFunctionTypeContext = BinarySetFunctionTypeContext; 
GQLParser.DependentValueExpressionContext = DependentValueExpressionContext; 
GQLParser.IndependentValueExpressionContext = IndependentValueExpressionContext; 
GQLParser.Element_idFunctionContext = Element_idFunctionContext; 
GQLParser.BindingVariableReferenceContext = BindingVariableReferenceContext; 
GQLParser.PathValueExpressionContext = PathValueExpressionContext; 
GQLParser.PathValueConstructorContext = PathValueConstructorContext; 
GQLParser.PathValueConstructorByEnumerationContext = PathValueConstructorByEnumerationContext; 
GQLParser.PathElementListContext = PathElementListContext; 
GQLParser.PathElementListStartContext = PathElementListStartContext; 
GQLParser.PathElementListStepContext = PathElementListStepContext; 
GQLParser.ListValueExpressionContext = ListValueExpressionContext; 
GQLParser.ListValueFunctionContext = ListValueFunctionContext; 
GQLParser.TrimListFunctionContext = TrimListFunctionContext; 
GQLParser.ElementsFunctionContext = ElementsFunctionContext; 
GQLParser.ListValueConstructorContext = ListValueConstructorContext; 
GQLParser.ListValueConstructorByEnumerationContext = ListValueConstructorByEnumerationContext; 
GQLParser.ListElementListContext = ListElementListContext; 
GQLParser.ListElementContext = ListElementContext; 
GQLParser.RecordConstructorContext = RecordConstructorContext; 
GQLParser.FieldsSpecificationContext = FieldsSpecificationContext; 
GQLParser.FieldListContext = FieldListContext; 
GQLParser.FieldContext = FieldContext; 
GQLParser.TruthValueContext = TruthValueContext; 
GQLParser.NumericValueExpressionContext = NumericValueExpressionContext; 
GQLParser.NumericValueFunctionContext = NumericValueFunctionContext; 
GQLParser.LengthExpressionContext = LengthExpressionContext; 
GQLParser.CardinalityExpressionContext = CardinalityExpressionContext; 
GQLParser.CardinalityExpressionArgumentContext = CardinalityExpressionArgumentContext; 
GQLParser.CharLengthExpressionContext = CharLengthExpressionContext; 
GQLParser.ByteLengthExpressionContext = ByteLengthExpressionContext; 
GQLParser.PathLengthExpressionContext = PathLengthExpressionContext; 
GQLParser.AbsoluteValueExpressionContext = AbsoluteValueExpressionContext; 
GQLParser.ModulusExpressionContext = ModulusExpressionContext; 
GQLParser.NumericValueExpressionDividendContext = NumericValueExpressionDividendContext; 
GQLParser.NumericValueExpressionDivisorContext = NumericValueExpressionDivisorContext; 
GQLParser.TrigonometricFunctionContext = TrigonometricFunctionContext; 
GQLParser.TrigonometricFunctionNameContext = TrigonometricFunctionNameContext; 
GQLParser.GeneralLogarithmFunctionContext = GeneralLogarithmFunctionContext; 
GQLParser.GeneralLogarithmBaseContext = GeneralLogarithmBaseContext; 
GQLParser.GeneralLogarithmArgumentContext = GeneralLogarithmArgumentContext; 
GQLParser.CommonLogarithmContext = CommonLogarithmContext; 
GQLParser.NaturalLogarithmContext = NaturalLogarithmContext; 
GQLParser.ExponentialFunctionContext = ExponentialFunctionContext; 
GQLParser.PowerFunctionContext = PowerFunctionContext; 
GQLParser.NumericValueExpressionBaseContext = NumericValueExpressionBaseContext; 
GQLParser.NumericValueExpressionExponentContext = NumericValueExpressionExponentContext; 
GQLParser.SquareRootContext = SquareRootContext; 
GQLParser.FloorFunctionContext = FloorFunctionContext; 
GQLParser.CeilingFunctionContext = CeilingFunctionContext; 
GQLParser.CharacterStringValueExpressionContext = CharacterStringValueExpressionContext; 
GQLParser.ByteStringValueExpressionContext = ByteStringValueExpressionContext; 
GQLParser.TrimOperandsContext = TrimOperandsContext; 
GQLParser.TrimCharacterOrByteStringSourceContext = TrimCharacterOrByteStringSourceContext; 
GQLParser.TrimSpecificationContext = TrimSpecificationContext; 
GQLParser.TrimCharacterOrByteStringContext = TrimCharacterOrByteStringContext; 
GQLParser.NormalFormContext = NormalFormContext; 
GQLParser.StringLengthContext = StringLengthContext; 
GQLParser.DatetimeValueExpressionContext = DatetimeValueExpressionContext; 
GQLParser.DatetimeValueFunctionContext = DatetimeValueFunctionContext; 
GQLParser.DateFunctionContext = DateFunctionContext; 
GQLParser.TimeFunctionContext = TimeFunctionContext; 
GQLParser.LocaltimeFunctionContext = LocaltimeFunctionContext; 
GQLParser.DatetimeFunctionContext = DatetimeFunctionContext; 
GQLParser.LocaldatetimeFunctionContext = LocaldatetimeFunctionContext; 
GQLParser.DateFunctionParametersContext = DateFunctionParametersContext; 
GQLParser.TimeFunctionParametersContext = TimeFunctionParametersContext; 
GQLParser.DatetimeFunctionParametersContext = DatetimeFunctionParametersContext; 
GQLParser.DurationValueExpressionContext = DurationValueExpressionContext; 
GQLParser.DatetimeSubtractionContext = DatetimeSubtractionContext; 
GQLParser.DatetimeSubtractionParametersContext = DatetimeSubtractionParametersContext; 
GQLParser.DatetimeValueExpression1Context = DatetimeValueExpression1Context; 
GQLParser.DatetimeValueExpression2Context = DatetimeValueExpression2Context; 
GQLParser.DurationValueFunctionContext = DurationValueFunctionContext; 
GQLParser.DurationFunctionContext = DurationFunctionContext; 
GQLParser.DurationFunctionParametersContext = DurationFunctionParametersContext; 
GQLParser.ObjectNameContext = ObjectNameContext; 
GQLParser.ObjectNameOrBindingVariableContext = ObjectNameOrBindingVariableContext; 
GQLParser.DirectoryNameContext = DirectoryNameContext; 
GQLParser.SchemaNameContext = SchemaNameContext; 
GQLParser.GraphNameContext = GraphNameContext; 
GQLParser.DelimitedGraphNameContext = DelimitedGraphNameContext; 
GQLParser.GraphTypeNameContext = GraphTypeNameContext; 
GQLParser.NodeTypeNameContext = NodeTypeNameContext; 
GQLParser.EdgeTypeNameContext = EdgeTypeNameContext; 
GQLParser.BindingTableNameContext = BindingTableNameContext; 
GQLParser.DelimitedBindingTableNameContext = DelimitedBindingTableNameContext; 
GQLParser.ProcedureNameContext = ProcedureNameContext; 
GQLParser.LabelNameContext = LabelNameContext; 
GQLParser.PropertyNameContext = PropertyNameContext; 
GQLParser.FieldNameContext = FieldNameContext; 
GQLParser.ElementVariableContext = ElementVariableContext; 
GQLParser.PathVariableContext = PathVariableContext; 
GQLParser.SubpathVariableContext = SubpathVariableContext; 
GQLParser.BindingVariableContext = BindingVariableContext; 
GQLParser.UnsignedLiteralContext = UnsignedLiteralContext; 
GQLParser.GeneralLiteralContext = GeneralLiteralContext; 
GQLParser.TemporalLiteralContext = TemporalLiteralContext; 
GQLParser.DateLiteralContext = DateLiteralContext; 
GQLParser.TimeLiteralContext = TimeLiteralContext; 
GQLParser.DatetimeLiteralContext = DatetimeLiteralContext; 
GQLParser.ListLiteralContext = ListLiteralContext; 
GQLParser.RecordLiteralContext = RecordLiteralContext; 
GQLParser.IdentifierContext = IdentifierContext; 
GQLParser.RegularIdentifierContext = RegularIdentifierContext; 
GQLParser.TimeZoneStringContext = TimeZoneStringContext; 
GQLParser.CharacterStringLiteralContext = CharacterStringLiteralContext; 
GQLParser.UnsignedNumericLiteralContext = UnsignedNumericLiteralContext; 
GQLParser.ExactNumericLiteralContext = ExactNumericLiteralContext; 
GQLParser.ApproximateNumericLiteralContext = ApproximateNumericLiteralContext; 
GQLParser.UnsignedIntegerContext = UnsignedIntegerContext; 
GQLParser.UnsignedDecimalIntegerContext = UnsignedDecimalIntegerContext; 
GQLParser.NullLiteralContext = NullLiteralContext; 
GQLParser.DateStringContext = DateStringContext; 
GQLParser.TimeStringContext = TimeStringContext; 
GQLParser.DatetimeStringContext = DatetimeStringContext; 
GQLParser.DurationLiteralContext = DurationLiteralContext; 
GQLParser.DurationStringContext = DurationStringContext; 
GQLParser.NodeSynonymContext = NodeSynonymContext; 
GQLParser.EdgesSynonymContext = EdgesSynonymContext; 
GQLParser.EdgeSynonymContext = EdgeSynonymContext; 
GQLParser.NonReservedWordsContext = NonReservedWordsContext; 
